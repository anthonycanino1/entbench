!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCEL	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
ADOBE	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace ADOBE = new RGBSpace(0.6400f, 0.3300f, 0.2100f, 0.7100f, 0.1500f, 0.0600f, 0.31271f, 0.32902f, 2.2f, 0);$/;"	f	class:RGBSpace
API	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
APPLE	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace APPLE = new RGBSpace(0.6250f, 0.3400f, 0.2800f, 0.5950f, 0.1550f, 0.0700f, 0.31271f, 0.32902f, 1.8f, 0);$/;"	f	class:RGBSpace
AccelerationStructure	src/org/sunflow/core/AccelerationStructure.java	/^public interface AccelerationStructure {$/;"	i
AccelerationStructureFactory	src/org/sunflow/core/AccelerationStructureFactory.java	/^class AccelerationStructureFactory {$/;"	c
AmbientOcclusionGIEngine	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    public AmbientOcclusionGIEngine(Options options) {$/;"	m	class:AmbientOcclusionGIEngine
AmbientOcclusionGIEngine	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^public class AmbientOcclusionGIEngine implements GIEngine {$/;"	c
AmbientOcclusionShader	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public AmbientOcclusionShader() {$/;"	m	class:AmbientOcclusionShader
AmbientOcclusionShader	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public AmbientOcclusionShader(Color c, float d) {$/;"	m	class:AmbientOcclusionShader
AmbientOcclusionShader	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^public class AmbientOcclusionShader implements Shader {$/;"	c
AnisotropicWardShader	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    public AnisotropicWardShader() {$/;"	m	class:AnisotropicWardShader
AnisotropicWardShader	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^public class AnisotropicWardShader implements Shader {$/;"	c
BCKT	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
BENCH	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
BLACK	src/org/sunflow/image/Color.java	/^    public static final Color BLACK = new Color(0, 0, 0);$/;"	f	class:Color
BLUE	src/org/sunflow/image/Color.java	/^    public static final Color BLUE = new Color(0, 0, 1);$/;"	f	class:Color
BOOL	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
BORDERS	src/org/sunflow/core/shader/PrimIDShader.java	/^    private static final Color[] BORDERS = { Color.RED, Color.GREEN,$/;"	f	class:PrimIDShader	file:
BORDERS	src/org/sunflow/system/ImagePanel.java	/^    private static final int[] BORDERS = { Color.RED.toRGB(),$/;"	f	class:ImagePanel	file:
BOUNDING_RADIUS	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private static float BOUNDING_RADIUS = (float) Math.sqrt(3);$/;"	f	class:JuliaFractal	file:
BOUNDING_RADIUS2	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private static float BOUNDING_RADIUS2 = 3;$/;"	f	class:JuliaFractal	file:
Background	src/org/sunflow/core/primitive/Background.java	/^    public Background() {$/;"	m	class:Background
Background	src/org/sunflow/core/primitive/Background.java	/^public class Background implements PrimitiveList {$/;"	c
BakingSurface	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private class BakingSurface implements PrimitiveList {$/;"	c	class:TriangleMesh
BanchoffSurface	src/org/sunflow/core/primitive/BanchoffSurface.java	/^public class BanchoffSurface implements PrimitiveList {$/;"	c
Benchmark	src/org/sunflow/Benchmark.java	/^    public Benchmark() {$/;"	m	class:Benchmark
Benchmark	src/org/sunflow/Benchmark.java	/^    public Benchmark(int resolution, boolean showOutput, boolean showBenchmarkOutput, boolean saveOutput) {$/;"	m	class:Benchmark
Benchmark	src/org/sunflow/Benchmark.java	/^    public Benchmark(int resolution, boolean showOutput, boolean showBenchmarkOutput, boolean saveOutput, int threads) {$/;"	m	class:Benchmark
Benchmark	src/org/sunflow/Benchmark.java	/^public class Benchmark implements BenchmarkTest, UserInterface, Display {$/;"	c
BenchmarkFramework	src/org/sunflow/system/BenchmarkFramework.java	/^    public BenchmarkFramework(int iterations, int timeLimit) {$/;"	m	class:BenchmarkFramework
BenchmarkFramework	src/org/sunflow/system/BenchmarkFramework.java	/^public class BenchmarkFramework {$/;"	c
BenchmarkScene	src/org/sunflow/Benchmark.java	/^        public BenchmarkScene() {$/;"	m	class:Benchmark.BenchmarkScene
BenchmarkScene	src/org/sunflow/Benchmark.java	/^    private class BenchmarkScene extends SunflowAPI {$/;"	c	class:Benchmark
BenchmarkTest	src/org/sunflow/system/BenchmarkTest.java	/^public interface BenchmarkTest {$/;"	i
BezierMesh	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public BezierMesh() {$/;"	m	class:BezierMesh
BezierMesh	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public BezierMesh(float[][] patches) {$/;"	m	class:BezierMesh
BezierMesh	src/org/sunflow/core/tesselatable/BezierMesh.java	/^public class BezierMesh implements PrimitiveList, Tesselatable {$/;"	c
Bitmap	src/org/sunflow/image/Bitmap.java	/^    public Bitmap(String filename, boolean isLinear) throws IOException {$/;"	m	class:Bitmap
Bitmap	src/org/sunflow/image/Bitmap.java	/^    public Bitmap(int w, int h, boolean isHDR) {$/;"	m	class:Bitmap
Bitmap	src/org/sunflow/image/Bitmap.java	/^public class Bitmap {$/;"	c
BlackbodySpectrum	src/org/sunflow/image/BlackbodySpectrum.java	/^    public BlackbodySpectrum(float temp) {$/;"	m	class:BlackbodySpectrum
BlackbodySpectrum	src/org/sunflow/image/BlackbodySpectrum.java	/^public class BlackbodySpectrum extends SpectralCurve {$/;"	c
BlackmanHarrisFilter	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    public BlackmanHarrisFilter(float size) {$/;"	m	class:BlackmanHarrisFilter
BlackmanHarrisFilter	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^public class BlackmanHarrisFilter implements Filter {$/;"	c
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^    public BoundingBox() {$/;"	m	class:BoundingBox
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^    public BoundingBox(BoundingBox b) {$/;"	m	class:BoundingBox
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^    public BoundingBox(Point3 p) {$/;"	m	class:BoundingBox
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^    public BoundingBox(float size) {$/;"	m	class:BoundingBox
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^    public BoundingBox(float x, float y, float z) {$/;"	m	class:BoundingBox
BoundingBox	src/org/sunflow/math/BoundingBox.java	/^public class BoundingBox {$/;"	c
BoundingIntervalHierarchy	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    public BoundingIntervalHierarchy() {$/;"	m	class:BoundingIntervalHierarchy
BoundingIntervalHierarchy	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^public class BoundingIntervalHierarchy implements AccelerationStructure {$/;"	c
Box	src/org/sunflow/core/primitive/Box.java	/^    public Box() {$/;"	m	class:Box
Box	src/org/sunflow/core/primitive/Box.java	/^public class Box implements PrimitiveList {$/;"	c
BoxFilter	src/org/sunflow/core/filter/BoxFilter.java	/^    public BoxFilter(float size) {$/;"	m	class:BoxFilter
BoxFilter	src/org/sunflow/core/filter/BoxFilter.java	/^public class BoxFilter implements Filter {$/;"	c
BucketOrder	src/org/sunflow/core/BucketOrder.java	/^public interface BucketOrder {$/;"	i
BucketOrderFactory	src/org/sunflow/core/bucket/BucketOrderFactory.java	/^public class BucketOrderFactory {$/;"	c
BucketRenderer	src/org/sunflow/core/renderer/BucketRenderer.java	/^    public BucketRenderer() {$/;"	m	class:BucketRenderer
BucketRenderer	src/org/sunflow/core/renderer/BucketRenderer.java	/^public class BucketRenderer implements ImageSampler {$/;"	c
BucketThread	src/org/sunflow/core/renderer/BucketRenderer.java	/^        BucketThread(int threadID) {$/;"	m	class:BucketRenderer.BucketThread
BucketThread	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private class BucketThread extends Thread {$/;"	c	class:BucketRenderer
BucketThread	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private class BucketThread extends Thread {$/;"	c	class:SimpleRenderer
BuildStats	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        BuildStats() {$/;"	m	class:BoundingIntervalHierarchy.BuildStats
BuildStats	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private static class BuildStats {$/;"	c	class:BoundingIntervalHierarchy
BuildStats	src/org/sunflow/core/accel/KDTree.java	/^        BuildStats() {$/;"	m	class:KDTree.BuildStats
BuildStats	src/org/sunflow/core/accel/KDTree.java	/^    private static class BuildStats {$/;"	c	class:KDTree
BuildTask	src/org/sunflow/core/accel/KDTree.java	/^        BuildTask(int numObjects) {$/;"	m	class:KDTree.BuildTask
BuildTask	src/org/sunflow/core/accel/KDTree.java	/^        BuildTask(int numObjects, BuildTask parent) {$/;"	m	class:KDTree.BuildTask
BuildTask	src/org/sunflow/core/accel/KDTree.java	/^    private static class BuildTask {$/;"	c	class:KDTree
BumpMappingModifier	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^    public BumpMappingModifier() {$/;"	m	class:BumpMappingModifier
BumpMappingModifier	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^public class BumpMappingModifier implements Modifier {$/;"	c
ByteUtil	src/org/sunflow/system/ByteUtil.java	/^public class ByteUtil {$/;"	c
CAM	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
CAMERA	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
CIE	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace CIE = new RGBSpace(0.7350f, 0.2650f, 0.2740f, 0.7170f, 0.1670f, 0.0090f, 1 \/ 3.0f, 1 \/ 3.0f, 2.2f, 0);$/;"	f	class:RGBSpace
CIE_xbar	src/org/sunflow/image/SpectralCurve.java	/^    private static final double[] CIE_xbar = { 0.000129900000, 0.000232100000,$/;"	f	class:SpectralCurve	file:
CIE_ybar	src/org/sunflow/image/SpectralCurve.java	/^    private static final double[] CIE_ybar = { 0.000003917000, 0.000006965000,$/;"	f	class:SpectralCurve	file:
CIE_zbar	src/org/sunflow/image/SpectralCurve.java	/^    private static final double[] CIE_zbar = { 0.000606100000, 0.001086000000,$/;"	f	class:SpectralCurve	file:
CLOSED	src/org/sunflow/core/accel/KDTree.java	/^    private static final long CLOSED = 0L << 30;$/;"	f	class:KDTree	file:
COLOR	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
COS_PHI	src/org/sunflow/math/Vector3.java	/^    private static final float[] COS_PHI = new float[256];$/;"	f	class:Vector3	file:
COS_THETA	src/org/sunflow/math/Vector3.java	/^    private static final float[] COS_THETA = new float[256];$/;"	f	class:Vector3	file:
CYAN	src/org/sunflow/image/Color.java	/^    public static final Color CYAN = new Color(0, 1, 1);$/;"	f	class:Color
CacheEntry	src/org/sunflow/core/LightServer.java	/^    private static class CacheEntry {$/;"	c	class:LightServer
Camera	src/org/sunflow/core/Camera.java	/^    public Camera(CameraLens lens) {$/;"	m	class:Camera
Camera	src/org/sunflow/core/Camera.java	/^public class Camera implements RenderObject {$/;"	c
CameraLens	src/org/sunflow/core/CameraLens.java	/^public interface CameraLens extends RenderObject {$/;"	i
CatmullRomFilter	src/org/sunflow/core/filter/CatmullRomFilter.java	/^public class CatmullRomFilter implements Filter {$/;"	c
CausticPhotonMap	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public CausticPhotonMap(Options options) {$/;"	m	class:CausticPhotonMap
CausticPhotonMap	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^public final class CausticPhotonMap implements CausticPhotonMapInterface {$/;"	c
CausticPhotonMapInterface	src/org/sunflow/core/CausticPhotonMapInterface.java	/^public interface CausticPhotonMapInterface extends PhotonStore {$/;"	i
ChromaticitySpectrum	src/org/sunflow/image/ChromaticitySpectrum.java	/^    public ChromaticitySpectrum(float x, float y) {$/;"	m	class:ChromaticitySpectrum
ChromaticitySpectrum	src/org/sunflow/image/ChromaticitySpectrum.java	/^public final class ChromaticitySpectrum extends SpectralCurve {$/;"	c
Color	src/org/sunflow/image/Color.java	/^    public Color() {$/;"	m	class:Color
Color	src/org/sunflow/image/Color.java	/^    public Color(Color c) {$/;"	m	class:Color
Color	src/org/sunflow/image/Color.java	/^    public Color(float gray) {$/;"	m	class:Color
Color	src/org/sunflow/image/Color.java	/^    public Color(float r, float g, float b) {$/;"	m	class:Color
Color	src/org/sunflow/image/Color.java	/^    public Color(int rgb) {$/;"	m	class:Color
Color	src/org/sunflow/image/Color.java	/^public final class Color {$/;"	c
ColumnBucketOrder	src/org/sunflow/core/bucket/ColumnBucketOrder.java	/^public class ColumnBucketOrder implements BucketOrder {$/;"	c
ConsoleInterface	src/org/sunflow/system/ui/ConsoleInterface.java	/^    public ConsoleInterface() {$/;"	m	class:ConsoleInterface
ConsoleInterface	src/org/sunflow/system/ui/ConsoleInterface.java	/^public class ConsoleInterface implements UserInterface {$/;"	c
ConstantShader	src/org/sunflow/core/shader/ConstantShader.java	/^    public ConstantShader() {$/;"	m	class:ConstantShader
ConstantShader	src/org/sunflow/core/shader/ConstantShader.java	/^public class ConstantShader implements Shader {$/;"	c
ConstantSpectralCurve	src/org/sunflow/image/ConstantSpectralCurve.java	/^    public ConstantSpectralCurve(float amp) {$/;"	m	class:ConstantSpectralCurve
ConstantSpectralCurve	src/org/sunflow/image/ConstantSpectralCurve.java	/^public class ConstantSpectralCurve extends SpectralCurve {$/;"	c
CornellBox	src/org/sunflow/core/primitive/CornellBox.java	/^    public CornellBox() {$/;"	m	class:CornellBox
CornellBox	src/org/sunflow/core/primitive/CornellBox.java	/^public class CornellBox implements PrimitiveList, Shader, LightSource {$/;"	c
CubeGrid	src/org/sunflow/core/primitive/CubeGrid.java	/^    public CubeGrid() {$/;"	m	class:CubeGrid
CubeGrid	src/org/sunflow/core/primitive/CubeGrid.java	/^public abstract class CubeGrid implements PrimitiveList {$/;"	c
DEFAULT_HEIGHT	src/SunflowGUI.java	/^    private static final int DEFAULT_HEIGHT = 768;$/;"	f	class:SunflowGUI	file:
DEFAULT_OPTIONS	src/org/sunflow/SunflowAPI.java	/^    public static final String DEFAULT_OPTIONS = "::options";$/;"	f	class:SunflowAPI
DEFAULT_WIDTH	src/SunflowGUI.java	/^    private static final int DEFAULT_WIDTH = 1024;$/;"	f	class:SunflowGUI	file:
DELTA	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private static float DELTA = 1e-4f;$/;"	f	class:JuliaFractal	file:
DETAIL	src/org/sunflow/system/UI.java	/^        ERROR, WARN, INFO, DETAIL$/;"	e	enum:UI.PrintLevel	file:
DISP	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
DiagonalBucketOrder	src/org/sunflow/core/bucket/DiagonalBucketOrder.java	/^public class DiagonalBucketOrder implements BucketOrder {$/;"	c
DiffuseShader	src/org/sunflow/core/shader/DiffuseShader.java	/^    public DiffuseShader() {$/;"	m	class:DiffuseShader
DiffuseShader	src/org/sunflow/core/shader/DiffuseShader.java	/^public class DiffuseShader implements Shader {$/;"	c
DirectionalSpotlight	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public DirectionalSpotlight() {$/;"	m	class:DirectionalSpotlight
DirectionalSpotlight	src/org/sunflow/core/light/DirectionalSpotlight.java	/^public class DirectionalSpotlight implements LightSource {$/;"	c
Display	src/org/sunflow/core/Display.java	/^public interface Display {$/;"	i
EBU	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace EBU = new RGBSpace(0.6400f, 0.3300f, 0.2900f, 0.6000f, 0.1500f, 0.0600f, 0.31271f, 0.32902f, 20.0f \/ 9.0f, 0.018f);$/;"	f	class:RGBSpace
EMPTY_BONUS	src/org/sunflow/core/accel/KDTree.java	/^    private static final float EMPTY_BONUS = 0.2f;$/;"	f	class:KDTree	file:
EPSILON	src/org/sunflow/core/Ray.java	/^    private static final float EPSILON = 0;\/\/ 0.01f;$/;"	f	class:Ray	file:
ERROR	src/org/sunflow/system/UI.java	/^        ERROR, WARN, INFO, DETAIL$/;"	e	enum:UI.PrintLevel	file:
ESCAPE_THRESHOLD	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private static float ESCAPE_THRESHOLD = 1e1f;$/;"	f	class:JuliaFractal	file:
EXPONENT	src/org/sunflow/image/Color.java	/^    private static final float[] EXPONENT = new float[256];$/;"	f	class:Color	file:
FACE	src/org/sunflow/core/ParameterList.java	/^        NONE, FACE, VERTEX, FACEVARYING$/;"	e	enum:ParameterList.InterpolationType	file:
FACEVARYING	src/org/sunflow/core/ParameterList.java	/^        NONE, FACE, VERTEX, FACEVARYING$/;"	e	enum:ParameterList.InterpolationType	file:
FLOAT	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
FLOAT	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final byte FLOAT = 2;$/;"	f	class:OpenExrDisplay	file:
FLOAT_SIZE	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int FLOAT_SIZE = 4;$/;"	f	class:OpenExrDisplay	file:
FakeGIEngine	src/org/sunflow/core/gi/FakeGIEngine.java	/^    public FakeGIEngine(Options options) {$/;"	m	class:FakeGIEngine
FakeGIEngine	src/org/sunflow/core/gi/FakeGIEngine.java	/^public class FakeGIEngine implements GIEngine {$/;"	c
FastDisplay	src/org/sunflow/core/display/FastDisplay.java	/^    public FastDisplay() {$/;"	m	class:FastDisplay
FastDisplay	src/org/sunflow/core/display/FastDisplay.java	/^public class FastDisplay extends JPanel implements Display {$/;"	c
FileDisplay	src/org/sunflow/core/display/FileDisplay.java	/^    public FileDisplay(String filename) {$/;"	m	class:FileDisplay
FileDisplay	src/org/sunflow/core/display/FileDisplay.java	/^    public FileDisplay(boolean saveImage) {$/;"	m	class:FileDisplay
FileDisplay	src/org/sunflow/core/display/FileDisplay.java	/^public class FileDisplay implements Display {$/;"	c
FileMesh	src/org/sunflow/core/tesselatable/FileMesh.java	/^public class FileMesh implements Tesselatable {$/;"	c
Filter	src/org/sunflow/core/Filter.java	/^public interface Filter {$/;"	i
FilterFactory	src/org/sunflow/core/filter/FilterFactory.java	/^public final class FilterFactory {$/;"	c
FisheyeLens	src/org/sunflow/core/camera/FisheyeLens.java	/^public class FisheyeLens implements CameraLens {$/;"	c
FloatArray	src/org/sunflow/util/FloatArray.java	/^    public FloatArray() {$/;"	m	class:FloatArray
FloatArray	src/org/sunflow/util/FloatArray.java	/^    public FloatArray(int capacity) {$/;"	m	class:FloatArray
FloatArray	src/org/sunflow/util/FloatArray.java	/^public final class FloatArray {$/;"	c
FloatParameter	src/org/sunflow/core/ParameterList.java	/^        private FloatParameter(InterpolationType interp, float[] data) {$/;"	m	class:ParameterList.FloatParameter	file:
FloatParameter	src/org/sunflow/core/ParameterList.java	/^        public FloatParameter() {$/;"	m	class:ParameterList.FloatParameter
FloatParameter	src/org/sunflow/core/ParameterList.java	/^        public FloatParameter(float f) {$/;"	m	class:ParameterList.FloatParameter
FloatParameter	src/org/sunflow/core/ParameterList.java	/^    public static final class FloatParameter {$/;"	c	class:ParameterList
FrameDisplay	src/org/sunflow/core/display/FrameDisplay.java	/^    public FrameDisplay() {$/;"	m	class:FrameDisplay
FrameDisplay	src/org/sunflow/core/display/FrameDisplay.java	/^    public FrameDisplay(String filename) {$/;"	m	class:FrameDisplay
FrameDisplay	src/org/sunflow/core/display/FrameDisplay.java	/^public class FrameDisplay implements Display {$/;"	c
G1	src/org/sunflow/math/PerlinScalar.java	/^    private static final float[] G1 = { -1, 1 };$/;"	f	class:PerlinScalar	file:
G2	src/org/sunflow/math/PerlinScalar.java	/^    private static final float[][] G2 = { { 1, 0 }, { -1, 0 }, { 0, 1 },$/;"	f	class:PerlinScalar	file:
G3	src/org/sunflow/math/PerlinScalar.java	/^    private static final float[][] G3 = { { 1, 1, 0 }, { -1, 1, 0 },$/;"	f	class:PerlinScalar	file:
G4	src/org/sunflow/math/PerlinScalar.java	/^    private static final float[][] G4 = { { -1, -1, -1, 0 }, { -1, -1, 1, 0 },$/;"	f	class:PerlinScalar	file:
GAMMA_CURVE	src/org/sunflow/image/RGBSpace.java	/^    private final int[] GAMMA_CURVE;$/;"	f	class:RGBSpace	file:
GEOM	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
GEOMETRY	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
GIEngine	src/org/sunflow/core/GIEngine.java	/^public interface GIEngine {$/;"	i
GIEngineFactory	src/org/sunflow/core/gi/GIEngineFactory.java	/^public final class GIEngineFactory {$/;"	c
GRAY	src/org/sunflow/image/Color.java	/^    public static final Color GRAY = new Color(0.5f, 0.5f, 0.5f);$/;"	f	class:Color
GREEN	src/org/sunflow/image/Color.java	/^    public static final Color GREEN = new Color(0, 1, 0);$/;"	f	class:Color
GUI	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
GaussianFilter	src/org/sunflow/core/filter/GaussianFilter.java	/^    public GaussianFilter(float size) {$/;"	m	class:GaussianFilter
GaussianFilter	src/org/sunflow/core/filter/GaussianFilter.java	/^public class GaussianFilter implements Filter {$/;"	c
Geometry	src/org/sunflow/core/Geometry.java	/^    public Geometry(PrimitiveList primitives) {$/;"	m	class:Geometry
Geometry	src/org/sunflow/core/Geometry.java	/^    public Geometry(Tesselatable tesselatable) {$/;"	m	class:Geometry
Geometry	src/org/sunflow/core/Geometry.java	/^public class Geometry implements RenderObject {$/;"	c
GlassShader	src/org/sunflow/core/shader/GlassShader.java	/^    public GlassShader() {$/;"	m	class:GlassShader
GlassShader	src/org/sunflow/core/shader/GlassShader.java	/^public class GlassShader implements Shader {$/;"	c
GlobalPhotonMap	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public GlobalPhotonMap(int numEmit, int numGather, float gatherRadius) {$/;"	m	class:GlobalPhotonMap
GlobalPhotonMap	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^public final class GlobalPhotonMap implements GlobalPhotonMapInterface {$/;"	c
GlobalPhotonMapInterface	src/org/sunflow/core/GlobalPhotonMapInterface.java	/^public interface GlobalPhotonMapInterface extends PhotonStore {$/;"	i
GridPhotonMap	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public GridPhotonMap(int numEmit, int numGather, float gatherRadius) {$/;"	m	class:GridPhotonMap
GridPhotonMap	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^public class GridPhotonMap implements GlobalPhotonMapInterface {$/;"	c
Gumbo	src/org/sunflow/core/tesselatable/Gumbo.java	/^    public Gumbo() {$/;"	m	class:Gumbo
Gumbo	src/org/sunflow/core/tesselatable/Gumbo.java	/^public class Gumbo extends BezierMesh {$/;"	c
HAIR	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
HALF	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final byte HALF = 1;$/;"	f	class:OpenExrDisplay	file:
HALF_SIZE	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int HALF_SIZE = 2;$/;"	f	class:OpenExrDisplay	file:
HDTV	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace HDTV = new RGBSpace(0.6400f, 0.3300f, 0.3000f, 0.6000f, 0.1500f, 0.0600f, 0.31271f, 0.32902f, 20.0f \/ 9.0f, 0.018f);$/;"	f	class:RGBSpace
Hair	src/org/sunflow/core/primitive/Hair.java	/^    public Hair() {$/;"	m	class:Hair
Hair	src/org/sunflow/core/primitive/Hair.java	/^public class Hair implements PrimitiveList, Shader {$/;"	c
HilbertBucketOrder	src/org/sunflow/core/bucket/HilbertBucketOrder.java	/^public class HilbertBucketOrder implements BucketOrder {$/;"	c
IDENTITY	src/org/sunflow/math/Matrix4.java	/^    public static final Matrix4 IDENTITY = Matrix4.scale(1);$/;"	f	class:Matrix4
IDShader	src/org/sunflow/core/shader/IDShader.java	/^public class IDShader implements Shader {$/;"	c
IMG	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
INFO	src/org/sunflow/system/UI.java	/^        ERROR, WARN, INFO, DETAIL$/;"	e	enum:UI.PrintLevel	file:
INSTANCE	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
INT	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
INTERSECT_COST	src/org/sunflow/core/accel/KDTree.java	/^    private static final float INTERSECT_COST = 0.5f;$/;"	f	class:KDTree	file:
INV_GAMMA_CURVE	src/org/sunflow/image/RGBSpace.java	/^    private final int[] INV_GAMMA_CURVE;$/;"	f	class:RGBSpace	file:
IPR	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
ImageBasedLight	src/org/sunflow/core/light/ImageBasedLight.java	/^    public ImageBasedLight() {$/;"	m	class:ImageBasedLight
ImageBasedLight	src/org/sunflow/core/light/ImageBasedLight.java	/^public class ImageBasedLight implements PrimitiveList, LightSource, Shader {$/;"	c
ImagePanel	src/org/sunflow/system/ImagePanel.java	/^    public ImagePanel() {$/;"	m	class:ImagePanel
ImagePanel	src/org/sunflow/system/ImagePanel.java	/^public class ImagePanel extends JPanel implements Display {$/;"	c
ImageSample	src/org/sunflow/core/renderer/BucketRenderer.java	/^        ImageSample(float rx, float ry, int i) {$/;"	m	class:BucketRenderer.ImageSample
ImageSample	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private static final class ImageSample {$/;"	c	class:BucketRenderer
ImageSampler	src/org/sunflow/core/ImageSampler.java	/^public interface ImageSampler {$/;"	i
ImgPipeDisplay	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public ImgPipeDisplay() {$/;"	m	class:ImgPipeDisplay
ImgPipeDisplay	src/org/sunflow/core/display/ImgPipeDisplay.java	/^public class ImgPipeDisplay extends JPanel implements Display {$/;"	c
Instance	src/org/sunflow/core/Instance.java	/^public class Instance implements RenderObject {$/;"	c
InstanceList	src/org/sunflow/core/InstanceList.java	/^    InstanceList() {$/;"	m	class:InstanceList
InstanceList	src/org/sunflow/core/InstanceList.java	/^    InstanceList(Instance[] instances) {$/;"	m	class:InstanceList
InstanceList	src/org/sunflow/core/InstanceList.java	/^final class InstanceList implements PrimitiveList {$/;"	c
InstantGI	src/org/sunflow/core/gi/InstantGI.java	/^    public InstantGI(Options options) {$/;"	m	class:InstantGI
InstantGI	src/org/sunflow/core/gi/InstantGI.java	/^public class InstantGI implements GIEngine {$/;"	c
IntArray	src/org/sunflow/util/IntArray.java	/^    public IntArray() {$/;"	m	class:IntArray
IntArray	src/org/sunflow/util/IntArray.java	/^    public IntArray(int capacity) {$/;"	m	class:IntArray
IntArray	src/org/sunflow/util/IntArray.java	/^public final class IntArray {$/;"	c
InterpolationType	src/org/sunflow/core/ParameterList.java	/^    public enum InterpolationType {$/;"	g	class:ParameterList
IntersectionState	src/org/sunflow/core/IntersectionState.java	/^    public IntersectionState() {$/;"	m	class:IntersectionState
IntersectionState	src/org/sunflow/core/IntersectionState.java	/^public final class IntersectionState {$/;"	c
InvertedBucketOrder	src/org/sunflow/core/bucket/InvertedBucketOrder.java	/^    public InvertedBucketOrder(BucketOrder order) {$/;"	m	class:InvertedBucketOrder
InvertedBucketOrder	src/org/sunflow/core/bucket/InvertedBucketOrder.java	/^public class InvertedBucketOrder implements BucketOrder {$/;"	c
IrradianceCacheGIEngine	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    public IrradianceCacheGIEngine(Options options) {$/;"	m	class:IrradianceCacheGIEngine
IrradianceCacheGIEngine	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^public class IrradianceCacheGIEngine implements GIEngine {$/;"	c
IrregularSpectralCurve	src/org/sunflow/image/IrregularSpectralCurve.java	/^    public IrregularSpectralCurve(float[] wavelengths, float[] amplitudes) {$/;"	m	class:IrregularSpectralCurve
IrregularSpectralCurve	src/org/sunflow/image/IrregularSpectralCurve.java	/^public class IrregularSpectralCurve extends SpectralCurve {$/;"	c
JuliaFractal	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public JuliaFractal() {$/;"	m	class:JuliaFractal
JuliaFractal	src/org/sunflow/core/primitive/JuliaFractal.java	/^public class JuliaFractal implements PrimitiveList {$/;"	c
KDTree	src/org/sunflow/core/accel/KDTree.java	/^    public KDTree() {$/;"	m	class:KDTree
KDTree	src/org/sunflow/core/accel/KDTree.java	/^    public KDTree(int maxPrims) {$/;"	m	class:KDTree
KDTree	src/org/sunflow/core/accel/KDTree.java	/^public class KDTree implements AccelerationStructure {$/;"	c
LIGHT	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
LIGHT	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
LanczosFilter	src/org/sunflow/core/filter/LanczosFilter.java	/^public class LanczosFilter implements Filter {$/;"	c
LightSample	src/org/sunflow/core/LightSample.java	/^    public LightSample() {$/;"	m	class:LightSample
LightSample	src/org/sunflow/core/LightSample.java	/^public class LightSample {$/;"	c
LightSampleIterator	src/org/sunflow/core/ShadingState.java	/^        LightSampleIterator(LightSample head) {$/;"	m	class:ShadingState.LightSampleIterator
LightSampleIterator	src/org/sunflow/core/ShadingState.java	/^    private static class LightSampleIterator implements Iterator<LightSample> {$/;"	c	class:ShadingState
LightServer	src/org/sunflow/core/LightServer.java	/^    LightServer(Scene scene) {$/;"	m	class:LightServer
LightServer	src/org/sunflow/core/LightServer.java	/^class LightServer {$/;"	c
LightSource	src/org/sunflow/core/LightSource.java	/^public interface LightSource extends RenderObject {$/;"	i
M1	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private final float M1, M2;$/;"	f	class:ChromaticitySpectrum	file:
M2	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private final float M1, M2;$/;"	f	class:ChromaticitySpectrum	file:
MAGENTA	src/org/sunflow/image/Color.java	/^    public static final Color MAGENTA = new Color(1, 0, 1);$/;"	f	class:Color
MATRIX	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
MAX_DEPTH	src/org/sunflow/core/accel/KDTree.java	/^    private static final int MAX_DEPTH = 64;$/;"	f	class:KDTree	file:
MAX_STACK_SIZE	src/org/sunflow/core/IntersectionState.java	/^    private static final int MAX_STACK_SIZE = 64;$/;"	f	class:IntersectionState	file:
MODIFIER	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
MathUtils	src/org/sunflow/math/MathUtils.java	/^    private MathUtils() {$/;"	m	class:MathUtils	file:
MathUtils	src/org/sunflow/math/MathUtils.java	/^public final class MathUtils {$/;"	c
Matrix4	src/org/sunflow/math/Matrix4.java	/^    public Matrix4() {$/;"	m	class:Matrix4
Matrix4	src/org/sunflow/math/Matrix4.java	/^    public Matrix4(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) {$/;"	m	class:Matrix4
Matrix4	src/org/sunflow/math/Matrix4.java	/^    public Matrix4(float[] m, boolean rowMajor) {$/;"	m	class:Matrix4
Matrix4	src/org/sunflow/math/Matrix4.java	/^public final class Matrix4 {$/;"	c
Memory	src/org/sunflow/system/Memory.java	/^public final class Memory {$/;"	c
MirrorShader	src/org/sunflow/core/shader/MirrorShader.java	/^    public MirrorShader() {$/;"	m	class:MirrorShader
MirrorShader	src/org/sunflow/core/shader/MirrorShader.java	/^public class MirrorShader implements Shader {$/;"	c
MitchellFilter	src/org/sunflow/core/filter/MitchellFilter.java	/^public class MitchellFilter implements Filter {$/;"	c
Modifier	src/org/sunflow/core/Modifier.java	/^public interface Modifier extends RenderObject {$/;"	i
Module	src/org/sunflow/system/UI.java	/^    public enum Module {$/;"	g	class:UI
NONE	src/org/sunflow/core/ParameterList.java	/^        NONE, FACE, VERTEX, FACEVARYING$/;"	e	enum:ParameterList.InterpolationType	file:
NORMAL_THRESHOLD	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private static final float NORMAL_THRESHOLD = (float) Math.cos(10.0 * Math.PI \/ 180.0);$/;"	f	class:GridPhotonMap	file:
NO_COMPRESSION	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int NO_COMPRESSION = 0;$/;"	f	class:OpenExrDisplay	file:
NTSC	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace NTSC = new RGBSpace(0.6700f, 0.3300f, 0.2100f, 0.7100f, 0.1400f, 0.0800f, 0.31010f, 0.31620f, 20.0f \/ 9.0f, 0.018f);$/;"	f	class:RGBSpace
NUM	src/org/sunflow/math/QMC.java	/^    private static final int NUM = 128;$/;"	f	class:QMC	file:
NearestPhotons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        NearestPhotons(Point3 p, int n, float maxDist2) {$/;"	m	class:CausticPhotonMap.NearestPhotons
NearestPhotons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private static class NearestPhotons {$/;"	c	class:CausticPhotonMap
NearestPhotons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        NearestPhotons(Point3 p, int n, float maxDist2) {$/;"	m	class:GlobalPhotonMap.NearestPhotons
NearestPhotons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private static class NearestPhotons {$/;"	c	class:GlobalPhotonMap
Node	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Node(Point3 center, float sideLength) {$/;"	m	class:IrradianceCacheGIEngine.Node
Node	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private final class Node {$/;"	c	class:IrradianceCacheGIEngine
NormalMapModifier	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^    public NormalMapModifier() {$/;"	m	class:NormalMapModifier
NormalMapModifier	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^public class NormalMapModifier implements Modifier {$/;"	c
NormalShader	src/org/sunflow/core/shader/NormalShader.java	/^public class NormalShader implements Shader {$/;"	c
NullAccelerator	src/org/sunflow/core/accel/NullAccelerator.java	/^    public NullAccelerator() {$/;"	m	class:NullAccelerator
NullAccelerator	src/org/sunflow/core/accel/NullAccelerator.java	/^public class NullAccelerator implements AccelerationStructure {$/;"	c
OE_EXR_VERSION	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private final static int OE_EXR_VERSION = 2;$/;"	f	class:OpenExrDisplay	file:
OE_MAGIC	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private final static int OE_MAGIC = 20000630;$/;"	f	class:OpenExrDisplay	file:
OE_TILED_FLAG	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private final static int OE_TILED_FLAG = 0x00000200;$/;"	f	class:OpenExrDisplay	file:
OPENED	src/org/sunflow/core/accel/KDTree.java	/^    private static final long OPENED = 2L << 30;$/;"	f	class:KDTree	file:
OPTIONS	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
OpenExrDisplay	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public OpenExrDisplay(String filename, String compression, String channelType) {$/;"	m	class:OpenExrDisplay
OpenExrDisplay	src/org/sunflow/core/display/OpenExrDisplay.java	/^public class OpenExrDisplay implements Display {$/;"	c
Options	src/org/sunflow/core/Options.java	/^public final class Options extends ParameterList implements RenderObject {$/;"	c
OrthoNormalBasis	src/org/sunflow/math/OrthoNormalBasis.java	/^    private OrthoNormalBasis() {$/;"	m	class:OrthoNormalBasis	file:
OrthoNormalBasis	src/org/sunflow/math/OrthoNormalBasis.java	/^public final class OrthoNormalBasis {$/;"	c
P1x	src/org/sunflow/math/PerlinVector.java	/^    private static final float P1x = 0.34f;$/;"	f	class:PerlinVector	file:
P1y	src/org/sunflow/math/PerlinVector.java	/^    private static final float P1y = 0.66f;$/;"	f	class:PerlinVector	file:
P1z	src/org/sunflow/math/PerlinVector.java	/^    private static final float P1z = 0.237f;$/;"	f	class:PerlinVector	file:
P2x	src/org/sunflow/math/PerlinVector.java	/^    private static final float P2x = 0.011f;$/;"	f	class:PerlinVector	file:
P2y	src/org/sunflow/math/PerlinVector.java	/^    private static final float P2y = 0.845f;$/;"	f	class:PerlinVector	file:
P2z	src/org/sunflow/math/PerlinVector.java	/^    private static final float P2z = 0.037f;$/;"	f	class:PerlinVector	file:
P3x	src/org/sunflow/math/PerlinVector.java	/^    private static final float P3x = 0.34f;$/;"	f	class:PerlinVector	file:
P3y	src/org/sunflow/math/PerlinVector.java	/^    private static final float P3y = 0.12f;$/;"	f	class:PerlinVector	file:
P3z	src/org/sunflow/math/PerlinVector.java	/^    private static final float P3z = 0.9f;$/;"	f	class:PerlinVector	file:
PATCHES	src/org/sunflow/core/tesselatable/Gumbo.java	/^    private static final float[][] PATCHES = {$/;"	f	class:Gumbo	file:
PATCHES	src/org/sunflow/core/tesselatable/Teapot.java	/^    private static final float[][] PATCHES = {$/;"	f	class:Teapot	file:
PLANAR	src/org/sunflow/core/accel/KDTree.java	/^    private static final long PLANAR = 1L << 30;$/;"	f	class:KDTree	file:
POINT	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
PRIMES	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private static final int[] PRIMES = { 11, 19, 37, 109, 163, 251, 367, 557,$/;"	f	class:GridPhotonMap	file:
PRIMES	src/org/sunflow/math/QMC.java	/^    private static final int[] PRIMES = new int[NUM];$/;"	f	class:QMC	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(Color c) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(ParameterType type, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(String value) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(String[] array) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(boolean value) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(float value) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(int value) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^        private Parameter(int[] array) {$/;"	m	class:ParameterList.Parameter	file:
Parameter	src/org/sunflow/core/ParameterList.java	/^    protected static final class Parameter {$/;"	c	class:ParameterList
ParameterList	src/org/sunflow/core/ParameterList.java	/^    public ParameterList() {$/;"	m	class:ParameterList
ParameterList	src/org/sunflow/core/ParameterList.java	/^public class ParameterList {$/;"	c
ParameterType	src/org/sunflow/core/ParameterList.java	/^    private enum ParameterType {$/;"	g	class:ParameterList
Parser	src/org/sunflow/system/Parser.java	/^    public Parser(String filename) throws FileNotFoundException {$/;"	m	class:Parser
Parser	src/org/sunflow/system/Parser.java	/^public class Parser {$/;"	c
ParserException	src/org/sunflow/system/Parser.java	/^        private ParserException(String token, String found) {$/;"	m	class:Parser.ParserException	file:
ParserException	src/org/sunflow/system/Parser.java	/^    public static class ParserException extends Exception {$/;"	c	class:Parser
ParticleSurface	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public ParticleSurface() {$/;"	m	class:ParticleSurface
ParticleSurface	src/org/sunflow/core/primitive/ParticleSurface.java	/^public class ParticleSurface implements PrimitiveList {$/;"	c
PathTracingGIEngine	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    public PathTracingGIEngine(Options options) {$/;"	m	class:PathTracingGIEngine
PathTracingGIEngine	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^public class PathTracingGIEngine implements GIEngine {$/;"	c
PerlinScalar	src/org/sunflow/math/PerlinScalar.java	/^public final class PerlinScalar {$/;"	c
PerlinVector	src/org/sunflow/math/PerlinVector.java	/^public class PerlinVector {$/;"	c
PhongShader	src/org/sunflow/core/shader/PhongShader.java	/^    public PhongShader() {$/;"	m	class:PhongShader
PhongShader	src/org/sunflow/core/shader/PhongShader.java	/^public class PhongShader implements Shader {$/;"	c
Photon	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        Photon(Point3 p, Vector3 dir, Color power) {$/;"	m	class:CausticPhotonMap.Photon
Photon	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private static class Photon {$/;"	c	class:CausticPhotonMap
Photon	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        Photon(Point3 p, Vector3 n, Vector3 dir, Color power, Color diffuse) {$/;"	m	class:GlobalPhotonMap.Photon
Photon	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    static class Photon {$/;"	c	class:GlobalPhotonMap
PhotonGroup	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        PhotonGroup(int id, Vector3 n) {$/;"	m	class:GridPhotonMap.PhotonGroup
PhotonGroup	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private class PhotonGroup {$/;"	c	class:GridPhotonMap
PhotonStore	src/org/sunflow/core/PhotonStore.java	/^public interface PhotonStore {$/;"	i
PinholeLens	src/org/sunflow/core/camera/PinholeLens.java	/^    public PinholeLens() {$/;"	m	class:PinholeLens
PinholeLens	src/org/sunflow/core/camera/PinholeLens.java	/^public class PinholeLens implements CameraLens {$/;"	c
Plane	src/org/sunflow/core/primitive/Plane.java	/^    public Plane() {$/;"	m	class:Plane
Plane	src/org/sunflow/core/primitive/Plane.java	/^public class Plane implements PrimitiveList {$/;"	c
Point2	src/org/sunflow/math/Point2.java	/^    public Point2() {$/;"	m	class:Point2
Point2	src/org/sunflow/math/Point2.java	/^    public Point2(Point2 p) {$/;"	m	class:Point2
Point2	src/org/sunflow/math/Point2.java	/^    public Point2(float x, float y) {$/;"	m	class:Point2
Point2	src/org/sunflow/math/Point2.java	/^public final class Point2 {$/;"	c
Point3	src/org/sunflow/math/Point3.java	/^    public Point3() {$/;"	m	class:Point3
Point3	src/org/sunflow/math/Point3.java	/^    public Point3(Point3 p) {$/;"	m	class:Point3
Point3	src/org/sunflow/math/Point3.java	/^    public Point3(float x, float y, float z) {$/;"	m	class:Point3
Point3	src/org/sunflow/math/Point3.java	/^public final class Point3 {$/;"	c
PointLight	src/org/sunflow/core/gi/InstantGI.java	/^    private static class PointLight {$/;"	c	class:InstantGI
PointLight	src/org/sunflow/core/light/PointLight.java	/^    public PointLight() {$/;"	m	class:PointLight
PointLight	src/org/sunflow/core/light/PointLight.java	/^public class PointLight implements LightSource {$/;"	c
PointLightStore	src/org/sunflow/core/gi/InstantGI.java	/^    private class PointLightStore implements PhotonStore {$/;"	c	class:InstantGI
PrimIDShader	src/org/sunflow/core/shader/PrimIDShader.java	/^public class PrimIDShader implements Shader {$/;"	c
PrimitiveList	src/org/sunflow/core/PrimitiveList.java	/^public interface PrimitiveList extends RenderObject {$/;"	i
PrintLevel	src/org/sunflow/system/UI.java	/^    public enum PrintLevel {$/;"	g	class:UI
ProgressiveRenderer	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    public ProgressiveRenderer() {$/;"	m	class:ProgressiveRenderer
ProgressiveRenderer	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^public class ProgressiveRenderer implements ImageSampler {$/;"	c
QMC	src/org/sunflow/math/QMC.java	/^    private QMC() {$/;"	m	class:QMC	file:
QMC	src/org/sunflow/math/QMC.java	/^public final class QMC {$/;"	c
QMC	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
QuadMesh	src/org/sunflow/core/primitive/QuadMesh.java	/^    public QuadMesh() {$/;"	m	class:QuadMesh
QuadMesh	src/org/sunflow/core/primitive/QuadMesh.java	/^public class QuadMesh implements PrimitiveList {$/;"	c
QuickGrayShader	src/org/sunflow/core/shader/QuickGrayShader.java	/^    public QuickGrayShader() {$/;"	m	class:QuickGrayShader
QuickGrayShader	src/org/sunflow/core/shader/QuickGrayShader.java	/^public class QuickGrayShader implements Shader {$/;"	c
RA2Parser	src/org/sunflow/core/parser/RA2Parser.java	/^public class RA2Parser implements SceneParser {$/;"	c
RA3Parser	src/org/sunflow/core/parser/RA3Parser.java	/^public class RA3Parser implements SceneParser {$/;"	c
RED	src/org/sunflow/image/Color.java	/^    public static final Color RED = new Color(1, 0, 0);$/;"	f	class:Color
RGBSpace	src/org/sunflow/image/RGBSpace.java	/^    public RGBSpace(float xRed, float yRed, float xGreen, float yGreen, float xBlue, float yBlue, float xWhite, float yWhite, float gamma, float breakPoint) {$/;"	m	class:RGBSpace
RGBSpace	src/org/sunflow/image/RGBSpace.java	/^public final class RGBSpace {$/;"	c
RLE_COMPRESSION	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int RLE_COMPRESSION = 1;$/;"	f	class:OpenExrDisplay	file:
RLE_MAX_RUN	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int RLE_MAX_RUN = 127;$/;"	f	class:OpenExrDisplay	file:
RLE_MIN_RUN	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int RLE_MIN_RUN = 3;$/;"	f	class:OpenExrDisplay	file:
RandomBucketOrder	src/org/sunflow/core/bucket/RandomBucketOrder.java	/^public class RandomBucketOrder implements BucketOrder {$/;"	c
Ray	src/org/sunflow/core/Ray.java	/^    private Ray() {$/;"	m	class:Ray	file:
Ray	src/org/sunflow/core/Ray.java	/^    public Ray(Point3 a, Point3 b) {$/;"	m	class:Ray
Ray	src/org/sunflow/core/Ray.java	/^    public Ray(Point3 o, Vector3 d) {$/;"	m	class:Ray
Ray	src/org/sunflow/core/Ray.java	/^    public Ray(float ox, float oy, float oz, float dx, float dy, float dz) {$/;"	m	class:Ray
Ray	src/org/sunflow/core/Ray.java	/^public final class Ray {$/;"	c
RealtimeBenchmark	src/org/sunflow/RealtimeBenchmark.java	/^    public RealtimeBenchmark(boolean showGUI, int threads) {$/;"	m	class:RealtimeBenchmark
RealtimeBenchmark	src/org/sunflow/RealtimeBenchmark.java	/^public class RealtimeBenchmark extends SunflowAPI {$/;"	c
RegularSpectralCurve	src/org/sunflow/image/RegularSpectralCurve.java	/^    public RegularSpectralCurve(float[] spectrum, float lambdaMin, float lambdaMax) {$/;"	m	class:RegularSpectralCurve
RegularSpectralCurve	src/org/sunflow/image/RegularSpectralCurve.java	/^public class RegularSpectralCurve extends SpectralCurve {$/;"	c
RenderFrame	src/org/sunflow/core/display/FrameDisplay.java	/^        RenderFrame() {$/;"	m	class:FrameDisplay.RenderFrame
RenderFrame	src/org/sunflow/core/display/FrameDisplay.java	/^    private static class RenderFrame extends JFrame {$/;"	c	class:FrameDisplay
RenderGlobalsPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    public RenderGlobalsPanel() {$/;"	m	class:RenderGlobalsPanel
RenderGlobalsPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^public class RenderGlobalsPanel extends JTabbedPane {$/;"	c
RenderObject	src/org/sunflow/core/RenderObject.java	/^public interface RenderObject {$/;"	i
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Camera camera) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Instance instance) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(LightSource light) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Modifier modifier) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Options options) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(PrimitiveList prims) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Shader shader) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^        private RenderObjectHandle(Tesselatable tesselatable) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
RenderObjectHandle	src/org/sunflow/RenderObjectMap.java	/^    private static final class RenderObjectHandle {$/;"	c	class:RenderObjectMap
RenderObjectMap	src/org/sunflow/RenderObjectMap.java	/^    RenderObjectMap() {$/;"	m	class:RenderObjectMap
RenderObjectMap	src/org/sunflow/RenderObjectMap.java	/^final class RenderObjectMap {$/;"	c
RenderObjectType	src/org/sunflow/RenderObjectMap.java	/^    private enum RenderObjectType {$/;"	g	class:RenderObjectMap
RowBucketOrder	src/org/sunflow/core/bucket/RowBucketOrder.java	/^public class RowBucketOrder implements BucketOrder {$/;"	c
S0Amplitudes	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final float[] S0Amplitudes = { 0.04f, 6.0f, 29.6f, 55.3f,$/;"	f	class:ChromaticitySpectrum	file:
S0xyz	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final XYZColor S0xyz = kS0Spectrum.toXYZ();$/;"	f	class:ChromaticitySpectrum	file:
S1Amplitudes	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final float[] S1Amplitudes = { 0.02f, 4.5f, 22.4f, 42.0f,$/;"	f	class:ChromaticitySpectrum	file:
S1xyz	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final XYZColor S1xyz = kS1Spectrum.toXYZ();$/;"	f	class:ChromaticitySpectrum	file:
S2Amplitudes	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final float[] S2Amplitudes = { 0.0f, 2.0f, 4.0f, 8.5f, 7.8f,$/;"	f	class:ChromaticitySpectrum	file:
S2xyz	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final XYZColor S2xyz = kS2Spectrum.toXYZ();$/;"	f	class:ChromaticitySpectrum	file:
SCENE	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
SCParser	src/org/sunflow/core/parser/SCParser.java	/^    public SCParser() {$/;"	m	class:SCParser
SCParser	src/org/sunflow/core/parser/SCParser.java	/^public class SCParser implements SceneParser {$/;"	c
SHADER	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
SIGMA	src/org/sunflow/math/QMC.java	/^    private static final int[][] SIGMA = new int[NUM][];$/;"	f	class:QMC	file:
SIN_PHI	src/org/sunflow/math/Vector3.java	/^    private static final float[] SIN_PHI = new float[256];$/;"	f	class:Vector3	file:
SIN_THETA	src/org/sunflow/math/Vector3.java	/^    private static final float[] SIN_THETA = new float[256];$/;"	f	class:Vector3	file:
SMPTE_240M	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace SMPTE_240M = new RGBSpace(0.6300f, 0.3400f, 0.3100f, 0.5950f, 0.1550f, 0.0700f, 0.31271f, 0.32902f, 20.0f \/ 9.0f, 0.018f);$/;"	f	class:RGBSpace
SMPTE_C	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace SMPTE_C = new RGBSpace(0.6300f, 0.3400f, 0.3100f, 0.5950f, 0.1550f, 0.0700f, 0.31271f, 0.32902f, 20.0f \/ 9.0f, 0.018f);$/;"	f	class:RGBSpace
SPLIT_MASK	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        static final int SPLIT_MASK = 3;$/;"	f	class:CausticPhotonMap.Photon
SPLIT_MASK	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        static final int SPLIT_MASK = 3;$/;"	f	class:GlobalPhotonMap.Photon
SPLIT_X	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        static final int SPLIT_X = 0;$/;"	f	class:CausticPhotonMap.Photon
SPLIT_X	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        static final int SPLIT_X = 0;$/;"	f	class:GlobalPhotonMap.Photon
SPLIT_Y	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        static final int SPLIT_Y = 1;$/;"	f	class:CausticPhotonMap.Photon
SPLIT_Y	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        static final int SPLIT_Y = 1;$/;"	f	class:GlobalPhotonMap.Photon
SPLIT_Z	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        static final int SPLIT_Z = 2;$/;"	f	class:CausticPhotonMap.Photon
SPLIT_Z	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        static final int SPLIT_Z = 2;$/;"	f	class:GlobalPhotonMap.Photon
SRGB	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace SRGB = new RGBSpace(0.6400f, 0.3300f, 0.3000f, 0.6000f, 0.1500f, 0.0600f, 0.31271f, 0.32902f, 2.4f, 0.00304f);$/;"	f	class:RGBSpace
STRING	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
SYS	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
Sample	src/org/sunflow/core/LightServer.java	/^    private static class Sample {$/;"	c	class:LightServer
Sample	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Sample(Point3 p, Vector3 n) {$/;"	m	class:IrradianceCacheGIEngine.Sample
Sample	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Sample(Point3 p, Vector3 n, float r0, Color irr) {$/;"	m	class:IrradianceCacheGIEngine.Sample
Sample	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private static final class Sample {$/;"	c	class:IrradianceCacheGIEngine
Scene	src/org/sunflow/core/Scene.java	/^    public Scene() {$/;"	m	class:Scene
Scene	src/org/sunflow/core/Scene.java	/^public class Scene {$/;"	c
SceneParser	src/org/sunflow/core/SceneParser.java	/^public interface SceneParser {$/;"	i
SceneTransferHandler	src/SunflowGUI.java	/^    private class SceneTransferHandler extends TransferHandler {$/;"	c	class:SunflowGUI
ScrollZoomListener	src/org/sunflow/system/ImagePanel.java	/^    private class ScrollZoomListener extends MouseInputAdapter implements MouseWheelListener {$/;"	c	class:ImagePanel
SearchPath	src/org/sunflow/system/SearchPath.java	/^    public SearchPath(String type) {$/;"	m	class:SearchPath
SearchPath	src/org/sunflow/system/SearchPath.java	/^public class SearchPath {$/;"	c
Shader	src/org/sunflow/core/Shader.java	/^public interface Shader extends RenderObject {$/;"	i
ShadingState	src/org/sunflow/core/ShadingState.java	/^    private ShadingState(ShadingState previous, IntersectionState istate, Ray r, int i, int d) {$/;"	m	class:ShadingState	file:
ShadingState	src/org/sunflow/core/ShadingState.java	/^public final class ShadingState implements Iterable<LightSample> {$/;"	c
ShaveRibParser	src/org/sunflow/core/parser/ShaveRibParser.java	/^public class ShaveRibParser implements SceneParser {$/;"	c
ShinyDiffuseShader	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    public ShinyDiffuseShader() {$/;"	m	class:ShinyDiffuseShader
ShinyDiffuseShader	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^public class ShinyDiffuseShader implements Shader {$/;"	c
SilentInterface	src/org/sunflow/system/ui/SilentInterface.java	/^public class SilentInterface implements UserInterface {$/;"	c
SimpleRenderer	src/org/sunflow/core/renderer/SimpleRenderer.java	/^public class SimpleRenderer implements ImageSampler {$/;"	c
SimpleShader	src/org/sunflow/core/shader/SimpleShader.java	/^public class SimpleShader implements Shader {$/;"	c
SincFilter	src/org/sunflow/core/filter/SincFilter.java	/^    public SincFilter(float size) {$/;"	m	class:SincFilter
SincFilter	src/org/sunflow/core/filter/SincFilter.java	/^public class SincFilter implements Filter {$/;"	c
SmallBucket	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private static class SmallBucket implements Comparable<SmallBucket> {$/;"	c	class:ProgressiveRenderer
SmallBucketThread	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private class SmallBucketThread extends Thread {$/;"	c	class:ProgressiveRenderer
Solvers	src/org/sunflow/math/Solvers.java	/^public final class Solvers {$/;"	c
SpectralCurve	src/org/sunflow/image/SpectralCurve.java	/^public abstract class SpectralCurve {$/;"	c
Sphere	src/org/sunflow/core/primitive/Sphere.java	/^public class Sphere implements PrimitiveList {$/;"	c
SphereLight	src/org/sunflow/core/light/SphereLight.java	/^    public SphereLight() {$/;"	m	class:SphereLight
SphereLight	src/org/sunflow/core/light/SphereLight.java	/^public class SphereLight implements LightSource, Shader {$/;"	c
SphericalLens	src/org/sunflow/core/camera/SphericalLens.java	/^public class SphericalLens implements CameraLens {$/;"	c
SpiralBucketOrder	src/org/sunflow/core/bucket/SpiralBucketOrder.java	/^public class SpiralBucketOrder implements BucketOrder {$/;"	c
StackNode	src/org/sunflow/core/IntersectionState.java	/^    public static final class StackNode {$/;"	c	class:IntersectionState
SunSkyLight	src/org/sunflow/core/light/SunSkyLight.java	/^    public SunSkyLight() {$/;"	m	class:SunSkyLight
SunSkyLight	src/org/sunflow/core/light/SunSkyLight.java	/^public class SunSkyLight implements LightSource, PrimitiveList, Shader {$/;"	c
SunflowAPI	src/org/sunflow/SunflowAPI.java	/^    public SunflowAPI() {$/;"	m	class:SunflowAPI
SunflowAPI	src/org/sunflow/SunflowAPI.java	/^public class SunflowAPI {$/;"	c
SunflowGUI	src/SunflowGUI.java	/^    public SunflowGUI() {$/;"	m	class:SunflowGUI
SunflowGUI	src/SunflowGUI.java	/^public class SunflowGUI extends javax.swing.JFrame implements UserInterface {$/;"	c
TEX	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
TEXCOORD	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
TRAVERSAL_COST	src/org/sunflow/core/accel/KDTree.java	/^    private static final float TRAVERSAL_COST = 1;$/;"	f	class:KDTree	file:
TYPE_MASK	src/org/sunflow/core/accel/KDTree.java	/^    private static final long TYPE_MASK = 3L << 30;$/;"	f	class:KDTree	file:
Teapot	src/org/sunflow/core/tesselatable/Teapot.java	/^    public Teapot() {$/;"	m	class:Teapot
Teapot	src/org/sunflow/core/tesselatable/Teapot.java	/^public class Teapot extends BezierMesh {$/;"	c
Tesselatable	src/org/sunflow/core/Tesselatable.java	/^public interface Tesselatable extends RenderObject {$/;"	i
Texture	src/org/sunflow/core/Texture.java	/^    Texture(String filename, boolean isLinear) {$/;"	m	class:Texture
Texture	src/org/sunflow/core/Texture.java	/^public class Texture {$/;"	c
TextureCache	src/org/sunflow/core/TextureCache.java	/^    private TextureCache() {$/;"	m	class:TextureCache	file:
TextureCache	src/org/sunflow/core/TextureCache.java	/^public final class TextureCache {$/;"	c
TexturedAmbientOcclusionShader	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^    public TexturedAmbientOcclusionShader() {$/;"	m	class:TexturedAmbientOcclusionShader
TexturedAmbientOcclusionShader	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^public class TexturedAmbientOcclusionShader extends AmbientOcclusionShader {$/;"	c
TexturedDiffuseShader	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^    public TexturedDiffuseShader() {$/;"	m	class:TexturedDiffuseShader
TexturedDiffuseShader	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^public class TexturedDiffuseShader extends DiffuseShader {$/;"	c
TexturedPhongShader	src/org/sunflow/core/shader/TexturedPhongShader.java	/^    public TexturedPhongShader() {$/;"	m	class:TexturedPhongShader
TexturedPhongShader	src/org/sunflow/core/shader/TexturedPhongShader.java	/^public class TexturedPhongShader extends PhongShader {$/;"	c
TexturedShinyDiffuseShader	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^    public TexturedShinyDiffuseShader() {$/;"	m	class:TexturedShinyDiffuseShader
TexturedShinyDiffuseShader	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^public class TexturedShinyDiffuseShader extends ShinyDiffuseShader {$/;"	c
TexturedWardShader	src/org/sunflow/core/shader/TexturedWardShader.java	/^    public TexturedWardShader() {$/;"	m	class:TexturedWardShader
TexturedWardShader	src/org/sunflow/core/shader/TexturedWardShader.java	/^public class TexturedWardShader extends AnisotropicWardShader {$/;"	c
ThinLens	src/org/sunflow/core/camera/ThinLens.java	/^    public ThinLens() {$/;"	m	class:ThinLens
ThinLens	src/org/sunflow/core/camera/ThinLens.java	/^public class ThinLens implements CameraLens {$/;"	c
Timer	src/org/sunflow/system/Timer.java	/^    public Timer() {$/;"	m	class:Timer
Timer	src/org/sunflow/system/Timer.java	/^public class Timer {$/;"	c
Torus	src/org/sunflow/core/primitive/Torus.java	/^    public Torus() {$/;"	m	class:Torus
Torus	src/org/sunflow/core/primitive/Torus.java	/^public class Torus implements PrimitiveList {$/;"	c
TriParser	src/org/sunflow/core/parser/TriParser.java	/^public class TriParser implements SceneParser {$/;"	c
TriangleFilter	src/org/sunflow/core/filter/TriangleFilter.java	/^    public TriangleFilter(float size) {$/;"	m	class:TriangleFilter
TriangleFilter	src/org/sunflow/core/filter/TriangleFilter.java	/^public class TriangleFilter implements Filter {$/;"	c
TriangleLight	src/org/sunflow/core/light/TriangleMeshLight.java	/^        TriangleLight(int tri) {$/;"	m	class:TriangleMeshLight.TriangleLight
TriangleLight	src/org/sunflow/core/light/TriangleMeshLight.java	/^    private class TriangleLight implements LightSource {$/;"	c	class:TriangleMeshLight
TriangleMesh	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public TriangleMesh() {$/;"	m	class:TriangleMesh
TriangleMesh	src/org/sunflow/core/primitive/TriangleMesh.java	/^public class TriangleMesh implements PrimitiveList {$/;"	c
TriangleMeshLight	src/org/sunflow/core/light/TriangleMeshLight.java	/^    public TriangleMeshLight() {$/;"	m	class:TriangleMeshLight
TriangleMeshLight	src/org/sunflow/core/light/TriangleMeshLight.java	/^public class TriangleMeshLight extends TriangleMesh implements Shader {$/;"	c
UI	src/org/sunflow/system/UI.java	/^    private UI() {$/;"	m	class:UI	file:
UI	src/org/sunflow/system/UI.java	/^public final class UI {$/;"	c
UNKNOWN	src/org/sunflow/RenderObjectMap.java	/^        UNKNOWN, SHADER, MODIFIER, GEOMETRY, INSTANCE, LIGHT, CAMERA, OPTIONS$/;"	e	enum:RenderObjectMap.RenderObjectType	file:
USER	src/org/sunflow/system/UI.java	/^        API, GEOM, HAIR, ACCEL, BCKT, IPR, LIGHT, GUI, SCENE, BENCH, TEX, IMG, DISP, QMC, SYS, USER, CAM,$/;"	e	enum:UI.Module	file:
UVShader	src/org/sunflow/core/shader/UVShader.java	/^public class UVShader implements Shader {$/;"	c
UberShader	src/org/sunflow/core/shader/UberShader.java	/^    public UberShader() {$/;"	m	class:UberShader
UberShader	src/org/sunflow/core/shader/UberShader.java	/^public class UberShader implements Shader {$/;"	c
UniformGrid	src/org/sunflow/core/accel/UniformGrid.java	/^    public UniformGrid() {$/;"	m	class:UniformGrid
UniformGrid	src/org/sunflow/core/accel/UniformGrid.java	/^public final class UniformGrid implements AccelerationStructure {$/;"	c
UserInterface	src/org/sunflow/system/UserInterface.java	/^public interface UserInterface {$/;"	i
VECTOR	src/org/sunflow/core/ParameterList.java	/^        STRING, INT, BOOL, FLOAT, POINT, VECTOR, TEXCOORD, MATRIX, COLOR$/;"	e	enum:ParameterList.ParameterType	file:
VERSION	src/org/sunflow/SunflowAPI.java	/^    public static final String VERSION = "0.07.2";$/;"	f	class:SunflowAPI
VERTEX	src/org/sunflow/core/ParameterList.java	/^        NONE, FACE, VERTEX, FACEVARYING$/;"	e	enum:ParameterList.InterpolationType	file:
Vector3	src/org/sunflow/math/Vector3.java	/^    public Vector3() {$/;"	m	class:Vector3
Vector3	src/org/sunflow/math/Vector3.java	/^    public Vector3(Vector3 v) {$/;"	m	class:Vector3
Vector3	src/org/sunflow/math/Vector3.java	/^    public Vector3(float x, float y, float z) {$/;"	m	class:Vector3
Vector3	src/org/sunflow/math/Vector3.java	/^public final class Vector3 {$/;"	c
ViewCausticsShader	src/org/sunflow/core/shader/ViewCausticsShader.java	/^public class ViewCausticsShader implements Shader {$/;"	c
ViewGlobalPhotonsShader	src/org/sunflow/core/shader/ViewGlobalPhotonsShader.java	/^public class ViewGlobalPhotonsShader implements Shader {$/;"	c
ViewIrradianceShader	src/org/sunflow/core/shader/ViewIrradianceShader.java	/^public class ViewIrradianceShader implements Shader {$/;"	c
WARN	src/org/sunflow/system/UI.java	/^        ERROR, WARN, INFO, DETAIL$/;"	e	enum:UI.PrintLevel	file:
WAVELENGTH_MAX	src/org/sunflow/image/SpectralCurve.java	/^    private static final int WAVELENGTH_MAX = 830;$/;"	f	class:SpectralCurve	file:
WAVELENGTH_MIN	src/org/sunflow/image/SpectralCurve.java	/^    private static final int WAVELENGTH_MIN = 360;$/;"	f	class:SpectralCurve	file:
WAVELENGTH_STEP	src/org/sunflow/image/SpectralCurve.java	/^    private static final int WAVELENGTH_STEP = (WAVELENGTH_MAX - WAVELENGTH_MIN) \/ (CIE_xbar.length - 1);$/;"	f	class:SpectralCurve	file:
WHITE	src/org/sunflow/image/Color.java	/^    public static final Color WHITE = new Color(1, 1, 1);$/;"	f	class:Color
WIDE_GAMUT	src/org/sunflow/image/RGBSpace.java	/^    public static final RGBSpace WIDE_GAMUT = new RGBSpace(0.7347f, 0.2653f, 0.1152f, 0.8264f, 0.1566f, 0.0177f, 0.3457f, 0.3585f, 2.2f, 0);$/;"	f	class:RGBSpace
WaldTriangle	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private WaldTriangle(TriangleMesh mesh, int tri) {$/;"	m	class:TriangleMesh.WaldTriangle	file:
WaldTriangle	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private static final class WaldTriangle {$/;"	c	class:TriangleMesh
WireframeShader	src/org/sunflow/core/shader/WireframeShader.java	/^    public WireframeShader() {$/;"	m	class:WireframeShader
WireframeShader	src/org/sunflow/core/shader/WireframeShader.java	/^public class WireframeShader implements Shader {$/;"	c
X	src/org/sunflow/image/XYZColor.java	/^    private float X, Y, Z;$/;"	f	class:XYZColor	file:
XYZColor	src/org/sunflow/image/XYZColor.java	/^    public XYZColor() {$/;"	m	class:XYZColor
XYZColor	src/org/sunflow/image/XYZColor.java	/^    public XYZColor(float X, float Y, float Z) {$/;"	m	class:XYZColor
XYZColor	src/org/sunflow/image/XYZColor.java	/^public final class XYZColor {$/;"	c
Y	src/org/sunflow/image/XYZColor.java	/^    private float X, Y, Z;$/;"	f	class:XYZColor	file:
YELLOW	src/org/sunflow/image/Color.java	/^    public static final Color YELLOW = new Color(1, 1, 0);$/;"	f	class:Color
Z	src/org/sunflow/image/XYZColor.java	/^    private float X, Y, Z;$/;"	f	class:XYZColor	file:
ZERO	src/org/sunflow/math/Matrix4.java	/^    public static final Matrix4 ZERO = new Matrix4();$/;"	f	class:Matrix4
ZIP_COMPRESSION	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int ZIP_COMPRESSION = 3;$/;"	f	class:OpenExrDisplay	file:
aaDepthToString	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private String aaDepthToString(int depth) {$/;"	m	class:BucketRenderer	file:
absorbtionColor	src/org/sunflow/core/shader/GlassShader.java	/^    private Color absorbtionColor;$/;"	f	class:GlassShader	file:
absorbtionDistance	src/org/sunflow/core/shader/GlassShader.java	/^    private float absorbtionDistance;$/;"	f	class:GlassShader	file:
accel	src/org/sunflow/core/Geometry.java	/^    private AccelerationStructure accel;$/;"	f	class:Geometry	file:
acceltype	src/org/sunflow/core/Geometry.java	/^    private String acceltype;$/;"	f	class:Geometry	file:
acceltype	src/org/sunflow/core/Scene.java	/^    private String acceltype;$/;"	f	class:Scene	file:
add	src/org/sunflow/core/ParameterList.java	/^    private void add(String name, Parameter param) {$/;"	m	class:ParameterList	file:
add	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final void add(ShadingState state) {$/;"	m	class:BucketRenderer.ImageSample
add	src/org/sunflow/image/Color.java	/^    public final Color add(Color c) {$/;"	m	class:Color
add	src/org/sunflow/image/Color.java	/^    public static final Color add(Color c1, Color c2) {$/;"	m	class:Color
add	src/org/sunflow/image/Color.java	/^    public static final Color add(Color c1, Color c2, Color dest) {$/;"	m	class:Color
add	src/org/sunflow/math/Point3.java	/^    public static final Point3 add(Point3 p, Vector3 v, Point3 dest) {$/;"	m	class:Point3
add	src/org/sunflow/math/Vector3.java	/^    public static final Vector3 add(Vector3 v1, Vector3 v2, Vector3 dest) {$/;"	m	class:Vector3
add	src/org/sunflow/util/FloatArray.java	/^    public final void add(float f) {$/;"	m	class:FloatArray
add	src/org/sunflow/util/IntArray.java	/^    public final void add(int i) {$/;"	m	class:IntArray
addBoolean	src/org/sunflow/core/ParameterList.java	/^    public void addBoolean(String name, boolean value) {$/;"	m	class:ParameterList
addColor	src/org/sunflow/core/ParameterList.java	/^    public void addColor(String name, Color value) {$/;"	m	class:ParameterList
addFloat	src/org/sunflow/core/ParameterList.java	/^    public void addFloat(String name, float value) {$/;"	m	class:ParameterList
addFloats	src/org/sunflow/core/ParameterList.java	/^    public void addFloats(String name, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList
addIncludeSearchPath	src/org/sunflow/SunflowAPI.java	/^    public final void addIncludeSearchPath(String path) {$/;"	m	class:SunflowAPI
addInteger	src/org/sunflow/core/ParameterList.java	/^    public void addInteger(String name, int value) {$/;"	m	class:ParameterList
addIntegerArray	src/org/sunflow/core/ParameterList.java	/^    public void addIntegerArray(String name, int[] array) {$/;"	m	class:ParameterList
addMatrices	src/org/sunflow/core/ParameterList.java	/^    public void addMatrices(String name, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList
addPoints	src/org/sunflow/core/ParameterList.java	/^    public void addPoints(String name, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList
addSample	src/org/sunflow/core/ShadingState.java	/^    public final void addSample(LightSample sample) {$/;"	m	class:ShadingState
addSearchPath	src/org/sunflow/system/SearchPath.java	/^    public void addSearchPath(String path) {$/;"	m	class:SearchPath
addShadingCache	src/org/sunflow/core/LightServer.java	/^    private synchronized void addShadingCache(ShadingState state, Shader shader, Color c) {$/;"	m	class:LightServer	file:
addString	src/org/sunflow/core/ParameterList.java	/^    public void addString(String name, String value) {$/;"	m	class:ParameterList
addStringArray	src/org/sunflow/core/ParameterList.java	/^    public void addStringArray(String name, String[] array) {$/;"	m	class:ParameterList
addTexCoords	src/org/sunflow/core/ParameterList.java	/^    public void addTexCoords(String name, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList
addTextureSearchPath	src/org/sunflow/SunflowAPI.java	/^    public final void addTextureSearchPath(String path) {$/;"	m	class:SunflowAPI
addVectors	src/org/sunflow/core/ParameterList.java	/^    public void addVectors(String name, InterpolationType interp, float[] data) {$/;"	m	class:ParameterList
allowDiffuseBounced	src/org/sunflow/core/PhotonStore.java	/^    boolean allowDiffuseBounced();$/;"	m	interface:PhotonStore
allowDiffuseBounced	src/org/sunflow/core/gi/InstantGI.java	/^        public boolean allowDiffuseBounced() {$/;"	m	class:InstantGI.PointLightStore
allowDiffuseBounced	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public boolean allowDiffuseBounced() {$/;"	m	class:CausticPhotonMap
allowDiffuseBounced	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public boolean allowDiffuseBounced() {$/;"	m	class:GlobalPhotonMap
allowDiffuseBounced	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public boolean allowDiffuseBounced() {$/;"	m	class:GridPhotonMap
allowReflectionBounced	src/org/sunflow/core/PhotonStore.java	/^    boolean allowReflectionBounced();$/;"	m	interface:PhotonStore
allowReflectionBounced	src/org/sunflow/core/gi/InstantGI.java	/^        public boolean allowReflectionBounced() {$/;"	m	class:InstantGI.PointLightStore
allowReflectionBounced	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public boolean allowReflectionBounced() {$/;"	m	class:CausticPhotonMap
allowReflectionBounced	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public boolean allowReflectionBounced() {$/;"	m	class:GlobalPhotonMap
allowReflectionBounced	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public boolean allowReflectionBounced() {$/;"	m	class:GridPhotonMap
allowRefractionBounced	src/org/sunflow/core/PhotonStore.java	/^    boolean allowRefractionBounced();$/;"	m	interface:PhotonStore
allowRefractionBounced	src/org/sunflow/core/gi/InstantGI.java	/^        public boolean allowRefractionBounced() {$/;"	m	class:InstantGI.PointLightStore
allowRefractionBounced	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public boolean allowRefractionBounced() {$/;"	m	class:CausticPhotonMap
allowRefractionBounced	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public boolean allowRefractionBounced() {$/;"	m	class:GlobalPhotonMap
allowRefractionBounced	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public boolean allowRefractionBounced() {$/;"	m	class:GridPhotonMap
alphaX	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private float alphaX;$/;"	f	class:AnisotropicWardShader	file:
alphaY	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private float alphaY;$/;"	f	class:AnisotropicWardShader	file:
amp	src/org/sunflow/image/ConstantSpectralCurve.java	/^    private final float amp;$/;"	f	class:ConstantSpectralCurve	file:
amplitudes	src/org/sunflow/image/IrregularSpectralCurve.java	/^    private final float[] amplitudes;$/;"	f	class:IrregularSpectralCurve	file:
api	src/SunflowGUI.java	/^    private SunflowAPI api;$/;"	f	class:SunflowGUI	file:
area	src/org/sunflow/core/light/TriangleMeshLight.java	/^        private float area;$/;"	f	class:TriangleMeshLight.TriangleLight	file:
area	src/org/sunflow/core/primitive/CornellBox.java	/^    private float area;$/;"	f	class:CornellBox	file:
array	src/org/sunflow/util/FloatArray.java	/^    private float[] array;$/;"	f	class:FloatArray	file:
array	src/org/sunflow/util/IntArray.java	/^    private int[] array;$/;"	f	class:IntArray	file:
asColMajor	src/org/sunflow/math/Matrix4.java	/^    public final float[] asColMajor() {$/;"	m	class:Matrix4
asRowMajor	src/org/sunflow/math/Matrix4.java	/^    public final float[] asRowMajor() {$/;"	m	class:Matrix4
aspect	src/org/sunflow/core/camera/PinholeLens.java	/^    private float aspect, fov;$/;"	f	class:PinholeLens	file:
aspect	src/org/sunflow/core/camera/ThinLens.java	/^    private float aspect, fov;$/;"	f	class:ThinLens	file:
au	src/org/sunflow/core/camera/PinholeLens.java	/^    private float au, av;$/;"	f	class:PinholeLens	file:
au	src/org/sunflow/core/camera/ThinLens.java	/^    private float au, av;$/;"	f	class:ThinLens	file:
autoBuildMenuItem	src/SunflowGUI.java	/^    private JCheckBoxMenuItem autoBuildMenuItem;$/;"	f	class:SunflowGUI	file:
av	src/org/sunflow/core/camera/PinholeLens.java	/^    private float au, av;$/;"	f	class:PinholeLens	file:
av	src/org/sunflow/core/camera/ThinLens.java	/^    private float au, av;$/;"	f	class:ThinLens	file:
b	src/org/sunflow/image/Color.java	/^    private float r, g, b;$/;"	f	class:Color	file:
back	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color left, right, top, bottom, back;$/;"	f	class:CornellBox	file:
bakingAccel	src/org/sunflow/core/Scene.java	/^    private AccelerationStructure bakingAccel;$/;"	f	class:Scene	file:
bakingInstance	src/org/sunflow/core/Scene.java	/^    private Instance bakingInstance;$/;"	f	class:Scene	file:
bakingPrimitives	src/org/sunflow/core/Scene.java	/^    private PrimitiveList bakingPrimitives;$/;"	f	class:Scene	file:
bakingViewDependent	src/org/sunflow/core/Scene.java	/^    private boolean bakingViewDependent;$/;"	f	class:Scene	file:
balance	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private void balance() {$/;"	m	class:CausticPhotonMap	file:
balance	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private void balance() {$/;"	m	class:GlobalPhotonMap	file:
balanceSegment	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private void balanceSegment(Photon[] temp, int index, int start, int end) {$/;"	m	class:CausticPhotonMap	file:
balanceSegment	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private void balanceSegment(Photon[] temp, int index, int start, int end) {$/;"	m	class:GlobalPhotonMap	file:
basis	src/org/sunflow/core/ShadingState.java	/^    private OrthoNormalBasis basis;$/;"	f	class:ShadingState	file:
basis	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private OrthoNormalBasis basis;$/;"	f	class:DirectionalSpotlight	file:
basis	src/org/sunflow/core/light/ImageBasedLight.java	/^    private OrthoNormalBasis basis;$/;"	f	class:ImageBasedLight	file:
basis	src/org/sunflow/core/light/SunSkyLight.java	/^    private OrthoNormalBasis basis;$/;"	f	class:SunSkyLight	file:
behind	src/org/sunflow/core/ShadingState.java	/^    private boolean behind;$/;"	f	class:ShadingState	file:
bernstein	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private float[] bernstein(float u) {$/;"	m	class:BezierMesh	file:
bernsteinDeriv	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private float[] bernsteinDeriv(float u) {$/;"	m	class:BezierMesh	file:
bf	src/org/sunflow/system/Parser.java	/^    private BufferedReader bf;$/;"	f	class:Parser	file:
bh1d	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    private float bh1d(float x) {$/;"	m	class:BlackmanHarrisFilter	file:
bilerp	src/org/sunflow/core/renderer/BucketRenderer.java	/^        static final ImageSample bilerp(ImageSample result, ImageSample i00, ImageSample i01, ImageSample i10, ImageSample i11, float dx, float dy) {$/;"	m	class:BucketRenderer.ImageSample
bitmap	src/org/sunflow/core/Texture.java	/^    private Bitmap bitmap;$/;"	f	class:Texture	file:
bitmap	src/org/sunflow/core/display/FileDisplay.java	/^    private Bitmap bitmap;$/;"	f	class:FileDisplay	file:
black	src/org/sunflow/image/Color.java	/^    public static Color black() {$/;"	m	class:Color
blend	src/org/sunflow/image/Color.java	/^    public static final Color blend(Color c1, Color c2, Color b) {$/;"	m	class:Color
blend	src/org/sunflow/image/Color.java	/^    public static final Color blend(Color c1, Color c2, Color b, Color dest) {$/;"	m	class:Color
blend	src/org/sunflow/image/Color.java	/^    public static final Color blend(Color c1, Color c2, float b) {$/;"	m	class:Color
blend	src/org/sunflow/image/Color.java	/^    public static final Color blend(Color c1, Color c2, float b, Color dest) {$/;"	m	class:Color
blend	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 blend(Matrix4 m0, Matrix4 m1, float t) {$/;"	m	class:Matrix4
bnd	src/org/sunflow/core/primitive/Plane.java	/^    private float bnu, bnv, bnd;$/;"	f	class:Plane	file:
bnd	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float bnu, bnv, bnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
bnu	src/org/sunflow/core/primitive/Plane.java	/^    private float bnu, bnv, bnd;$/;"	f	class:Plane	file:
bnu	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float bnu, bnv, bnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
bnv	src/org/sunflow/core/primitive/Plane.java	/^    private float bnu, bnv, bnd;$/;"	f	class:Plane	file:
bnv	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float bnu, bnv, bnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
bottom	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color left, right, top, bottom, back;$/;"	f	class:CornellBox	file:
bounds	src/org/sunflow/core/Instance.java	/^    private BoundingBox bounds;$/;"	f	class:Instance	file:
bounds	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private BoundingBox bounds;$/;"	f	class:BoundingIntervalHierarchy	file:
bounds	src/org/sunflow/core/accel/KDTree.java	/^    private BoundingBox bounds;$/;"	f	class:KDTree	file:
bounds	src/org/sunflow/core/accel/UniformGrid.java	/^    private BoundingBox bounds;$/;"	f	class:UniformGrid	file:
bounds	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private BoundingBox bounds;$/;"	f	class:CausticPhotonMap	file:
bounds	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private BoundingBox bounds;$/;"	f	class:GlobalPhotonMap	file:
bounds	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private BoundingBox bounds;$/;"	f	class:GridPhotonMap	file:
bounds	src/org/sunflow/core/primitive/CubeGrid.java	/^    private BoundingBox bounds;$/;"	f	class:CubeGrid	file:
brdf	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private float brdf(Vector3 i, Vector3 o, OrthoNormalBasis basis) {$/;"	m	class:AnisotropicWardShader	file:
breakPoint	src/org/sunflow/image/RGBSpace.java	/^    private final float gamma, breakPoint;$/;"	f	class:RGBSpace	file:
bright	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    private Color bright;$/;"	f	class:AmbientOcclusionGIEngine	file:
bright	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    private Color bright;$/;"	f	class:AmbientOcclusionShader	file:
bucketCoords	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int[] bucketCoords;$/;"	f	class:BucketRenderer	file:
bucketCounter	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int bucketCounter;$/;"	f	class:BucketRenderer	file:
bucketCounter	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int bucketCounter, numBuckets;$/;"	f	class:SimpleRenderer	file:
bucketOrder	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private BucketOrder bucketOrder;$/;"	f	class:BucketRenderer	file:
bucketOrderName	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private String bucketOrderName;$/;"	f	class:BucketRenderer	file:
bucketRenderer	src/org/sunflow/SunflowAPI.java	/^    private BucketRenderer bucketRenderer;$/;"	f	class:SunflowAPI	file:
bucketRendererPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel bucketRendererPanel;$/;"	f	class:RenderGlobalsPanel	file:
bucketRendererRadioButton	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JRadioButton bucketRendererRadioButton;$/;"	f	class:RenderGlobalsPanel	file:
bucketSize	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int bucketSize;$/;"	f	class:BucketRenderer	file:
build	src/org/sunflow/Benchmark.java	/^        public void build() {$/;"	m	class:Benchmark.BenchmarkScene
build	src/org/sunflow/SunflowAPI.java	/^    public void build() {$/;"	m	class:SunflowAPI
build	src/org/sunflow/core/AccelerationStructure.java	/^    public void build(PrimitiveList primitives);$/;"	m	interface:AccelerationStructure
build	src/org/sunflow/core/Geometry.java	/^    private synchronized void build() {$/;"	m	class:Geometry	file:
build	src/org/sunflow/core/LightServer.java	/^    boolean build(Options options) {$/;"	m	class:LightServer
build	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    public void build(PrimitiveList primitives) {$/;"	m	class:BoundingIntervalHierarchy
build	src/org/sunflow/core/accel/KDTree.java	/^    public void build(PrimitiveList primitives) {$/;"	m	class:KDTree
build	src/org/sunflow/core/accel/NullAccelerator.java	/^    public void build(PrimitiveList primitives) {$/;"	m	class:NullAccelerator
build	src/org/sunflow/core/accel/UniformGrid.java	/^    public void build(PrimitiveList primitives) {$/;"	m	class:UniformGrid
buildButton	src/SunflowGUI.java	/^    private JButton buildButton;$/;"	f	class:SunflowGUI	file:
buildCornellBox	src/org/sunflow/Benchmark.java	/^        private void buildCornellBox() {$/;"	m	class:Benchmark.BenchmarkScene	file:
buildHierarchy	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private void buildHierarchy(IntArray tempTree, int[] indices, BuildStats stats) {$/;"	m	class:BoundingIntervalHierarchy	file:
buildMenuItem	src/SunflowGUI.java	/^    private JMenuItem buildMenuItem;$/;"	f	class:SunflowGUI	file:
buildMenuItemActionPerformed	src/SunflowGUI.java	/^    private void buildMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
buildTree	src/org/sunflow/core/accel/KDTree.java	/^    private void buildTree(float minx, float maxx, float miny, float maxy, float minz, float maxz, BuildTask task, int depth, IntArray tempTree, int offset, IntArray tempList, BuildStats stats) {$/;"	m	class:KDTree	file:
builtAccel	src/org/sunflow/core/Geometry.java	/^    private int builtAccel;$/;"	f	class:Geometry	file:
builtTess	src/org/sunflow/core/Geometry.java	/^    private int builtTess;$/;"	f	class:Geometry	file:
bumpTexture	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^    private Texture bumpTexture;$/;"	f	class:BumpMappingModifier	file:
bw	src/org/sunflow/image/RGBSpace.java	/^    private final float rw, gw, bw;$/;"	f	class:RGBSpace	file:
bx	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
by	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
bytesToString	src/org/sunflow/system/Memory.java	/^    public static final String bytesToString(long bytes) {$/;"	m	class:Memory
bz	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
c	src/org/sunflow/core/LightServer.java	/^        Color c;$/;"	f	class:LightServer.Sample
c	src/org/sunflow/core/gi/InstantGI.java	/^    private float c;$/;"	f	class:InstantGI	file:
c	src/org/sunflow/core/renderer/BucketRenderer.java	/^        Color c;$/;"	f	class:BucketRenderer.ImageSample
c	src/org/sunflow/core/shader/ConstantShader.java	/^    private Color c;$/;"	f	class:ConstantShader	file:
c2w	src/org/sunflow/core/Camera.java	/^    private Matrix4[] c2w;$/;"	f	class:Camera	file:
cacheEmptyEntryMisses	src/org/sunflow/core/LightServer.java	/^    private long cacheEmptyEntryMisses;$/;"	f	class:LightServer	file:
cacheEntryAdditions	src/org/sunflow/core/LightServer.java	/^    private long cacheEntryAdditions;$/;"	f	class:LightServer	file:
cacheHits	src/org/sunflow/core/LightServer.java	/^    private long cacheHits;$/;"	f	class:LightServer	file:
cacheLookups	src/org/sunflow/core/LightServer.java	/^    private long cacheLookups;$/;"	f	class:LightServer	file:
cacheWrongEntryMisses	src/org/sunflow/core/LightServer.java	/^    private long cacheWrongEntryMisses;$/;"	f	class:LightServer	file:
calculatePhotons	src/org/sunflow/core/LightServer.java	/^    boolean calculatePhotons(final PhotonStore map, String type, final int seed) {$/;"	m	class:LightServer
calculatePhotons	src/org/sunflow/core/Scene.java	/^    public boolean calculatePhotons(PhotonStore map, String type, int seed) {$/;"	m	class:Scene
camera	src/org/sunflow/SunflowAPI.java	/^    public final void camera(String name, CameraLens lens) {$/;"	m	class:SunflowAPI
camera	src/org/sunflow/core/Scene.java	/^    private Camera camera;$/;"	f	class:Scene	file:
canImport	src/SunflowGUI.java	/^        public boolean canImport(JComponent c, DataFlavor[] flavors) {$/;"	m	class:SunflowGUI.SceneTransferHandler
canceled	src/org/sunflow/system/UI.java	/^    private static boolean canceled = false;$/;"	f	class:UI	file:
catch	src/org/sunflow/core/primitive/.TriangleMesh.java.swp	/^/;"	m
catrom1d	src/org/sunflow/core/filter/CatmullRomFilter.java	/^    private float catrom1d(float x) {$/;"	m	class:CatmullRomFilter	file:
causticPhotonMap	src/org/sunflow/core/LightServer.java	/^    private CausticPhotonMapInterface causticPhotonMap;$/;"	f	class:LightServer	file:
cellHash	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private PhotonGroup[] cellHash;$/;"	f	class:GridPhotonMap	file:
cells	src/org/sunflow/core/accel/UniformGrid.java	/^    private int[][] cells;$/;"	f	class:UniformGrid	file:
center	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Point3 center;$/;"	f	class:IrradianceCacheGIEngine.Node
center	src/org/sunflow/core/light/SphereLight.java	/^    private Point3 center;$/;"	f	class:SphereLight	file:
center	src/org/sunflow/core/primitive/Plane.java	/^    private Point3 center;$/;"	f	class:Plane	file:
channelSize	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private int channelSize;$/;"	f	class:OpenExrDisplay	file:
channelType	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private byte channelType;$/;"	f	class:OpenExrDisplay	file:
check	src/org/sunflow/core/ParameterList.java	/^        protected void check() {$/;"	m	class:ParameterList.Parameter
checkAddNearest	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        void checkAddNearest(Photon p) {$/;"	m	class:CausticPhotonMap.NearestPhotons
checkAddNearest	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        void checkAddNearest(Photon p) {$/;"	m	class:GlobalPhotonMap.NearestPhotons
checkNanInf	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final void checkNanInf() {$/;"	m	class:BucketRenderer.ImageSample
checkNextToken	src/org/sunflow/system/Parser.java	/^    public void checkNextToken(String token) throws ParserException, IOException {$/;"	m	class:Parser
checked	src/org/sunflow/core/ParameterList.java	/^        private boolean checked;$/;"	f	class:ParameterList.Parameter	file:
children	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Node[] children;$/;"	f	class:IrradianceCacheGIEngine.Node
clamp	src/org/sunflow/image/Color.java	/^    public final Color clamp(float min, float max) {$/;"	m	class:Color
clamp	src/org/sunflow/math/MathUtils.java	/^    public static final double clamp(double x, double min, double max) {$/;"	m	class:MathUtils
clamp	src/org/sunflow/math/MathUtils.java	/^    public static final float clamp(float x, float min, float max) {$/;"	m	class:MathUtils
clamp	src/org/sunflow/math/MathUtils.java	/^    public static final int clamp(int x, int min, int max) {$/;"	m	class:MathUtils
clear	src/org/sunflow/core/ParameterList.java	/^    public void clear(boolean showUnused) {$/;"	m	class:ParameterList
clearConsole	src/SunflowGUI.java	/^    private void clearConsole() {$/;"	m	class:SunflowGUI	file:
clearConsoleButton	src/SunflowGUI.java	/^    private JButton clearConsoleButton;$/;"	f	class:SunflowGUI	file:
clearLogMenuItem	src/SunflowGUI.java	/^    private JCheckBoxMenuItem clearLogMenuItem;$/;"	f	class:SunflowGUI	file:
close	src/org/sunflow/system/Parser.java	/^    public void close() throws IOException {$/;"	m	class:Parser
cnd	src/org/sunflow/core/primitive/Plane.java	/^    private float cnu, cnv, cnd;$/;"	f	class:Plane	file:
cnd	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float cnu, cnv, cnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
cnu	src/org/sunflow/core/primitive/Plane.java	/^    private float cnu, cnv, cnd;$/;"	f	class:Plane	file:
cnu	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float cnu, cnv, cnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
cnv	src/org/sunflow/core/primitive/Plane.java	/^    private float cnu, cnv, cnd;$/;"	f	class:Plane	file:
cnv	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float cnu, cnv, cnd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
colHistogram	src/org/sunflow/core/light/ImageBasedLight.java	/^    private float[] colHistogram;$/;"	f	class:ImageBasedLight	file:
colHistogram	src/org/sunflow/core/light/SunSkyLight.java	/^    private float[] colHistogram;$/;"	f	class:SunSkyLight	file:
color	src/org/sunflow/core/shader/GlassShader.java	/^    private Color color;$/;"	f	class:GlassShader	file:
color	src/org/sunflow/core/shader/MirrorShader.java	/^    private Color color;$/;"	f	class:MirrorShader	file:
colors	src/org/sunflow/core/light/ImageBasedLight.java	/^    private Color[] colors;$/;"	f	class:ImageBasedLight	file:
compareTo	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        public int compareTo(SmallBucket o) {$/;"	m	class:ProgressiveRenderer.SmallBucket
compile	src/org/sunflow/SunflowAPI.java	/^    public static SunflowAPI compile(String code) {$/;"	m	class:SunflowAPI
comprbuf	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private byte[] comprbuf;$/;"	f	class:OpenExrDisplay	file:
compress	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int compress(int tp, byte[] in, int inSize, byte[] out) {$/;"	m	class:OpenExrDisplay	file:
compression	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private int compression;$/;"	f	class:OpenExrDisplay	file:
computeAttenuatedSunlight	src/org/sunflow/core/light/SunSkyLight.java	/^    private SpectralCurve computeAttenuatedSunlight(float theta, float turbidity) {$/;"	m	class:SunSkyLight	file:
computeSubPixel	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private void computeSubPixel(ImageSample sample, IntersectionState istate) {$/;"	m	class:BucketRenderer	file:
consoleFrame	src/SunflowGUI.java	/^    private JInternalFrame consoleFrame;$/;"	f	class:SunflowGUI	file:
consoleTextArea	src/SunflowGUI.java	/^    private JTextArea consoleTextArea;$/;"	f	class:SunflowGUI	file:
consoleWindowMenuItem	src/SunflowGUI.java	/^    private JMenuItem consoleWindowMenuItem;$/;"	f	class:SunflowGUI	file:
constrainRGB	src/org/sunflow/image/Color.java	/^    public final Color constrainRGB() {$/;"	m	class:Color
constrast	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        float constrast;$/;"	f	class:ProgressiveRenderer.SmallBucket
contains	src/org/sunflow/math/BoundingBox.java	/^    public final boolean contains(Point3 p) {$/;"	m	class:BoundingBox
contains	src/org/sunflow/math/BoundingBox.java	/^    public final boolean contains(float x, float y, float z) {$/;"	m	class:BoundingBox
contrastThreshold	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private float contrastThreshold;$/;"	f	class:BucketRenderer	file:
convertRGBtoXYZ	src/org/sunflow/image/RGBSpace.java	/^    public final XYZColor convertRGBtoXYZ(Color c) {$/;"	m	class:RGBSpace
convertXYZtoRGB	src/org/sunflow/image/RGBSpace.java	/^    public final Color convertXYZtoRGB(XYZColor c) {$/;"	m	class:RGBSpace
convertXYZtoRGB	src/org/sunflow/image/RGBSpace.java	/^    public final Color convertXYZtoRGB(float X, float Y, float Z) {$/;"	m	class:RGBSpace
copy1	src/org/sunflow/image/Color.java	/^    public Color copy1() {$/;"	m	class:Color
correctShadingNormal	src/org/sunflow/core/ShadingState.java	/^    final void correctShadingNormal() {$/;"	m	class:ShadingState
cosND	src/org/sunflow/core/ShadingState.java	/^    private float cosND;$/;"	f	class:ShadingState	file:
cosWidth	src/org/sunflow/core/shader/WireframeShader.java	/^    private float cosWidth;$/;"	f	class:WireframeShader	file:
count	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        int count;$/;"	f	class:GridPhotonMap.PhotonGroup
counter	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int counter, counterMax;$/;"	f	class:ProgressiveRenderer	file:
counterMax	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int counter, counterMax;$/;"	f	class:ProgressiveRenderer	file:
create	src/org/sunflow/SunflowAPI.java	/^    public static SunflowAPI create(String filename, int frameNumber) {$/;"	m	class:SunflowAPI
create	src/org/sunflow/core/AccelerationStructureFactory.java	/^    static final AccelerationStructure create(String name, int n, boolean primitives) {$/;"	m	class:AccelerationStructureFactory
create	src/org/sunflow/core/bucket/BucketOrderFactory.java	/^    public static BucketOrder create(String order) {$/;"	m	class:BucketOrderFactory
create	src/org/sunflow/core/gi/GIEngineFactory.java	/^    public static final GIEngine create(Options options) {$/;"	m	class:GIEngineFactory
createDiffuseBounceState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createDiffuseBounceState(ShadingState previous, Ray r, int i) {$/;"	m	class:ShadingState
createFinalGatherState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createFinalGatherState(ShadingState state, Ray r, int i) {$/;"	m	class:ShadingState
createGeometry	src/org/sunflow/RealtimeBenchmark.java	/^    private void createGeometry() {$/;"	m	class:RealtimeBenchmark	file:
createGlossyBounceState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createGlossyBounceState(ShadingState previous, Ray r, int i) {$/;"	m	class:ShadingState
createNode	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private void createNode(IntArray tempTree, int nodeIndex, int left, int right) {$/;"	m	class:BoundingIntervalHierarchy	file:
createPhotonState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createPhotonState(Ray r, IntersectionState istate, int i, PhotonStore map, LightServer server) {$/;"	m	class:ShadingState
createReflectionBounceState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createReflectionBounceState(ShadingState previous, Ray r, int i) {$/;"	m	class:ShadingState
createRefractionBounceState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createRefractionBounceState(ShadingState previous, Ray r, int i) {$/;"	m	class:ShadingState
createState	src/org/sunflow/core/ShadingState.java	/^    static ShadingState createState(IntersectionState istate, float rx, float ry, Ray r, int i, LightServer server) {$/;"	m	class:ShadingState
cross	src/org/sunflow/math/Vector3.java	/^    public static final Vector3 cross(Vector3 v1, Vector3 v2, Vector3 dest) {$/;"	m	class:Vector3
current	src/org/sunflow/core/IntersectionState.java	/^    Instance current;$/;"	f	class:IntersectionState
current	src/org/sunflow/core/ShadingState.java	/^        private LightSample current;$/;"	f	class:ShadingState.LightSampleIterator	file:
currentFile	src/SunflowGUI.java	/^    private String currentFile;$/;"	f	class:SunflowGUI	file:
currentFrame	src/org/sunflow/SunflowAPI.java	/^    private int currentFrame;$/;"	f	class:SunflowAPI	file:
currentTask	src/SunflowGUI.java	/^    private String currentTask;$/;"	f	class:SunflowGUI	file:
currentTaskLastP	src/SunflowGUI.java	/^    private int currentTaskLastP;$/;"	f	class:SunflowGUI	file:
cw	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private float cw;$/;"	f	class:JuliaFractal	file:
cx	src/org/sunflow/core/LightServer.java	/^        int cx, cy;$/;"	f	class:LightServer.CacheEntry
cx	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private float cx;$/;"	f	class:JuliaFractal	file:
cy	src/org/sunflow/core/LightServer.java	/^        int cx, cy;$/;"	f	class:LightServer.CacheEntry
cy	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private float cy;$/;"	f	class:JuliaFractal	file:
cz	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private float cz;$/;"	f	class:JuliaFractal	file:
d	src/org/sunflow/core/ShadingState.java	/^    private int d; \/\/ quasi monte carlo instance variables$/;"	f	class:ShadingState	file:
dark	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    private Color dark;$/;"	f	class:AmbientOcclusionGIEngine	file:
dark	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    private Color dark;$/;"	f	class:AmbientOcclusionShader	file:
data	src/org/sunflow/core/ParameterList.java	/^        public final float[] data;$/;"	f	class:ParameterList.FloatParameter
data	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        int data;$/;"	f	class:GlobalPhotonMap.Photon
decode	src/org/sunflow/math/Vector3.java	/^    public static final Vector3 decode(short n) {$/;"	m	class:Vector3
decode	src/org/sunflow/math/Vector3.java	/^    public static final Vector3 decode(short n, Vector3 dest) {$/;"	m	class:Vector3
defaultRendererRadioButton	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JRadioButton defaultRendererRadioButton;$/;"	f	class:RenderGlobalsPanel	file:
delta	src/org/sunflow/image/RegularSpectralCurve.java	/^    private final float delta, invDelta;$/;"	f	class:RegularSpectralCurve	file:
desktop	src/SunflowGUI.java	/^    private JDesktopPane desktop;$/;"	f	class:SunflowGUI	file:
determinant	src/org/sunflow/math/Matrix4.java	/^    public final float determinant() {$/;"	m	class:Matrix4
diff	src/org/sunflow/core/shader/DiffuseShader.java	/^    private Color diff;$/;"	f	class:DiffuseShader	file:
diff	src/org/sunflow/core/shader/PhongShader.java	/^    private Color diff;$/;"	f	class:PhongShader	file:
diff	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    private Color diff;$/;"	f	class:ShinyDiffuseShader	file:
diff	src/org/sunflow/core/shader/UberShader.java	/^    private Color diff;$/;"	f	class:UberShader	file:
diffBlend	src/org/sunflow/core/shader/UberShader.java	/^    private float diffBlend;$/;"	f	class:UberShader	file:
diffmap	src/org/sunflow/core/shader/UberShader.java	/^    private Texture diffmap;$/;"	f	class:UberShader	file:
diffuse	src/org/sunflow/core/ShadingState.java	/^    public final Color diffuse(Color diff) {$/;"	m	class:ShadingState
diffuse	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        Color diffuse;$/;"	f	class:GridPhotonMap.PhotonGroup
diffuseDepth	src/org/sunflow/core/ShadingState.java	/^    private int diffuseDepth;$/;"	f	class:ShadingState	file:
dir	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private Vector3 dir;$/;"	f	class:DirectionalSpotlight	file:
dir	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        short dir;$/;"	f	class:CausticPhotonMap.Photon
dir	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        short dir;$/;"	f	class:GlobalPhotonMap.Photon
display	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private Display display;$/;"	f	class:BucketRenderer	file:
display	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private Display display;$/;"	f	class:ProgressiveRenderer	file:
display	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private Display display;$/;"	f	class:SimpleRenderer	file:
displayAA	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private boolean displayAA;$/;"	f	class:BucketRenderer	file:
dist2	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        protected float[] dist2;$/;"	f	class:CausticPhotonMap.NearestPhotons
dist2	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        protected float[] dist2;$/;"	f	class:GlobalPhotonMap.NearestPhotons
distanceTo	src/org/sunflow/math/Point3.java	/^    public final float distanceTo(Point3 p) {$/;"	m	class:Point3
distanceTo	src/org/sunflow/math/Point3.java	/^    public final float distanceTo(float px, float py, float pz) {$/;"	m	class:Point3
distanceToSquared	src/org/sunflow/math/Point3.java	/^    public final float distanceToSquared(Point3 p) {$/;"	m	class:Point3
distanceToSquared	src/org/sunflow/math/Point3.java	/^    public final float distanceToSquared(float px, float py, float pz) {$/;"	m	class:Point3
div	src/org/sunflow/image/Color.java	/^    public final Color div(Color c) {$/;"	m	class:Color
div	src/org/sunflow/image/Color.java	/^    public static final Color div(Color c1, Color c2) {$/;"	m	class:Color
div	src/org/sunflow/image/Color.java	/^    public static final Color div(Color c1, Color c2, Color dest) {$/;"	m	class:Color
div	src/org/sunflow/math/Vector3.java	/^    public final Vector3 div(float d) {$/;"	m	class:Vector3
div	src/org/sunflow/math/Vector3.java	/^    public final Vector3 div(float d, Vector3 dest) {$/;"	m	class:Vector3
dot	src/org/sunflow/core/LightSample.java	/^    public float dot(Vector3 v) {$/;"	m	class:LightSample
dot	src/org/sunflow/core/Ray.java	/^    public final float dot(Vector3 v) {$/;"	m	class:Ray
dot	src/org/sunflow/core/Ray.java	/^    public final float dot(float vx, float vy, float vz) {$/;"	m	class:Ray
dot	src/org/sunflow/math/Vector3.java	/^    public final float dot(float vx, float vy, float vz) {$/;"	m	class:Vector3
dot	src/org/sunflow/math/Vector3.java	/^    public static final float dot(Vector3 v1, Vector3 v2) {$/;"	m	class:Vector3
drag	src/org/sunflow/system/ImagePanel.java	/^    private synchronized void drag(int dx, int dy) {$/;"	m	class:ImagePanel	file:
dragging	src/org/sunflow/system/ImagePanel.java	/^        boolean dragging;$/;"	f	class:ImagePanel.ScrollZoomListener
dump	src/org/sunflow/core/accel/KDTree.java	/^    private static boolean dump = false;$/;"	f	class:KDTree	file:
dumpBuckets	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private boolean dumpBuckets;$/;"	f	class:BucketRenderer	file:
dumpObj	src/org/sunflow/core/accel/KDTree.java	/^    private int dumpObj(int offset, int vertOffset, int maxN, BoundingBox bounds, FileWriter file, FileWriter mtlFile) throws IOException {$/;"	m	class:KDTree	file:
dumpPrefix	src/org/sunflow/core/accel/KDTree.java	/^    private static String dumpPrefix = "kdtree";$/;"	f	class:KDTree	file:
dx	src/org/sunflow/core/Ray.java	/^    public float dx, dy, dz;$/;"	f	class:Ray
dy	src/org/sunflow/core/Ray.java	/^    public float dx, dy, dz;$/;"	f	class:Ray
dz	src/org/sunflow/core/Ray.java	/^    public float dx, dy, dz;$/;"	f	class:Ray
editorFrame	src/SunflowGUI.java	/^    private JInternalFrame editorFrame;$/;"	f	class:SunflowGUI	file:
editorTextArea	src/SunflowGUI.java	/^    private JTextArea editorTextArea;$/;"	f	class:SunflowGUI	file:
editorWindowMenuItem	src/SunflowGUI.java	/^    private JMenuItem editorWindowMenuItem;$/;"	f	class:SunflowGUI	file:
encode	src/org/sunflow/math/Vector3.java	/^    public final short encode() {$/;"	m	class:Vector3
end	src/org/sunflow/system/Timer.java	/^    public void end() {$/;"	m	class:Timer
endTime	src/org/sunflow/system/Timer.java	/^    private long startTime, endTime;$/;"	f	class:Timer	file:
enlargeUlps	src/org/sunflow/math/BoundingBox.java	/^    public final void enlargeUlps() {$/;"	m	class:BoundingBox
epsilon	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private float epsilon;$/;"	f	class:JuliaFractal	file:
errorThreshold	src/org/sunflow/Benchmark.java	/^    private int errorThreshold;$/;"	f	class:Benchmark	file:
es2	src/org/sunflow/core/filter/GaussianFilter.java	/^    private float es2;$/;"	f	class:GaussianFilter	file:
eta	src/org/sunflow/core/shader/GlassShader.java	/^    private float eta; \/\/ refraction index ratio$/;"	f	class:GlassShader	file:
execute	src/org/sunflow/Benchmark.java	/^    public void execute() {$/;"	m	class:Benchmark
execute	src/org/sunflow/system/BenchmarkFramework.java	/^    public void execute(BenchmarkTest test) {$/;"	m	class:BenchmarkFramework
exitMenuItem	src/SunflowGUI.java	/^    private JMenuItem exitMenuItem;$/;"	f	class:SunflowGUI	file:
exp	src/org/sunflow/image/Color.java	/^    public final Color exp() {$/;"	m	class:Color
f0	src/org/sunflow/core/shader/GlassShader.java	/^    private float f0; \/\/ fresnel normal incidence$/;"	f	class:GlassShader	file:
faceShaders	src/org/sunflow/core/primitive/QuadMesh.java	/^    private byte[] faceShaders;$/;"	f	class:QuadMesh	file:
faceShaders	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private byte[] faceShaders;$/;"	f	class:TriangleMesh	file:
faceforward	src/org/sunflow/core/ShadingState.java	/^    public final void faceforward() {$/;"	m	class:ShadingState
fade	src/org/sunflow/math/PerlinScalar.java	/^    private static final float fade(float t) {$/;"	m	class:PerlinScalar	file:
far	src/org/sunflow/core/IntersectionState.java	/^        public float far;$/;"	f	class:IntersectionState.StackNode
fastPow	src/org/sunflow/math/MathUtils.java	/^    public static final float fastPow(float a, float b) {$/;"	m	class:MathUtils
fastRepaint	src/org/sunflow/system/ImagePanel.java	/^    private void fastRepaint() {$/;"	m	class:ImagePanel	file:
fetchNextToken	src/org/sunflow/system/Parser.java	/^    private String fetchNextToken() throws IOException {$/;"	m	class:Parser	file:
fhs	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private float fhs;$/;"	f	class:BucketRenderer	file:
file	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private RandomAccessFile file;$/;"	f	class:OpenExrDisplay	file:
file	src/org/sunflow/system/Parser.java	/^    private FileReader file;$/;"	f	class:Parser	file:
fileMenu	src/SunflowGUI.java	/^    private JMenu fileMenu;$/;"	f	class:SunflowGUI	file:
filename	src/org/sunflow/core/Texture.java	/^    private String filename;$/;"	f	class:Texture	file:
filename	src/org/sunflow/core/display/FileDisplay.java	/^    private String filename;$/;"	f	class:FileDisplay	file:
filename	src/org/sunflow/core/display/FrameDisplay.java	/^    private String filename;$/;"	f	class:FrameDisplay	file:
filename	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private String filename;$/;"	f	class:OpenExrDisplay	file:
filename	src/org/sunflow/core/tesselatable/FileMesh.java	/^    private String filename = null;$/;"	f	class:FileMesh	file:
fillColor	src/org/sunflow/core/shader/WireframeShader.java	/^    private Color fillColor;$/;"	f	class:WireframeShader	file:
filter	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private Filter filter;$/;"	f	class:BucketRenderer	file:
filterName	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private String filterName;$/;"	f	class:BucketRenderer	file:
filterValue	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private float filterValue;$/;"	f	class:CausticPhotonMap	file:
find	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        final float find(Sample x) {$/;"	m	class:IrradianceCacheGIEngine.Node
first	src/org/sunflow/core/LightServer.java	/^        Sample first;$/;"	f	class:LightServer.CacheEntry
first	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Sample first;$/;"	f	class:IrradianceCacheGIEngine.Node
fit	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void fit() {$/;"	m	class:ImagePanel
fitWindowMenuItem	src/SunflowGUI.java	/^    private JMenuItem fitWindowMenuItem;$/;"	f	class:SunflowGUI	file:
flags	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        int flags;$/;"	f	class:CausticPhotonMap.Photon
flags	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        int flags;$/;"	f	class:GlobalPhotonMap.Photon
flipU	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void flipU() {$/;"	m	class:OrthoNormalBasis
flipV	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void flipV() {$/;"	m	class:OrthoNormalBasis
flipW	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void flipW() {$/;"	m	class:OrthoNormalBasis
floatToHalf	src/org/sunflow/system/ByteUtil.java	/^    public static final int floatToHalf(float f) {$/;"	m	class:ByteUtil
flush	src/org/sunflow/core/TextureCache.java	/^    public synchronized static void flush() {$/;"	m	class:TextureCache
flux	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        Color flux;$/;"	f	class:GridPhotonMap.PhotonGroup
focusDistance	src/org/sunflow/core/camera/ThinLens.java	/^    private float focusDistance;$/;"	f	class:ThinLens	file:
formatOutput	src/org/sunflow/system/UI.java	/^    public final static String formatOutput(Module m, PrintLevel level, String s) {$/;"	m	class:UI
found	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        int found;$/;"	f	class:CausticPhotonMap.NearestPhotons
found	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        int found;$/;"	f	class:GlobalPhotonMap.NearestPhotons
fov	src/org/sunflow/core/camera/PinholeLens.java	/^    private float aspect, fov;$/;"	f	class:PinholeLens	file:
fov	src/org/sunflow/core/camera/ThinLens.java	/^    private float aspect, fov;$/;"	f	class:ThinLens	file:
frame	src/org/sunflow/core/display/FastDisplay.java	/^    private JFrame frame;$/;"	f	class:FastDisplay	file:
frame	src/org/sunflow/core/display/FrameDisplay.java	/^    private RenderFrame frame;$/;"	f	class:FrameDisplay	file:
frames	src/org/sunflow/core/display/FastDisplay.java	/^    private int frames;$/;"	f	class:FastDisplay	file:
fromBasis	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 fromBasis(OrthoNormalBasis basis) {$/;"	m	class:Matrix4
fs	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int fs;$/;"	f	class:BucketRenderer	file:
g	src/org/sunflow/image/Color.java	/^    private float r, g, b;$/;"	f	class:Color	file:
gamma	src/org/sunflow/image/RGBSpace.java	/^    private final float gamma, breakPoint;$/;"	f	class:RGBSpace	file:
gammaCorrect	src/org/sunflow/image/RGBSpace.java	/^    public final float gammaCorrect(float v) {$/;"	m	class:RGBSpace
gatherNum	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private int gatherNum;$/;"	f	class:CausticPhotonMap	file:
gatherRadius	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private float gatherRadius;$/;"	f	class:CausticPhotonMap	file:
gatherRadius	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private float gatherRadius;$/;"	f	class:GlobalPhotonMap	file:
gatherRadius	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private float gatherRadius;$/;"	f	class:GridPhotonMap	file:
generalPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel generalPanel;$/;"	f	class:RenderGlobalsPanel	file:
generate	src/org/sunflow/core/tesselatable/FileMesh.java	/^    private TriangleMesh generate(int[] tris, float[] verts, boolean smoothNormals) {$/;"	m	class:FileMesh	file:
generateSigmaTable	src/org/sunflow/math/QMC.java	/^    public static final int[] generateSigmaTable(int n) {$/;"	m	class:QMC
geometry	src/org/sunflow/SunflowAPI.java	/^    public final void geometry(String name, PrimitiveList primitives) {$/;"	m	class:SunflowAPI
geometry	src/org/sunflow/SunflowAPI.java	/^    public final void geometry(String name, Tesselatable tesselatable) {$/;"	m	class:SunflowAPI
geometry	src/org/sunflow/core/Instance.java	/^    private Geometry geometry;$/;"	f	class:Instance	file:
get	src/org/sunflow/core/Filter.java	/^    public float get(float x, float y);$/;"	m	interface:Filter
get	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    public float get(float x, float y) {$/;"	m	class:BlackmanHarrisFilter
get	src/org/sunflow/core/filter/BoxFilter.java	/^    public float get(float x, float y) {$/;"	m	class:BoxFilter
get	src/org/sunflow/core/filter/CatmullRomFilter.java	/^    public float get(float x, float y) {$/;"	m	class:CatmullRomFilter
get	src/org/sunflow/core/filter/FilterFactory.java	/^    public static final Filter get(String filter) {$/;"	m	class:FilterFactory
get	src/org/sunflow/core/filter/GaussianFilter.java	/^    public float get(float x, float y) {$/;"	m	class:GaussianFilter
get	src/org/sunflow/core/filter/LanczosFilter.java	/^    public float get(float x, float y) {$/;"	m	class:LanczosFilter
get	src/org/sunflow/core/filter/MitchellFilter.java	/^    public float get(float x, float y) {$/;"	m	class:MitchellFilter
get	src/org/sunflow/core/filter/SincFilter.java	/^    public float get(float x, float y) {$/;"	m	class:SincFilter
get	src/org/sunflow/core/filter/TriangleFilter.java	/^    public float get(float x, float y) {$/;"	m	class:TriangleFilter
get	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private PhotonGroup get(int x, int y, int z) {$/;"	m	class:GridPhotonMap	file:
get	src/org/sunflow/image/ChromaticitySpectrum.java	/^    public static final XYZColor get(float x, float y) {$/;"	m	class:ChromaticitySpectrum
get	src/org/sunflow/math/Point3.java	/^    public float get(int i) {$/;"	m	class:Point3
get	src/org/sunflow/math/Vector3.java	/^    public float get(int i) {$/;"	m	class:Vector3
get	src/org/sunflow/util/FloatArray.java	/^    public final float get(int index) {$/;"	m	class:FloatArray
get	src/org/sunflow/util/IntArray.java	/^    public final int get(int index) {$/;"	m	class:IntArray
get2Bytes	src/org/sunflow/system/ByteUtil.java	/^    public static final byte[] get2Bytes(int i) {$/;"	m	class:ByteUtil
get4Bytes	src/org/sunflow/system/ByteUtil.java	/^    public static final byte[] get4Bytes(int i) {$/;"	m	class:ByteUtil
get4BytesInv	src/org/sunflow/system/ByteUtil.java	/^    public static final byte[] get4BytesInv(int i) {$/;"	m	class:ByteUtil
get8Bytes	src/org/sunflow/system/ByteUtil.java	/^    public static final byte[] get8Bytes(long i) {$/;"	m	class:ByteUtil
getArea	src/org/sunflow/math/BoundingBox.java	/^    public final float getArea() {$/;"	m	class:BoundingBox
getAverage	src/org/sunflow/image/Color.java	/^    public final float getAverage() {$/;"	m	class:Color
getBakingPrimitives	src/org/sunflow/core/Geometry.java	/^    PrimitiveList getBakingPrimitives() {$/;"	m	class:Geometry
getBakingPrimitives	src/org/sunflow/core/Instance.java	/^    PrimitiveList getBakingPrimitives() {$/;"	m	class:Instance
getBakingPrimitives	src/org/sunflow/core/InstanceList.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:InstanceList
getBakingPrimitives	src/org/sunflow/core/PrimitiveList.java	/^    public PrimitiveList getBakingPrimitives();$/;"	m	interface:PrimitiveList
getBakingPrimitives	src/org/sunflow/core/light/ImageBasedLight.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:ImageBasedLight
getBakingPrimitives	src/org/sunflow/core/light/SunSkyLight.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:SunSkyLight
getBakingPrimitives	src/org/sunflow/core/primitive/Background.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Background
getBakingPrimitives	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:BanchoffSurface
getBakingPrimitives	src/org/sunflow/core/primitive/Box.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Box
getBakingPrimitives	src/org/sunflow/core/primitive/CornellBox.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:CornellBox
getBakingPrimitives	src/org/sunflow/core/primitive/Hair.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Hair
getBakingPrimitives	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:JuliaFractal
getBakingPrimitives	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:ParticleSurface
getBakingPrimitives	src/org/sunflow/core/primitive/Plane.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Plane
getBakingPrimitives	src/org/sunflow/core/primitive/QuadMesh.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:QuadMesh
getBakingPrimitives	src/org/sunflow/core/primitive/Sphere.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Sphere
getBakingPrimitives	src/org/sunflow/core/primitive/Torus.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:Torus
getBakingPrimitives	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public PrimitiveList getBakingPrimitives() {$/;"	m	class:TriangleMesh.BakingSurface
getBakingPrimitives	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:TriangleMesh
getBakingPrimitives	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public PrimitiveList getBakingPrimitives() {$/;"	m	class:BezierMesh
getBasis	src/org/sunflow/core/ShadingState.java	/^    public final OrthoNormalBasis getBasis() {$/;"	m	class:ShadingState
getBitmap	src/org/sunflow/core/Texture.java	/^    public Bitmap getBitmap() {$/;"	m	class:Texture
getBoolValue	src/org/sunflow/core/ParameterList.java	/^        private boolean getBoolValue() {$/;"	m	class:ParameterList.Parameter	file:
getBoolean	src/org/sunflow/core/ParameterList.java	/^    public boolean getBoolean(String name, boolean defaultValue) {$/;"	m	class:ParameterList
getBound	src/org/sunflow/core/primitive/CornellBox.java	/^    public float getBound(int i) {$/;"	m	class:CornellBox
getBound	src/org/sunflow/math/BoundingBox.java	/^    public final float getBound(int i) {$/;"	m	class:BoundingBox
getBounds	src/org/sunflow/SunflowAPI.java	/^    public final BoundingBox getBounds() {$/;"	m	class:SunflowAPI
getBounds	src/org/sunflow/core/Instance.java	/^    public BoundingBox getBounds() {$/;"	m	class:Instance
getBounds	src/org/sunflow/core/Scene.java	/^    public BoundingBox getBounds() {$/;"	m	class:Scene
getBounds	src/org/sunflow/core/primitive/CornellBox.java	/^    public BoundingBox getBounds() {$/;"	m	class:CornellBox
getBounds	src/org/sunflow/core/primitive/CubeGrid.java	/^    public BoundingBox getBounds() {$/;"	m	class:CubeGrid
getBrightColor	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public Color getBrightColor(ShadingState state) {$/;"	m	class:AmbientOcclusionShader
getBrightColor	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^    public Color getBrightColor(ShadingState state) {$/;"	m	class:TexturedAmbientOcclusionShader
getBucketSequence	src/org/sunflow/core/BucketOrder.java	/^    int[] getBucketSequence(int nbw, int nbh);$/;"	m	interface:BucketOrder
getBucketSequence	src/org/sunflow/core/bucket/ColumnBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:ColumnBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/DiagonalBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:DiagonalBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/HilbertBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:HilbertBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/InvertedBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:InvertedBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/RandomBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:RandomBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/RowBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:RowBucketOrder
getBucketSequence	src/org/sunflow/core/bucket/SpiralBucketOrder.java	/^    public int[] getBucketSequence(int nbw, int nbh) {$/;"	m	class:SpiralBucketOrder
getBump	src/org/sunflow/core/Texture.java	/^    public Vector3 getBump(float x, float y, OrthoNormalBasis basis, float scale) {$/;"	m	class:Texture
getCamera	src/org/sunflow/RenderObjectMap.java	/^        private Camera getCamera() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getCamera	src/org/sunflow/core/Scene.java	/^    Camera getCamera() {$/;"	m	class:Scene
getCameraToWorld	src/org/sunflow/core/Camera.java	/^    Matrix4 getCameraToWorld() {$/;"	m	class:Camera
getCameraToWorld	src/org/sunflow/core/ShadingState.java	/^    public final Matrix4 getCameraToWorld() {$/;"	m	class:ShadingState
getCenter	src/org/sunflow/math/BoundingBox.java	/^    public final Point3 getCenter() {$/;"	m	class:BoundingBox
getColor	src/org/sunflow/core/ParameterList.java	/^        private Color getColor() {$/;"	m	class:ParameterList.Parameter	file:
getColor	src/org/sunflow/core/ParameterList.java	/^    public Color getColor(String name, Color defaultValue) {$/;"	m	class:ParameterList
getColor	src/org/sunflow/core/light/ImageBasedLight.java	/^    private Color getColor(Vector3 dir) {$/;"	m	class:ImageBasedLight	file:
getCoord	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float getCoord(int axis) {$/;"	m	class:CausticPhotonMap.Photon
getCoord	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float getCoord(int axis) {$/;"	m	class:GlobalPhotonMap.Photon
getCorner	src/org/sunflow/math/BoundingBox.java	/^    public final Point3 getCorner(int i) {$/;"	m	class:BoundingBox
getCosND	src/org/sunflow/core/ShadingState.java	/^    public final float getCosND() {$/;"	m	class:ShadingState
getCurrentFrame	src/org/sunflow/SunflowAPI.java	/^    public int getCurrentFrame() {$/;"	m	class:SunflowAPI
getDepth	src/org/sunflow/core/ShadingState.java	/^    public final int getDepth() {$/;"	m	class:ShadingState
getDiffuse	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    protected Color getDiffuse(ShadingState state) {$/;"	m	class:AnisotropicWardShader
getDiffuse	src/org/sunflow/core/shader/DiffuseShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:DiffuseShader
getDiffuse	src/org/sunflow/core/shader/PhongShader.java	/^    protected Color getDiffuse(ShadingState state) {$/;"	m	class:PhongShader
getDiffuse	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:ShinyDiffuseShader
getDiffuse	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:TexturedDiffuseShader
getDiffuse	src/org/sunflow/core/shader/TexturedPhongShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:TexturedPhongShader
getDiffuse	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:TexturedShinyDiffuseShader
getDiffuse	src/org/sunflow/core/shader/TexturedWardShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:TexturedWardShader
getDiffuse	src/org/sunflow/core/shader/UberShader.java	/^    public Color getDiffuse(ShadingState state) {$/;"	m	class:UberShader
getDiffuseDepth	src/org/sunflow/core/ShadingState.java	/^    public final int getDiffuseDepth() {$/;"	m	class:ShadingState
getDiffuseRadiance	src/org/sunflow/core/LightSample.java	/^    public Color getDiffuseRadiance() {$/;"	m	class:LightSample
getDirection	src/org/sunflow/core/Ray.java	/^    public final Vector3 getDirection() {$/;"	m	class:Ray
getDirection	src/org/sunflow/core/light/ImageBasedLight.java	/^    private Vector3 getDirection(float u, float v) {$/;"	m	class:ImageBasedLight	file:
getDirection	src/org/sunflow/core/light/SunSkyLight.java	/^    private Vector3 getDirection(float u, float v) {$/;"	m	class:SunSkyLight	file:
getDist1	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float getDist1(float px, float py, float pz) {$/;"	m	class:CausticPhotonMap.Photon
getDist1	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float getDist1(float px, float py, float pz) {$/;"	m	class:GlobalPhotonMap.Photon
getDist2	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float getDist2(float px, float py, float pz) {$/;"	m	class:CausticPhotonMap.Photon
getDist2	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float getDist2(float px, float py, float pz) {$/;"	m	class:GlobalPhotonMap.Photon
getExtents	src/org/sunflow/math/BoundingBox.java	/^    public final Vector3 getExtents() {$/;"	m	class:BoundingBox
getFillColor	src/org/sunflow/core/shader/WireframeShader.java	/^    public Color getFillColor(ShadingState state) {$/;"	m	class:WireframeShader
getFloat	src/org/sunflow/core/ParameterList.java	/^    public float getFloat(String name, float defaultValue) {$/;"	m	class:ParameterList
getFloatArray	src/org/sunflow/core/ParameterList.java	/^    public FloatParameter getFloatArray(String name) {$/;"	m	class:ParameterList
getFloatParameter	src/org/sunflow/core/ParameterList.java	/^    private FloatParameter getFloatParameter(String name, ParameterType type, Parameter p) {$/;"	m	class:ParameterList	file:
getFloatValue	src/org/sunflow/core/ParameterList.java	/^        private float getFloatValue() {$/;"	m	class:ParameterList.Parameter	file:
getFloats	src/org/sunflow/core/ParameterList.java	/^        private FloatParameter getFloats() {$/;"	m	class:ParameterList.Parameter	file:
getGeoNormal	src/org/sunflow/core/ShadingState.java	/^    public final Vector3 getGeoNormal() {$/;"	m	class:ShadingState
getGeometry	src/org/sunflow/RenderObjectMap.java	/^        private Geometry getGeometry() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getGeometry	src/org/sunflow/core/Instance.java	/^    Geometry getGeometry() {$/;"	m	class:Instance
getGlobalRadiance	src/org/sunflow/core/GIEngine.java	/^    public Color getGlobalRadiance(ShadingState state);$/;"	m	interface:GIEngine
getGlobalRadiance	src/org/sunflow/core/LightServer.java	/^    Color getGlobalRadiance(ShadingState state) {$/;"	m	class:LightServer
getGlobalRadiance	src/org/sunflow/core/ShadingState.java	/^    public final Color getGlobalRadiance() {$/;"	m	class:ShadingState
getGlobalRadiance	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    public Color getGlobalRadiance(ShadingState state) {$/;"	m	class:AmbientOcclusionGIEngine
getGlobalRadiance	src/org/sunflow/core/gi/FakeGIEngine.java	/^    public Color getGlobalRadiance(ShadingState state) {$/;"	m	class:FakeGIEngine
getGlobalRadiance	src/org/sunflow/core/gi/InstantGI.java	/^    public Color getGlobalRadiance(ShadingState state) {$/;"	m	class:InstantGI
getGlobalRadiance	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    public Color getGlobalRadiance(ShadingState state) {$/;"	m	class:IrradianceCacheGIEngine
getGlobalRadiance	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    public Color getGlobalRadiance(ShadingState state) {$/;"	m	class:PathTracingGIEngine
getGridIndex	src/org/sunflow/core/accel/UniformGrid.java	/^    private void getGridIndex(float x, float y, float z, int[] i) {$/;"	m	class:UniformGrid	file:
getHeight	src/org/sunflow/image/Bitmap.java	/^    public int getHeight() {$/;"	m	class:Bitmap
getInstance	src/org/sunflow/RenderObjectMap.java	/^        private Instance getInstance() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getInstance	src/org/sunflow/core/ShadingState.java	/^    public final Instance getInstance() {$/;"	m	class:ShadingState
getInt	src/org/sunflow/core/ParameterList.java	/^    public int getInt(String name, int defaultValue) {$/;"	m	class:ParameterList
getIntArray	src/org/sunflow/core/ParameterList.java	/^    public int[] getIntArray(String name) {$/;"	m	class:ParameterList
getIntValue	src/org/sunflow/core/ParameterList.java	/^        private int getIntValue() {$/;"	m	class:ParameterList.Parameter	file:
getIntersectionState	src/org/sunflow/core/ShadingState.java	/^    final IntersectionState getIntersectionState() {$/;"	m	class:ShadingState
getInts	src/org/sunflow/core/ParameterList.java	/^        private int[] getInts() {$/;"	m	class:ParameterList.Parameter	file:
getIrradiance	src/org/sunflow/core/GIEngine.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance);$/;"	m	interface:GIEngine
getIrradiance	src/org/sunflow/core/LightServer.java	/^    Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:LightServer
getIrradiance	src/org/sunflow/core/ShadingState.java	/^    public final Color getIrradiance(Color diffuseReflectance) {$/;"	m	class:ShadingState
getIrradiance	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:AmbientOcclusionGIEngine
getIrradiance	src/org/sunflow/core/gi/FakeGIEngine.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:FakeGIEngine
getIrradiance	src/org/sunflow/core/gi/InstantGI.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:InstantGI
getIrradiance	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private Color getIrradiance(Point3 p, Vector3 n) {$/;"	m	class:IrradianceCacheGIEngine	file:
getIrradiance	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:IrradianceCacheGIEngine
getIrradiance	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    public Color getIrradiance(ShadingState state, Color diffuseReflectance) {$/;"	m	class:PathTracingGIEngine
getLight	src/org/sunflow/RenderObjectMap.java	/^        private LightSource getLight() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getLightServer	src/org/sunflow/core/ShadingState.java	/^    final LightServer getLightServer() {$/;"	m	class:ShadingState
getLineColor	src/org/sunflow/core/shader/WireframeShader.java	/^    public Color getLineColor(ShadingState state) {$/;"	m	class:WireframeShader
getLittleEndianFloat	src/org/sunflow/core/tesselatable/FileMesh.java	/^    private float getLittleEndianFloat(int i) {$/;"	m	class:FileMesh	file:
getLittleEndianInt	src/org/sunflow/core/tesselatable/FileMesh.java	/^    private int getLittleEndianInt(int i) {$/;"	m	class:FileMesh	file:
getLowSamples	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public int getLowSamples() {$/;"	m	class:DirectionalSpotlight
getLowSamples	src/org/sunflow/core/light/SphereLight.java	/^    public int getLowSamples() {$/;"	m	class:SphereLight
getLuminance	src/org/sunflow/image/Color.java	/^    public final float getLuminance() {$/;"	m	class:Color
getMatrix	src/org/sunflow/core/ParameterList.java	/^        private Matrix4 getMatrix() {$/;"	m	class:ParameterList.Parameter	file:
getMatrix	src/org/sunflow/core/ParameterList.java	/^    public Matrix4 getMatrix(String name, Matrix4 defaultValue) {$/;"	m	class:ParameterList
getMatrixArray	src/org/sunflow/core/ParameterList.java	/^    public FloatParameter getMatrixArray(String name) {$/;"	m	class:ParameterList
getMax	src/org/sunflow/core/Ray.java	/^    public final float getMax() {$/;"	m	class:Ray
getMax	src/org/sunflow/image/Color.java	/^    public final float getMax() {$/;"	m	class:Color
getMaximum	src/org/sunflow/math/BoundingBox.java	/^    public final Point3 getMaximum() {$/;"	m	class:BoundingBox
getMin	src/org/sunflow/core/Ray.java	/^    public final float getMin() {$/;"	m	class:Ray
getMin	src/org/sunflow/image/Color.java	/^    public final float getMin() {$/;"	m	class:Color
getMinimum	src/org/sunflow/math/BoundingBox.java	/^    public final Point3 getMinimum() {$/;"	m	class:BoundingBox
getModifier	src/org/sunflow/RenderObjectMap.java	/^        private Modifier getModifier() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getModifier	src/org/sunflow/core/Instance.java	/^    public Modifier getModifier(int i) {$/;"	m	class:Instance
getModifier	src/org/sunflow/core/ShadingState.java	/^    final Modifier getModifier() {$/;"	m	class:ShadingState
getNextBoolean	src/org/sunflow/system/Parser.java	/^    public boolean getNextBoolean() throws IOException {$/;"	m	class:Parser
getNextCodeBlock	src/org/sunflow/system/Parser.java	/^    public String getNextCodeBlock() throws ParserException, IOException {$/;"	m	class:Parser
getNextFloat	src/org/sunflow/system/Parser.java	/^    public float getNextFloat() throws IOException {$/;"	m	class:Parser
getNextInt	src/org/sunflow/system/Parser.java	/^    public int getNextInt() throws IOException {$/;"	m	class:Parser
getNextLine	src/org/sunflow/system/Parser.java	/^    private boolean getNextLine() throws IOException {$/;"	m	class:Parser	file:
getNextToken	src/org/sunflow/system/Parser.java	/^    public String getNextToken() throws IOException {$/;"	m	class:Parser
getNormal	src/org/sunflow/core/ShadingState.java	/^    public final Vector3 getNormal() {$/;"	m	class:ShadingState
getNormal	src/org/sunflow/core/Texture.java	/^    public Vector3 getNormal(float x, float y, OrthoNormalBasis basis) {$/;"	m	class:Texture
getNumPrimitives	src/org/sunflow/core/Geometry.java	/^    int getNumPrimitives() {$/;"	m	class:Geometry
getNumPrimitives	src/org/sunflow/core/Instance.java	/^    int getNumPrimitives() {$/;"	m	class:Instance
getNumPrimitives	src/org/sunflow/core/InstanceList.java	/^    public final int getNumPrimitives() {$/;"	m	class:InstanceList
getNumPrimitives	src/org/sunflow/core/InstanceList.java	/^    public final int getNumPrimitives(int primID) {$/;"	m	class:InstanceList
getNumPrimitives	src/org/sunflow/core/PrimitiveList.java	/^    public int getNumPrimitives();$/;"	m	interface:PrimitiveList
getNumPrimitives	src/org/sunflow/core/light/ImageBasedLight.java	/^    public int getNumPrimitives() {$/;"	m	class:ImageBasedLight
getNumPrimitives	src/org/sunflow/core/light/SunSkyLight.java	/^    public int getNumPrimitives() {$/;"	m	class:SunSkyLight
getNumPrimitives	src/org/sunflow/core/primitive/Background.java	/^    public int getNumPrimitives() {$/;"	m	class:Background
getNumPrimitives	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public int getNumPrimitives() {$/;"	m	class:BanchoffSurface
getNumPrimitives	src/org/sunflow/core/primitive/Box.java	/^    public int getNumPrimitives() {$/;"	m	class:Box
getNumPrimitives	src/org/sunflow/core/primitive/CornellBox.java	/^    public int getNumPrimitives() {$/;"	m	class:CornellBox
getNumPrimitives	src/org/sunflow/core/primitive/CubeGrid.java	/^    public int getNumPrimitives() {$/;"	m	class:CubeGrid
getNumPrimitives	src/org/sunflow/core/primitive/Hair.java	/^    public int getNumPrimitives() {$/;"	m	class:Hair
getNumPrimitives	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public int getNumPrimitives() {$/;"	m	class:JuliaFractal
getNumPrimitives	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public int getNumPrimitives() {$/;"	m	class:ParticleSurface
getNumPrimitives	src/org/sunflow/core/primitive/Plane.java	/^    public int getNumPrimitives() {$/;"	m	class:Plane
getNumPrimitives	src/org/sunflow/core/primitive/QuadMesh.java	/^    public int getNumPrimitives() {$/;"	m	class:QuadMesh
getNumPrimitives	src/org/sunflow/core/primitive/Sphere.java	/^    public int getNumPrimitives() {$/;"	m	class:Sphere
getNumPrimitives	src/org/sunflow/core/primitive/Torus.java	/^    public int getNumPrimitives() {$/;"	m	class:Torus
getNumPrimitives	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public int getNumPrimitives() {$/;"	m	class:TriangleMesh.BakingSurface
getNumPrimitives	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public int getNumPrimitives() {$/;"	m	class:TriangleMesh
getNumPrimitives	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public int getNumPrimitives() {$/;"	m	class:BezierMesh
getNumSamples	src/org/sunflow/core/LightSource.java	/^    public int getNumSamples();$/;"	m	interface:LightSource
getNumSamples	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public int getNumSamples() {$/;"	m	class:DirectionalSpotlight
getNumSamples	src/org/sunflow/core/light/ImageBasedLight.java	/^    public int getNumSamples() {$/;"	m	class:ImageBasedLight
getNumSamples	src/org/sunflow/core/light/PointLight.java	/^    public int getNumSamples() {$/;"	m	class:PointLight
getNumSamples	src/org/sunflow/core/light/SphereLight.java	/^    public int getNumSamples() {$/;"	m	class:SphereLight
getNumSamples	src/org/sunflow/core/light/SunSkyLight.java	/^    public int getNumSamples() {$/;"	m	class:SunSkyLight
getNumSamples	src/org/sunflow/core/light/TriangleMeshLight.java	/^        public int getNumSamples() {$/;"	m	class:TriangleMeshLight.TriangleLight
getNumSamples	src/org/sunflow/core/primitive/CornellBox.java	/^    public int getNumSamples() {$/;"	m	class:CornellBox
getOptions	src/org/sunflow/RenderObjectMap.java	/^        private Options getOptions() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getPatchPoint	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private void getPatchPoint(float u, float v, float[] ctrl, float[] bu, float[] bv, float[] bdu, float[] bdv, Point3 p, Vector3 n) {$/;"	m	class:BezierMesh	file:
getPhoton	src/org/sunflow/core/LightSource.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power);$/;"	m	interface:LightSource
getPhoton	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:DirectionalSpotlight
getPhoton	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:ImageBasedLight
getPhoton	src/org/sunflow/core/light/PointLight.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:PointLight
getPhoton	src/org/sunflow/core/light/SphereLight.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:SphereLight
getPhoton	src/org/sunflow/core/light/SunSkyLight.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:SunSkyLight
getPhoton	src/org/sunflow/core/light/TriangleMeshLight.java	/^        public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:TriangleMeshLight.TriangleLight
getPhoton	src/org/sunflow/core/primitive/CornellBox.java	/^    public void getPhoton(double randX1, double randY1, double randX2, double randY2, Point3 p, Vector3 dir, Color power) {$/;"	m	class:CornellBox
getPhotonShader	src/org/sunflow/core/LightServer.java	/^    private Shader getPhotonShader(ShadingState state) {$/;"	m	class:LightServer	file:
getPixel	src/org/sunflow/core/Texture.java	/^    public Color getPixel(float x, float y) {$/;"	m	class:Texture
getPixel	src/org/sunflow/image/Bitmap.java	/^    public Color getPixel(int x, int y) {$/;"	m	class:Bitmap
getPoint	src/org/sunflow/core/ParameterList.java	/^        private Point3 getPoint() {$/;"	m	class:ParameterList.Parameter	file:
getPoint	src/org/sunflow/core/ParameterList.java	/^    public Point3 getPoint(String name, Point3 defaultValue) {$/;"	m	class:ParameterList
getPoint	src/org/sunflow/core/Ray.java	/^    public final Point3 getPoint(Point3 dest) {$/;"	m	class:Ray
getPoint	src/org/sunflow/core/ShadingState.java	/^    public final Point3 getPoint() {$/;"	m	class:ShadingState
getPoint	src/org/sunflow/core/primitive/QuadMesh.java	/^    protected Point3 getPoint(int i) {$/;"	m	class:QuadMesh
getPoint	src/org/sunflow/core/primitive/TriangleMesh.java	/^    protected Point3 getPoint(int i) {$/;"	m	class:TriangleMesh
getPoint	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void getPoint(int tri, int i, Point3 p) {$/;"	m	class:TriangleMesh
getPointArray	src/org/sunflow/core/ParameterList.java	/^    public FloatParameter getPointArray(String name) {$/;"	m	class:ParameterList
getPower	src/org/sunflow/core/LightSource.java	/^    public float getPower();$/;"	m	interface:LightSource
getPower	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public float getPower() {$/;"	m	class:DirectionalSpotlight
getPower	src/org/sunflow/core/light/ImageBasedLight.java	/^    public float getPower() {$/;"	m	class:ImageBasedLight
getPower	src/org/sunflow/core/light/PointLight.java	/^    public float getPower() {$/;"	m	class:PointLight
getPower	src/org/sunflow/core/light/SphereLight.java	/^    public float getPower() {$/;"	m	class:SphereLight
getPower	src/org/sunflow/core/light/SunSkyLight.java	/^    public float getPower() {$/;"	m	class:SunSkyLight
getPower	src/org/sunflow/core/light/TriangleMeshLight.java	/^        public float getPower() {$/;"	m	class:TriangleMeshLight.TriangleLight
getPower	src/org/sunflow/core/primitive/CornellBox.java	/^    public float getPower() {$/;"	m	class:CornellBox
getPrimitiveBound	src/org/sunflow/core/InstanceList.java	/^    public final float getPrimitiveBound(int primID, int i) {$/;"	m	class:InstanceList
getPrimitiveBound	src/org/sunflow/core/PrimitiveList.java	/^    public float getPrimitiveBound(int primID, int i);$/;"	m	interface:PrimitiveList
getPrimitiveBound	src/org/sunflow/core/light/ImageBasedLight.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:ImageBasedLight
getPrimitiveBound	src/org/sunflow/core/light/SunSkyLight.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:SunSkyLight
getPrimitiveBound	src/org/sunflow/core/primitive/Background.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Background
getPrimitiveBound	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:BanchoffSurface
getPrimitiveBound	src/org/sunflow/core/primitive/Box.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Box
getPrimitiveBound	src/org/sunflow/core/primitive/CornellBox.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:CornellBox
getPrimitiveBound	src/org/sunflow/core/primitive/CubeGrid.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:CubeGrid
getPrimitiveBound	src/org/sunflow/core/primitive/Hair.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Hair
getPrimitiveBound	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:JuliaFractal
getPrimitiveBound	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:ParticleSurface
getPrimitiveBound	src/org/sunflow/core/primitive/Plane.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Plane
getPrimitiveBound	src/org/sunflow/core/primitive/QuadMesh.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:QuadMesh
getPrimitiveBound	src/org/sunflow/core/primitive/Sphere.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Sphere
getPrimitiveBound	src/org/sunflow/core/primitive/Torus.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:Torus
getPrimitiveBound	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public float getPrimitiveBound(int primID, int i) {$/;"	m	class:TriangleMesh.BakingSurface
getPrimitiveBound	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:TriangleMesh
getPrimitiveBound	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public float getPrimitiveBound(int primID, int i) {$/;"	m	class:BezierMesh
getPrimitiveID	src/org/sunflow/core/ShadingState.java	/^    public final int getPrimitiveID() {$/;"	m	class:ShadingState
getPrimitiveList	src/org/sunflow/core/Geometry.java	/^    PrimitiveList getPrimitiveList() {$/;"	m	class:Geometry
getRGB	src/org/sunflow/image/Color.java	/^    public final float[] getRGB() {$/;"	m	class:Color
getRadiance	src/org/sunflow/core/GlobalPhotonMapInterface.java	/^    public Color getRadiance(Point3 p, Vector3 n);$/;"	m	interface:GlobalPhotonMapInterface
getRadiance	src/org/sunflow/core/LightServer.java	/^    ShadingState getRadiance(float rx, float ry, int i, Ray r, IntersectionState istate) {$/;"	m	class:LightServer
getRadiance	src/org/sunflow/core/Scene.java	/^    public ShadingState getRadiance(IntersectionState istate, float rx, float ry, double lensU, double lensV, double time, int instance) {$/;"	m	class:Scene
getRadiance	src/org/sunflow/core/Shader.java	/^    public Color getRadiance(ShadingState state);$/;"	m	interface:Shader
getRadiance	src/org/sunflow/core/light/ImageBasedLight.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ImageBasedLight
getRadiance	src/org/sunflow/core/light/SphereLight.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:SphereLight
getRadiance	src/org/sunflow/core/light/SunSkyLight.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:SunSkyLight
getRadiance	src/org/sunflow/core/light/TriangleMeshLight.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:TriangleMeshLight
getRadiance	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public Color getRadiance(Point3 p, Vector3 n) {$/;"	m	class:GlobalPhotonMap
getRadiance	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public synchronized Color getRadiance(Point3 p, Vector3 n) {$/;"	m	class:GridPhotonMap
getRadiance	src/org/sunflow/core/primitive/CornellBox.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:CornellBox
getRadiance	src/org/sunflow/core/primitive/Hair.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:Hair
getRadiance	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:AmbientOcclusionShader
getRadiance	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:AnisotropicWardShader
getRadiance	src/org/sunflow/core/shader/ConstantShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ConstantShader
getRadiance	src/org/sunflow/core/shader/DiffuseShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:DiffuseShader
getRadiance	src/org/sunflow/core/shader/GlassShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:GlassShader
getRadiance	src/org/sunflow/core/shader/IDShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:IDShader
getRadiance	src/org/sunflow/core/shader/MirrorShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:MirrorShader
getRadiance	src/org/sunflow/core/shader/NormalShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:NormalShader
getRadiance	src/org/sunflow/core/shader/PhongShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:PhongShader
getRadiance	src/org/sunflow/core/shader/PrimIDShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:PrimIDShader
getRadiance	src/org/sunflow/core/shader/QuickGrayShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:QuickGrayShader
getRadiance	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ShinyDiffuseShader
getRadiance	src/org/sunflow/core/shader/SimpleShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:SimpleShader
getRadiance	src/org/sunflow/core/shader/UVShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:UVShader
getRadiance	src/org/sunflow/core/shader/UberShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:UberShader
getRadiance	src/org/sunflow/core/shader/ViewCausticsShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ViewCausticsShader
getRadiance	src/org/sunflow/core/shader/ViewGlobalPhotonsShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ViewGlobalPhotonsShader
getRadiance	src/org/sunflow/core/shader/ViewIrradianceShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:ViewIrradianceShader
getRadiance	src/org/sunflow/core/shader/WireframeShader.java	/^    public Color getRadiance(ShadingState state) {$/;"	m	class:WireframeShader
getRandom	src/org/sunflow/core/ShadingState.java	/^    public final double getRandom(int j, int dim) {$/;"	m	class:ShadingState
getRandom	src/org/sunflow/core/ShadingState.java	/^    public final double getRandom(int j, int dim, int n) {$/;"	m	class:ShadingState
getRasterX	src/org/sunflow/core/ShadingState.java	/^    public final float getRasterX() {$/;"	m	class:ShadingState
getRasterY	src/org/sunflow/core/ShadingState.java	/^    public final float getRasterY() {$/;"	m	class:ShadingState
getRay	src/org/sunflow/core/Camera.java	/^    Ray getRay(Point3 p) {$/;"	m	class:Camera
getRay	src/org/sunflow/core/Camera.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time) {$/;"	m	class:Camera
getRay	src/org/sunflow/core/CameraLens.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time);$/;"	m	interface:CameraLens
getRay	src/org/sunflow/core/ShadingState.java	/^    public final Ray getRay() {$/;"	m	class:ShadingState
getRay	src/org/sunflow/core/camera/FisheyeLens.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time) {$/;"	m	class:FisheyeLens
getRay	src/org/sunflow/core/camera/PinholeLens.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time) {$/;"	m	class:PinholeLens
getRay	src/org/sunflow/core/camera/SphericalLens.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time) {$/;"	m	class:SphericalLens
getRay	src/org/sunflow/core/camera/ThinLens.java	/^    public Ray getRay(float x, float y, int imageWidth, int imageHeight, double lensX, double lensY, double time) {$/;"	m	class:ThinLens
getReflectionDepth	src/org/sunflow/core/ShadingState.java	/^    public final int getReflectionDepth() {$/;"	m	class:ShadingState
getRefractionDepth	src/org/sunflow/core/ShadingState.java	/^    public final int getRefractionDepth() {$/;"	m	class:ShadingState
getResult	src/org/sunflow/core/ShadingState.java	/^    public final Color getResult() {$/;"	m	class:ShadingState
getRobustStack	src/org/sunflow/core/IntersectionState.java	/^    public final float[] getRobustStack() {$/;"	m	class:IntersectionState
getSamples	src/org/sunflow/core/CausticPhotonMapInterface.java	/^    void getSamples(ShadingState state);$/;"	m	interface:CausticPhotonMapInterface
getSamples	src/org/sunflow/core/LightSource.java	/^    public void getSamples(ShadingState state);$/;"	m	interface:LightSource
getSamples	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:DirectionalSpotlight
getSamples	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:ImageBasedLight
getSamples	src/org/sunflow/core/light/PointLight.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:PointLight
getSamples	src/org/sunflow/core/light/SphereLight.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:SphereLight
getSamples	src/org/sunflow/core/light/SunSkyLight.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:SunSkyLight
getSamples	src/org/sunflow/core/light/TriangleMeshLight.java	/^        public void getSamples(ShadingState state) {$/;"	m	class:TriangleMeshLight.TriangleLight
getSamples	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:CausticPhotonMap
getSamples	src/org/sunflow/core/primitive/CornellBox.java	/^    public void getSamples(ShadingState state) {$/;"	m	class:CornellBox
getScene	src/org/sunflow/core/LightServer.java	/^    Scene getScene() {$/;"	m	class:LightServer
getShader	src/org/sunflow/RenderObjectMap.java	/^        private Shader getShader() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
getShader	src/org/sunflow/core/Instance.java	/^    public Shader getShader(int i) {$/;"	m	class:Instance
getShader	src/org/sunflow/core/LightServer.java	/^    private Shader getShader(ShadingState state) {$/;"	m	class:LightServer	file:
getShader	src/org/sunflow/core/ShadingState.java	/^    public final Shader getShader() {$/;"	m	class:ShadingState
getShadowRay	src/org/sunflow/core/LightSample.java	/^    public Ray getShadowRay() {$/;"	m	class:LightSample
getSize	src/org/sunflow/core/Filter.java	/^    public float getSize();$/;"	m	interface:Filter
getSize	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    public float getSize() {$/;"	m	class:BlackmanHarrisFilter
getSize	src/org/sunflow/core/filter/BoxFilter.java	/^    public float getSize() {$/;"	m	class:BoxFilter
getSize	src/org/sunflow/core/filter/CatmullRomFilter.java	/^    public float getSize() {$/;"	m	class:CatmullRomFilter
getSize	src/org/sunflow/core/filter/GaussianFilter.java	/^    public float getSize() {$/;"	m	class:GaussianFilter
getSize	src/org/sunflow/core/filter/LanczosFilter.java	/^    public float getSize() {$/;"	m	class:LanczosFilter
getSize	src/org/sunflow/core/filter/MitchellFilter.java	/^    public float getSize() {$/;"	m	class:MitchellFilter
getSize	src/org/sunflow/core/filter/SincFilter.java	/^    public float getSize() {$/;"	m	class:SincFilter
getSize	src/org/sunflow/core/filter/TriangleFilter.java	/^    public float getSize() {$/;"	m	class:TriangleFilter
getSize	src/org/sunflow/util/FloatArray.java	/^    public final int getSize() {$/;"	m	class:FloatArray
getSize	src/org/sunflow/util/IntArray.java	/^    public final int getSize() {$/;"	m	class:IntArray
getSkyRGB	src/org/sunflow/core/light/SunSkyLight.java	/^    private Color getSkyRGB(Vector3 dir) {$/;"	m	class:SunSkyLight	file:
getSpecular	src/org/sunflow/core/shader/UberShader.java	/^    public Color getSpecular(ShadingState state) {$/;"	m	class:UberShader
getSpecularRadiance	src/org/sunflow/core/LightSample.java	/^    public Color getSpecularRadiance() {$/;"	m	class:LightSample
getStack	src/org/sunflow/core/IntersectionState.java	/^    public final StackNode[] getStack() {$/;"	m	class:IntersectionState
getStackTop	src/org/sunflow/core/IntersectionState.java	/^    public final int getStackTop() {$/;"	m	class:IntersectionState
getString	src/org/sunflow/core/ParameterList.java	/^    public String getString(String name, String defaultValue) {$/;"	m	class:ParameterList
getStringArray	src/org/sunflow/core/ParameterList.java	/^    public String[] getStringArray(String name, String[] defaultValue) {$/;"	m	class:ParameterList
getStringValue	src/org/sunflow/core/ParameterList.java	/^        private String getStringValue() {$/;"	m	class:ParameterList.Parameter	file:
getStrings	src/org/sunflow/core/ParameterList.java	/^        private String[] getStrings() {$/;"	m	class:ParameterList.Parameter	file:
getTangent	src/org/sunflow/core/primitive/Hair.java	/^    private Vector3 getTangent(int line, int v0, float v) {$/;"	m	class:Hair	file:
getTexCoord	src/org/sunflow/core/ParameterList.java	/^        private Point2 getTexCoord() {$/;"	m	class:ParameterList.Parameter	file:
getTexCoord	src/org/sunflow/core/ParameterList.java	/^    public Point2 getTexCoord(String name, Point2 defaultValue) {$/;"	m	class:ParameterList
getTexCoordArray	src/org/sunflow/core/ParameterList.java	/^    public FloatParameter getTexCoordArray(String name) {$/;"	m	class:ParameterList
getTexture	src/org/sunflow/core/TextureCache.java	/^    public synchronized static Texture getTexture(String filename, boolean isLinear) {$/;"	m	class:TextureCache
getThreadPriority	src/org/sunflow/core/Scene.java	/^    public int getThreadPriority() {$/;"	m	class:Scene
getThreads	src/org/sunflow/core/Scene.java	/^    public int getThreads() {$/;"	m	class:Scene
getTrianglePoints	src/org/sunflow/core/ShadingState.java	/^    public final boolean getTrianglePoints(Point3[] p) {$/;"	m	class:ShadingState
getU	src/org/sunflow/core/ShadingState.java	/^    public final float getU() {$/;"	m	class:ShadingState
getUV	src/org/sunflow/core/ShadingState.java	/^    public final Point2 getUV() {$/;"	m	class:ShadingState
getUniqueName	src/org/sunflow/SunflowAPI.java	/^    public final String getUniqueName(String prefix) {$/;"	m	class:SunflowAPI
getV	src/org/sunflow/core/ShadingState.java	/^    public final float getV() {$/;"	m	class:ShadingState
getVector	src/org/sunflow/core/ParameterList.java	/^        private Vector3 getVector() {$/;"	m	class:ParameterList.Parameter	file:
getVector	src/org/sunflow/core/ParameterList.java	/^    public Vector3 getVector(String name, Vector3 defaultValue) {$/;"	m	class:ParameterList
getVectorArray	src/org/sunflow/core/ParameterList.java	/^    public FloatParameter getVectorArray(String name) {$/;"	m	class:ParameterList
getVolume	src/org/sunflow/math/BoundingBox.java	/^    public final float getVolume() {$/;"	m	class:BoundingBox
getWidth	src/org/sunflow/core/primitive/Hair.java	/^    private float getWidth(int i) {$/;"	m	class:Hair	file:
getWidth	src/org/sunflow/image/Bitmap.java	/^    public int getWidth() {$/;"	m	class:Bitmap
getWorldBounds	src/org/sunflow/core/Geometry.java	/^    BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Geometry
getWorldBounds	src/org/sunflow/core/InstanceList.java	/^    public final BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:InstanceList
getWorldBounds	src/org/sunflow/core/PrimitiveList.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w);$/;"	m	interface:PrimitiveList
getWorldBounds	src/org/sunflow/core/Tesselatable.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w);$/;"	m	interface:Tesselatable
getWorldBounds	src/org/sunflow/core/light/ImageBasedLight.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:ImageBasedLight
getWorldBounds	src/org/sunflow/core/light/SunSkyLight.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:SunSkyLight
getWorldBounds	src/org/sunflow/core/primitive/Background.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Background
getWorldBounds	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:BanchoffSurface
getWorldBounds	src/org/sunflow/core/primitive/Box.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Box
getWorldBounds	src/org/sunflow/core/primitive/CornellBox.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:CornellBox
getWorldBounds	src/org/sunflow/core/primitive/CubeGrid.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:CubeGrid
getWorldBounds	src/org/sunflow/core/primitive/Hair.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Hair
getWorldBounds	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:JuliaFractal
getWorldBounds	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:ParticleSurface
getWorldBounds	src/org/sunflow/core/primitive/Plane.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Plane
getWorldBounds	src/org/sunflow/core/primitive/QuadMesh.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:QuadMesh
getWorldBounds	src/org/sunflow/core/primitive/Sphere.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Sphere
getWorldBounds	src/org/sunflow/core/primitive/Torus.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:Torus
getWorldBounds	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:TriangleMesh.BakingSurface
getWorldBounds	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:TriangleMesh
getWorldBounds	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:BezierMesh
getWorldBounds	src/org/sunflow/core/tesselatable/FileMesh.java	/^    public BoundingBox getWorldBounds(Matrix4 o2w) {$/;"	m	class:FileMesh
getWorldToCamera	src/org/sunflow/core/Camera.java	/^    Matrix4 getWorldToCamera() {$/;"	m	class:Camera
getWorldToCamera	src/org/sunflow/core/ShadingState.java	/^    public final Matrix4 getWorldToCamera() {$/;"	m	class:ShadingState
getX	src/org/sunflow/image/XYZColor.java	/^    public final float getX() {$/;"	m	class:XYZColor
getY	src/org/sunflow/image/XYZColor.java	/^    public final float getY() {$/;"	m	class:XYZColor
getZ	src/org/sunflow/image/XYZColor.java	/^    public final float getZ() {$/;"	m	class:XYZColor
giEngine	src/org/sunflow/core/LightServer.java	/^    private GIEngine giEngine;$/;"	f	class:LightServer	file:
globalPhotonMap	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private GlobalPhotonMapInterface globalPhotonMap;$/;"	f	class:IrradianceCacheGIEngine	file:
glossyness	src/org/sunflow/core/shader/UberShader.java	/^    private float glossyness;$/;"	f	class:UberShader	file:
gotHeap	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        private boolean gotHeap;$/;"	f	class:CausticPhotonMap.NearestPhotons	file:
gotHeap	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        private boolean gotHeap;$/;"	f	class:GlobalPhotonMap.NearestPhotons	file:
grad	src/org/sunflow/math/PerlinScalar.java	/^    private static final float grad(int hash, float x) {$/;"	m	class:PerlinScalar	file:
grad	src/org/sunflow/math/PerlinScalar.java	/^    private static final float grad(int hash, float x, float y) {$/;"	m	class:PerlinScalar	file:
grad	src/org/sunflow/math/PerlinScalar.java	/^    private static final float grad(int hash, float x, float y, float z) {$/;"	m	class:PerlinScalar	file:
grad	src/org/sunflow/math/PerlinScalar.java	/^    private static final float grad(int hash, float x, float y, float z, float w) {$/;"	m	class:PerlinScalar	file:
ground	src/org/sunflow/core/gi/FakeGIEngine.java	/^    private Color ground;$/;"	f	class:FakeGIEngine	file:
growPhotonHash	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private void growPhotonHash() {$/;"	m	class:GridPhotonMap	file:
gw	src/org/sunflow/image/RGBSpace.java	/^    private final float rw, gw, bw;$/;"	f	class:RGBSpace	file:
gx	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
gy	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
gz	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
h	src/org/sunflow/system/ImagePanel.java	/^    private float w, h;$/;"	f	class:ImagePanel	file:
halfSideLength	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float halfSideLength;$/;"	f	class:IrradianceCacheGIEngine.Node
halfStoredPhotons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private int halfStoredPhotons;$/;"	f	class:CausticPhotonMap	file:
halfStoredPhotons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private int halfStoredPhotons;$/;"	f	class:GlobalPhotonMap	file:
halton	src/org/sunflow/math/QMC.java	/^    public static final double halton(int d, int i) {$/;"	m	class:QMC
has	src/org/sunflow/RenderObjectMap.java	/^    final boolean has(String name) {$/;"	m	class:RenderObjectMap
hasContrast	src/org/sunflow/image/Color.java	/^    public static final boolean hasContrast(Color c1, Color c2, float thresh) {$/;"	m	class:Color
hasGeometry	src/org/sunflow/core/Instance.java	/^    public boolean hasGeometry(Geometry g) {$/;"	m	class:Instance
hasNext	src/org/sunflow/core/ShadingState.java	/^        public boolean hasNext() {$/;"	m	class:ShadingState.LightSampleIterator
hasRadiance	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private boolean hasRadiance;$/;"	f	class:GlobalPhotonMap	file:
hash	src/org/sunflow/core/LightServer.java	/^    private static final int hash(int x, int y) {$/;"	m	class:LightServer	file:
hashPrime	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int hashPrime;$/;"	f	class:GridPhotonMap	file:
hashSize	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int hashSize;$/;"	f	class:GridPhotonMap	file:
height	src/org/sunflow/image/Bitmap.java	/^    private int height;$/;"	f	class:Bitmap	file:
hit	src/org/sunflow/core/IntersectionState.java	/^    public final boolean hit() {$/;"	m	class:IntersectionState
hitU	src/org/sunflow/core/ShadingState.java	/^    private float hitU, hitV;$/;"	f	class:ShadingState	file:
hitV	src/org/sunflow/core/ShadingState.java	/^    private float hitU, hitV;$/;"	f	class:ShadingState	file:
i	src/org/sunflow/core/LightServer.java	/^        Instance i;$/;"	f	class:LightServer.Sample
i	src/org/sunflow/core/ShadingState.java	/^    private int i; \/\/ quasi monte carlo instance variables$/;"	f	class:ShadingState	file:
i	src/org/sunflow/core/renderer/BucketRenderer.java	/^        int i, n;$/;"	f	class:BucketRenderer.ImageSample
id	src/org/sunflow/core/IntersectionState.java	/^    int id;$/;"	f	class:IntersectionState
id	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        int id;$/;"	f	class:GridPhotonMap.PhotonGroup
ih	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    private int ih;$/;"	f	class:ImgPipeDisplay	file:
image	src/org/sunflow/core/display/FastDisplay.java	/^    private BufferedImage image;$/;"	f	class:FastDisplay	file:
image	src/org/sunflow/system/ImagePanel.java	/^    private BufferedImage image;$/;"	f	class:ImagePanel	file:
imageBegin	src/org/sunflow/Benchmark.java	/^    public void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:Benchmark
imageBegin	src/org/sunflow/core/Display.java	/^    void imageBegin(int w, int h, int bucketSize);$/;"	m	interface:Display
imageBegin	src/org/sunflow/core/display/FastDisplay.java	/^    public synchronized void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:FastDisplay
imageBegin	src/org/sunflow/core/display/FileDisplay.java	/^    public void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:FileDisplay
imageBegin	src/org/sunflow/core/display/FrameDisplay.java	/^    public void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:FrameDisplay
imageBegin	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public synchronized void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:ImgPipeDisplay
imageBegin	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:OpenExrDisplay
imageBegin	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void imageBegin(int w, int h, int bucketSize) {$/;"	m	class:ImagePanel
imageEnd	src/org/sunflow/Benchmark.java	/^    public void imageEnd() {$/;"	m	class:Benchmark
imageEnd	src/org/sunflow/core/Display.java	/^    void imageEnd();$/;"	m	interface:Display
imageEnd	src/org/sunflow/core/display/FastDisplay.java	/^    public synchronized void imageEnd() {$/;"	m	class:FastDisplay
imageEnd	src/org/sunflow/core/display/FileDisplay.java	/^    public void imageEnd() {$/;"	m	class:FileDisplay
imageEnd	src/org/sunflow/core/display/FrameDisplay.java	/^    public void imageEnd() {$/;"	m	class:FrameDisplay
imageEnd	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public synchronized void imageEnd() {$/;"	m	class:ImgPipeDisplay
imageEnd	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void imageEnd() {$/;"	m	class:OpenExrDisplay
imageEnd	src/org/sunflow/system/ImagePanel.java	/^    public void imageEnd() {$/;"	m	class:ImagePanel
imageFill	src/org/sunflow/Benchmark.java	/^    public void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:Benchmark
imageFill	src/org/sunflow/core/Display.java	/^    void imageFill(int x, int y, int w, int h, Color c);$/;"	m	interface:Display
imageFill	src/org/sunflow/core/display/FastDisplay.java	/^    public void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:FastDisplay
imageFill	src/org/sunflow/core/display/FileDisplay.java	/^    public void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:FileDisplay
imageFill	src/org/sunflow/core/display/FrameDisplay.java	/^    public void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:FrameDisplay
imageFill	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public synchronized void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:ImgPipeDisplay
imageFill	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:OpenExrDisplay
imageFill	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void imageFill(int x, int y, int w, int h, Color c) {$/;"	m	class:ImagePanel
imageHeight	src/org/sunflow/core/Scene.java	/^    private int imageHeight = 728;$/;"	f	class:Scene	file:
imageHeight	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int imageHeight;$/;"	f	class:BucketRenderer	file:
imageHeight	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int imageWidth, imageHeight;$/;"	f	class:ProgressiveRenderer	file:
imageHeight	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int imageWidth, imageHeight;$/;"	f	class:SimpleRenderer	file:
imageHistogram	src/org/sunflow/core/light/ImageBasedLight.java	/^    private float[][] imageHistogram;$/;"	f	class:ImageBasedLight	file:
imageHistogram	src/org/sunflow/core/light/SunSkyLight.java	/^    private float[][] imageHistogram;$/;"	f	class:SunSkyLight	file:
imageMenu	src/SunflowGUI.java	/^    private JMenu imageMenu;$/;"	f	class:SunflowGUI	file:
imagePanel	src/SunflowGUI.java	/^    private ImagePanel imagePanel;$/;"	f	class:SunflowGUI	file:
imagePanel	src/org/sunflow/core/display/FrameDisplay.java	/^        ImagePanel imagePanel;$/;"	f	class:FrameDisplay.RenderFrame
imagePanelFrame	src/SunflowGUI.java	/^    private JInternalFrame imagePanelFrame;$/;"	f	class:SunflowGUI	file:
imagePrepare	src/org/sunflow/Benchmark.java	/^    public void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:Benchmark
imagePrepare	src/org/sunflow/core/Display.java	/^    void imagePrepare(int x, int y, int w, int h, int id);$/;"	m	interface:Display
imagePrepare	src/org/sunflow/core/display/FastDisplay.java	/^    public void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:FastDisplay
imagePrepare	src/org/sunflow/core/display/FileDisplay.java	/^    public void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:FileDisplay
imagePrepare	src/org/sunflow/core/display/FrameDisplay.java	/^    public void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:FrameDisplay
imagePrepare	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public synchronized void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:ImgPipeDisplay
imagePrepare	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:OpenExrDisplay
imagePrepare	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void imagePrepare(int x, int y, int w, int h, int id) {$/;"	m	class:ImagePanel
imageUpdate	src/org/sunflow/Benchmark.java	/^    public void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:Benchmark
imageUpdate	src/org/sunflow/core/Display.java	/^    void imageUpdate(int x, int y, int w, int h, Color[] data);$/;"	m	interface:Display
imageUpdate	src/org/sunflow/core/display/FastDisplay.java	/^    public void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:FastDisplay
imageUpdate	src/org/sunflow/core/display/FileDisplay.java	/^    public void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:FileDisplay
imageUpdate	src/org/sunflow/core/display/FrameDisplay.java	/^    public void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:FrameDisplay
imageUpdate	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    public synchronized void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:ImgPipeDisplay
imageUpdate	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public synchronized void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:OpenExrDisplay
imageUpdate	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void imageUpdate(int x, int y, int w, int h, Color[] data) {$/;"	m	class:ImagePanel
imageWidth	src/org/sunflow/core/Scene.java	/^    private int imageWidth = 1024;$/;"	f	class:Scene	file:
imageWidth	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int imageWidth;$/;"	f	class:BucketRenderer	file:
imageWidth	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int imageWidth, imageHeight;$/;"	f	class:ProgressiveRenderer	file:
imageWidth	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int imageWidth, imageHeight;$/;"	f	class:SimpleRenderer	file:
imageWindowMenuItem	src/SunflowGUI.java	/^    private JMenuItem imageWindowMenuItem;$/;"	f	class:SunflowGUI	file:
importData	src/SunflowGUI.java	/^        public boolean importData(JComponent c, Transferable t) {$/;"	m	class:SunflowGUI.SceneTransferHandler
include	src/org/sunflow/math/BoundingBox.java	/^    public final void include(BoundingBox b) {$/;"	m	class:BoundingBox
include	src/org/sunflow/math/BoundingBox.java	/^    public final void include(Point3 p) {$/;"	m	class:BoundingBox
include	src/org/sunflow/math/BoundingBox.java	/^    public final void include(float x, float y, float z) {$/;"	m	class:BoundingBox
includeLights	src/org/sunflow/core/ShadingState.java	/^    private boolean includeLights;$/;"	f	class:ShadingState	file:
includeLights	src/org/sunflow/core/ShadingState.java	/^    public final boolean includeLights() {$/;"	m	class:ShadingState
includeSearchPath	src/org/sunflow/SunflowAPI.java	/^    private SearchPath includeSearchPath;$/;"	f	class:SunflowAPI	file:
includeSpecular	src/org/sunflow/core/ShadingState.java	/^    private boolean includeSpecular;$/;"	f	class:ShadingState	file:
includeSpecular	src/org/sunflow/core/ShadingState.java	/^    public final boolean includeSpecular() {$/;"	m	class:ShadingState
index	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        protected Photon[] index;$/;"	f	class:CausticPhotonMap.NearestPhotons
index	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        protected Photon[] index;$/;"	f	class:GlobalPhotonMap.NearestPhotons
index	src/org/sunflow/system/Parser.java	/^    private int index;$/;"	f	class:Parser	file:
infiniteInstanceList	src/org/sunflow/core/Scene.java	/^    private InstanceList infiniteInstanceList;$/;"	f	class:Scene	file:
init	src/org/sunflow/core/GIEngine.java	/^    public boolean init(Scene scene);$/;"	m	interface:GIEngine
init	src/org/sunflow/core/PhotonStore.java	/^    void init();$/;"	m	interface:PhotonStore
init	src/org/sunflow/core/ShadingState.java	/^    public final void init() {$/;"	m	class:ShadingState
init	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    public boolean init(Scene scene) {$/;"	m	class:AmbientOcclusionGIEngine
init	src/org/sunflow/core/gi/FakeGIEngine.java	/^    public boolean init(Scene scene) {$/;"	m	class:FakeGIEngine
init	src/org/sunflow/core/gi/InstantGI.java	/^        public void init() {$/;"	m	class:InstantGI.PointLightStore
init	src/org/sunflow/core/gi/InstantGI.java	/^    public boolean init(Scene scene) {$/;"	m	class:InstantGI
init	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    public boolean init(Scene scene) {$/;"	m	class:IrradianceCacheGIEngine
init	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    public boolean init(Scene scene) {$/;"	m	class:PathTracingGIEngine
init	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void init(String name, SunflowAPI api) {$/;"	m	class:ImageBasedLight
init	src/org/sunflow/core/light/SphereLight.java	/^    public void init(String name, SunflowAPI api) {$/;"	m	class:SphereLight
init	src/org/sunflow/core/light/SunSkyLight.java	/^    public void init(String name, SunflowAPI api) {$/;"	m	class:SunSkyLight
init	src/org/sunflow/core/light/TriangleMeshLight.java	/^    public void init(String name, SunflowAPI api) {$/;"	m	class:TriangleMeshLight
init	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public void init() {$/;"	m	class:CausticPhotonMap
init	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public void init() {$/;"	m	class:GlobalPhotonMap
init	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public void init() {$/;"	m	class:GridPhotonMap
init	src/org/sunflow/core/primitive/CornellBox.java	/^    public void init(String name, SunflowAPI api) {$/;"	m	class:CornellBox
init	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void init() {$/;"	m	class:TriangleMesh
initCausticSamples	src/org/sunflow/core/LightServer.java	/^    void initCausticSamples(ShadingState state) {$/;"	m	class:LightServer
initCausticSamples	src/org/sunflow/core/ShadingState.java	/^    public final void initCausticSamples() {$/;"	m	class:ShadingState
initGUI	src/SunflowGUI.java	/^    private void initGUI() {$/;"	m	class:SunflowGUI	file:
initGUI	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private void initGUI() {$/;"	m	class:RenderGlobalsPanel	file:
initLightSamples	src/org/sunflow/core/LightServer.java	/^    void initLightSamples(ShadingState state) {$/;"	m	class:LightServer
initLightSamples	src/org/sunflow/core/ShadingState.java	/^    public final void initLightSamples() {$/;"	m	class:ShadingState
initSunSky	src/org/sunflow/core/light/SunSkyLight.java	/^    private void initSunSky() {$/;"	m	class:SunSkyLight	file:
initialize	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private void initialize() {$/;"	m	class:RenderGlobalsPanel	file:
insert	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private void insert(Point3 p, Vector3 n, float r0, Color irr) {$/;"	m	class:IrradianceCacheGIEngine	file:
inside	src/org/sunflow/core/primitive/CubeGrid.java	/^    protected abstract boolean inside(int x, int y, int z);$/;"	m	class:CubeGrid
insideGamut	src/org/sunflow/image/RGBSpace.java	/^    public final boolean insideGamut(float r, float g, float b) {$/;"	m	class:RGBSpace
instance	src/org/sunflow/SunflowAPI.java	/^    public final void instance(String name, String geoname) {$/;"	m	class:SunflowAPI
instance	src/org/sunflow/core/IntersectionState.java	/^    Instance instance;$/;"	f	class:IntersectionState
instance	src/org/sunflow/core/ShadingState.java	/^    private Instance instance;$/;"	f	class:ShadingState	file:
instance	src/org/sunflow/core/renderer/BucketRenderer.java	/^        Instance instance;$/;"	f	class:BucketRenderer.ImageSample
instanceList	src/org/sunflow/core/Scene.java	/^    private InstanceList instanceList;$/;"	f	class:Scene	file:
instances	src/org/sunflow/core/InstanceList.java	/^    private Instance[] instances;$/;"	f	class:InstanceList	file:
intAccel	src/org/sunflow/core/Scene.java	/^    private AccelerationStructure intAccel;$/;"	f	class:Scene	file:
interp	src/org/sunflow/core/ParameterList.java	/^        private InterpolationType interp;$/;"	f	class:ParameterList.Parameter	file:
interp	src/org/sunflow/core/ParameterList.java	/^        public final InterpolationType interp;$/;"	f	class:ParameterList.FloatParameter
intersect	src/org/sunflow/core/AccelerationStructure.java	/^    public void intersect(Ray r, IntersectionState istate);$/;"	m	interface:AccelerationStructure
intersect	src/org/sunflow/core/Geometry.java	/^    void intersect(Ray r, IntersectionState state) {$/;"	m	class:Geometry
intersect	src/org/sunflow/core/Instance.java	/^    void intersect(Ray r, IntersectionState state) {$/;"	m	class:Instance
intersect	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    public void intersect(Ray r, IntersectionState state) {$/;"	m	class:BoundingIntervalHierarchy
intersect	src/org/sunflow/core/accel/KDTree.java	/^    public void intersect(Ray r, IntersectionState state) {$/;"	m	class:KDTree
intersect	src/org/sunflow/core/accel/NullAccelerator.java	/^    public void intersect(Ray r, IntersectionState state) {$/;"	m	class:NullAccelerator
intersect	src/org/sunflow/core/accel/UniformGrid.java	/^    public void intersect(Ray r, IntersectionState state) {$/;"	m	class:UniformGrid
intersect	src/org/sunflow/core/primitive/TriangleMesh.java	/^        void intersect(Ray r, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh.WaldTriangle
intersectBox	src/org/sunflow/core/primitive/TriangleMesh.java	/^        void intersectBox(Ray r, float hx, float hy, float hz, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh.WaldTriangle
intersectPrimitive	src/org/sunflow/core/InstanceList.java	/^    public final void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:InstanceList
intersectPrimitive	src/org/sunflow/core/PrimitiveList.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state);$/;"	m	interface:PrimitiveList
intersectPrimitive	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:ImageBasedLight
intersectPrimitive	src/org/sunflow/core/light/SunSkyLight.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:SunSkyLight
intersectPrimitive	src/org/sunflow/core/primitive/Background.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Background
intersectPrimitive	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:BanchoffSurface
intersectPrimitive	src/org/sunflow/core/primitive/Box.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Box
intersectPrimitive	src/org/sunflow/core/primitive/CornellBox.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:CornellBox
intersectPrimitive	src/org/sunflow/core/primitive/CubeGrid.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:CubeGrid
intersectPrimitive	src/org/sunflow/core/primitive/Hair.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Hair
intersectPrimitive	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:JuliaFractal
intersectPrimitive	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:ParticleSurface
intersectPrimitive	src/org/sunflow/core/primitive/Plane.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Plane
intersectPrimitive	src/org/sunflow/core/primitive/QuadMesh.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:QuadMesh
intersectPrimitive	src/org/sunflow/core/primitive/Sphere.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Sphere
intersectPrimitive	src/org/sunflow/core/primitive/Torus.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:Torus
intersectPrimitive	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh.BakingSurface
intersectPrimitive	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh
intersectPrimitive	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public void intersectPrimitive(Ray r, int primID, IntersectionState state) {$/;"	m	class:BezierMesh
intersectPrimitiveRobust	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void intersectPrimitiveRobust(Ray r, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh
intersectTriangleKensler	src/org/sunflow/core/light/TriangleMeshLight.java	/^        private final boolean intersectTriangleKensler(Ray r) {$/;"	m	class:TriangleMeshLight.TriangleLight	file:
intersectTriangleKensler	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private final void intersectTriangleKensler(Ray r, int primID, IntersectionState state) {$/;"	m	class:TriangleMesh	file:
intersects	src/org/sunflow/core/primitive/CornellBox.java	/^    public boolean intersects(BoundingBox box) {$/;"	m	class:CornellBox
intersects	src/org/sunflow/math/BoundingBox.java	/^    public final boolean intersects(BoundingBox b) {$/;"	m	class:BoundingBox
inv	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    private float s, inv;$/;"	f	class:BlackmanHarrisFilter	file:
inv	src/org/sunflow/core/filter/TriangleFilter.java	/^    private float s, inv;$/;"	f	class:TriangleFilter	file:
invDelta	src/org/sunflow/image/RegularSpectralCurve.java	/^    private final float delta, invDelta;$/;"	f	class:RegularSpectralCurve	file:
invP	src/org/sunflow/system/ui/ConsoleInterface.java	/^    private float invP;$/;"	f	class:ConsoleInterface	file:
invR0	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float invR0;$/;"	f	class:IrradianceCacheGIEngine.Sample
invSuperSampling	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private double invSuperSampling;$/;"	f	class:BucketRenderer	file:
invTolerance	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private float invTolerance;$/;"	f	class:IrradianceCacheGIEngine	file:
invVoxelwx	src/org/sunflow/core/accel/UniformGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:UniformGrid	file:
invVoxelwx	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:CubeGrid	file:
invVoxelwy	src/org/sunflow/core/accel/UniformGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:UniformGrid	file:
invVoxelwy	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:CubeGrid	file:
invVoxelwz	src/org/sunflow/core/accel/UniformGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:UniformGrid	file:
invVoxelwz	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float invVoxelwx, invVoxelwy, invVoxelwz;$/;"	f	class:CubeGrid	file:
inverse	src/org/sunflow/math/Matrix4.java	/^    public final Matrix4 inverse() {$/;"	m	class:Matrix4
iprButton	src/SunflowGUI.java	/^    private JButton iprButton;$/;"	f	class:SunflowGUI	file:
iprMenuItem	src/SunflowGUI.java	/^    private JMenuItem iprMenuItem;$/;"	f	class:SunflowGUI	file:
iprMenuItemActionPerformed	src/SunflowGUI.java	/^    private void iprMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
irr	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Color irr;$/;"	f	class:IrradianceCacheGIEngine.Sample
isBehind	src/org/sunflow/core/ShadingState.java	/^    public final boolean isBehind() {$/;"	m	class:ShadingState
isBlack	src/org/sunflow/image/Color.java	/^    public final boolean isBlack() {$/;"	m	class:Color
isDifferent	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final boolean isDifferent(ImageSample sample, float thresh) {$/;"	m	class:BucketRenderer.ImageSample
isEmpty	src/org/sunflow/math/BoundingBox.java	/^    public final boolean isEmpty() {$/;"	m	class:BoundingBox
isHDR	src/org/sunflow/image/Bitmap.java	/^    private boolean isHDR;$/;"	f	class:Bitmap	file:
isInf	src/org/sunflow/image/Color.java	/^    public final boolean isInf() {$/;"	m	class:Color
isInside	src/org/sunflow/core/Ray.java	/^    public final boolean isInside(float t) {$/;"	m	class:Ray
isInside	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        final boolean isInside(Point3 p) {$/;"	m	class:IrradianceCacheGIEngine.Node
isLinear	src/org/sunflow/core/Texture.java	/^    private boolean isLinear;$/;"	f	class:Texture	file:
isNan	src/org/sunflow/image/Color.java	/^    public final boolean isNan() {$/;"	m	class:Color
isValid	src/org/sunflow/core/LightSample.java	/^    boolean isValid() {$/;"	m	class:LightSample
isValidParameter	src/org/sunflow/core/ParameterList.java	/^    private boolean isValidParameter(String name, ParameterType type, InterpolationType interp, int requestedSize, Parameter p) {$/;"	m	class:ParameterList	file:
isVisible	src/org/sunflow/core/light/SphereLight.java	/^    public boolean isVisible(ShadingState state) {$/;"	m	class:SphereLight
istate	src/org/sunflow/core/ShadingState.java	/^    private IntersectionState istate;$/;"	f	class:ShadingState	file:
iterator	src/org/sunflow/core/ShadingState.java	/^    public Iterator<LightSample> iterator() {$/;"	m	class:ShadingState
jLabel1	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JLabel jLabel1;$/;"	f	class:RenderGlobalsPanel	file:
jLabel2	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JLabel jLabel2;$/;"	f	class:RenderGlobalsPanel	file:
jLabel3	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JLabel jLabel3;$/;"	f	class:RenderGlobalsPanel	file:
jLabel5	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JLabel jLabel5;$/;"	f	class:RenderGlobalsPanel	file:
jLabel6	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JLabel jLabel6;$/;"	f	class:RenderGlobalsPanel	file:
jMenuBar1	src/SunflowGUI.java	/^    private JMenuBar jMenuBar1;$/;"	f	class:SunflowGUI	file:
jMenuItem4	src/SunflowGUI.java	/^    private JMenuItem jMenuItem4;$/;"	f	class:SunflowGUI	file:
jPanel1	src/SunflowGUI.java	/^    private JPanel jPanel1;$/;"	f	class:SunflowGUI	file:
jPanel3	src/SunflowGUI.java	/^    private JPanel jPanel3;$/;"	f	class:SunflowGUI	file:
jPanel4	src/SunflowGUI.java	/^    private JPanel jPanel4;$/;"	f	class:SunflowGUI	file:
jPanel5	src/SunflowGUI.java	/^    private JPanel jPanel5;$/;"	f	class:SunflowGUI	file:
jPanel6	src/SunflowGUI.java	/^    private JPanel jPanel6;$/;"	f	class:SunflowGUI	file:
jScrollPane1	src/SunflowGUI.java	/^    private JScrollPane jScrollPane1;$/;"	f	class:SunflowGUI	file:
jScrollPane2	src/SunflowGUI.java	/^    private JScrollPane jScrollPane2;$/;"	f	class:SunflowGUI	file:
jSeparator1	src/SunflowGUI.java	/^    private JSeparator jSeparator1;$/;"	f	class:SunflowGUI	file:
jSeparator2	src/SunflowGUI.java	/^    private JSeparator jSeparator2;$/;"	f	class:SunflowGUI	file:
jSeparator3	src/SunflowGUI.java	/^    private JSeparator jSeparator3;$/;"	f	class:SunflowGUI	file:
jSeparator4	src/SunflowGUI.java	/^    private JSeparator jSeparator4;$/;"	f	class:SunflowGUI	file:
jSeparator5	src/SunflowGUI.java	/^    private JSeparator jSeparator5;$/;"	f	class:SunflowGUI	file:
jacobian	src/org/sunflow/core/light/ImageBasedLight.java	/^    private float jacobian;$/;"	f	class:ImageBasedLight	file:
jacobian	src/org/sunflow/core/light/SunSkyLight.java	/^    private float jacobian;$/;"	f	class:SunSkyLight	file:
jitter	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private boolean jitter;$/;"	f	class:BucketRenderer	file:
k	src/org/sunflow/core/primitive/Plane.java	/^    int k;$/;"	f	class:Plane
k	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private int k;$/;"	f	class:TriangleMesh.WaldTriangle	file:
kS0Spectrum	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final RegularSpectralCurve kS0Spectrum = new RegularSpectralCurve(S0Amplitudes, 300, 830);$/;"	f	class:ChromaticitySpectrum	file:
kS1Spectrum	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final RegularSpectralCurve kS1Spectrum = new RegularSpectralCurve(S1Amplitudes, 300, 830);$/;"	f	class:ChromaticitySpectrum	file:
kS2Spectrum	src/org/sunflow/image/ChromaticitySpectrum.java	/^    private static final RegularSpectralCurve kS2Spectrum = new RegularSpectralCurve(S2Amplitudes, 300, 830);$/;"	f	class:ChromaticitySpectrum	file:
k_gAmplitudes	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_gAmplitudes = { 0, 3.0f, 0.210f, 0 };$/;"	f	class:SunSkyLight	file:
k_gCurve	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final IrregularSpectralCurve k_gCurve = new IrregularSpectralCurve(k_gWavelengths, k_gAmplitudes);$/;"	f	class:SunSkyLight	file:
k_gWavelengths	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_gWavelengths = { 759, 760, 770, 771 };$/;"	f	class:SunSkyLight	file:
k_oAmplitudes	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_oAmplitudes = { 10.0f, 4.8f, 2.7f, 1.35f,$/;"	f	class:SunSkyLight	file:
k_oCurve	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final IrregularSpectralCurve k_oCurve = new IrregularSpectralCurve(k_oWavelengths, k_oAmplitudes);$/;"	f	class:SunSkyLight	file:
k_oWavelengths	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_oWavelengths = { 300, 305, 310, 315, 320,$/;"	f	class:SunSkyLight	file:
k_waAmplitudes	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_waAmplitudes = { 0f, 0.160e-1f, 0.240e-1f,$/;"	f	class:SunSkyLight	file:
k_waCurve	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final IrregularSpectralCurve k_waCurve = new IrregularSpectralCurve(k_waWavelengths, k_waAmplitudes);$/;"	f	class:SunSkyLight	file:
k_waWavelengths	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] k_waWavelengths = { 689, 690, 700, 710, 720,$/;"	f	class:SunSkyLight	file:
kernelBegin	src/org/sunflow/Benchmark.java	/^    public void kernelBegin() {$/;"	m	class:Benchmark
kernelBegin	src/org/sunflow/system/BenchmarkTest.java	/^    public void kernelBegin();$/;"	m	interface:BenchmarkTest
kernelEnd	src/org/sunflow/Benchmark.java	/^    public void kernelEnd() {$/;"	m	class:Benchmark
kernelEnd	src/org/sunflow/system/BenchmarkTest.java	/^    public void kernelEnd();$/;"	m	interface:BenchmarkTest
kernelMain	src/org/sunflow/Benchmark.java	/^    public void kernelMain() {$/;"	m	class:Benchmark
kernelMain	src/org/sunflow/system/BenchmarkTest.java	/^    public void kernelMain();$/;"	m	interface:BenchmarkTest
lambdaMax	src/org/sunflow/image/RegularSpectralCurve.java	/^    private final float lambdaMin, lambdaMax;$/;"	f	class:RegularSpectralCurve	file:
lambdaMin	src/org/sunflow/image/RegularSpectralCurve.java	/^    private final float lambdaMin, lambdaMax;$/;"	f	class:RegularSpectralCurve	file:
lastP	src/org/sunflow/system/ui/ConsoleInterface.java	/^    private int lastP;$/;"	f	class:ConsoleInterface	file:
ldiff	src/org/sunflow/core/LightSample.java	/^    private Color ldiff;$/;"	f	class:LightSample	file:
left	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color left, right, top, bottom, back;$/;"	f	class:CornellBox	file:
leftRightTable	src/org/sunflow/core/accel/KDTree.java	/^        byte[] leftRightTable;$/;"	f	class:KDTree.BuildTask
length	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private static float length(float w, float x, float y, float z) {$/;"	m	class:JuliaFractal	file:
length	src/org/sunflow/math/Vector3.java	/^    public final float length() {$/;"	m	class:Vector3
lengthSquared	src/org/sunflow/math/Vector3.java	/^    public final float lengthSquared() {$/;"	m	class:Vector3
lens	src/org/sunflow/core/Camera.java	/^    private final CameraLens lens;$/;"	f	class:Camera	file:
lensRadius	src/org/sunflow/core/camera/ThinLens.java	/^    private float lensRadius;$/;"	f	class:ThinLens	file:
lensRotation	src/org/sunflow/core/camera/ThinLens.java	/^    private float lensRotation;$/;"	f	class:ThinLens	file:
lensRotationRadians	src/org/sunflow/core/camera/ThinLens.java	/^    private float lensRotationRadians;$/;"	f	class:ThinLens	file:
lensSides	src/org/sunflow/core/camera/ThinLens.java	/^    private int lensSides;$/;"	f	class:ThinLens	file:
lerp	src/org/sunflow/math/PerlinScalar.java	/^    private static final float lerp(float t, float a, float b) {$/;"	m	class:PerlinScalar	file:
light	src/org/sunflow/SunflowAPI.java	/^    public final void light(String name, LightSource light) {$/;"	m	class:SunflowAPI
lightBounds	src/org/sunflow/core/primitive/CornellBox.java	/^    private BoundingBox lightBounds;$/;"	f	class:CornellBox	file:
lightPoint	src/org/sunflow/core/light/PointLight.java	/^    private Point3 lightPoint;$/;"	f	class:PointLight	file:
lightSample	src/org/sunflow/core/ShadingState.java	/^    private LightSample lightSample;$/;"	f	class:ShadingState	file:
lightServer	src/org/sunflow/core/Scene.java	/^    private LightServer lightServer;$/;"	f	class:Scene	file:
lights	src/org/sunflow/core/LightServer.java	/^    private LightSource[] lights;$/;"	f	class:LightServer	file:
lineColor	src/org/sunflow/core/shader/WireframeShader.java	/^    private Color lineColor;$/;"	f	class:WireframeShader	file:
lineTokens	src/org/sunflow/system/Parser.java	/^    private String[] lineTokens;$/;"	f	class:Parser	file:
list	src/org/sunflow/core/ParameterList.java	/^    protected final Map<String, Parameter> list;$/;"	f	class:ParameterList
load	src/org/sunflow/core/Texture.java	/^    private synchronized void load() {$/;"	m	class:Texture	file:
loaded	src/org/sunflow/core/Texture.java	/^    private int loaded;$/;"	f	class:Texture	file:
locatePhotons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private void locatePhotons(NearestPhotons np) {$/;"	m	class:CausticPhotonMap	file:
locatePhotons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private void locatePhotons(NearestPhotons np) {$/;"	m	class:GlobalPhotonMap	file:
log2n	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private int log2n;$/;"	f	class:CausticPhotonMap	file:
log2n	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private int log2n;$/;"	f	class:GlobalPhotonMap	file:
lookupCamera	src/org/sunflow/RenderObjectMap.java	/^    final Camera lookupCamera(String name) {$/;"	m	class:RenderObjectMap
lookupCamera	src/org/sunflow/SunflowAPI.java	/^    private final Camera lookupCamera(String name) {$/;"	m	class:SunflowAPI	file:
lookupGeometry	src/org/sunflow/RenderObjectMap.java	/^    final Geometry lookupGeometry(String name) {$/;"	m	class:RenderObjectMap
lookupGeometry	src/org/sunflow/SunflowAPI.java	/^    public final Geometry lookupGeometry(String name) {$/;"	m	class:SunflowAPI
lookupInstance	src/org/sunflow/RenderObjectMap.java	/^    final Instance lookupInstance(String name) {$/;"	m	class:RenderObjectMap
lookupInstance	src/org/sunflow/SunflowAPI.java	/^    private final Instance lookupInstance(String name) {$/;"	m	class:SunflowAPI	file:
lookupLight	src/org/sunflow/RenderObjectMap.java	/^    final LightSource lookupLight(String name) {$/;"	m	class:RenderObjectMap
lookupLight	src/org/sunflow/SunflowAPI.java	/^    private final LightSource lookupLight(String name) {$/;"	m	class:SunflowAPI	file:
lookupModifier	src/org/sunflow/RenderObjectMap.java	/^    final Modifier lookupModifier(String name) {$/;"	m	class:RenderObjectMap
lookupModifier	src/org/sunflow/SunflowAPI.java	/^    public final Modifier lookupModifier(String name) {$/;"	m	class:SunflowAPI
lookupOptions	src/org/sunflow/RenderObjectMap.java	/^    final Options lookupOptions(String name) {$/;"	m	class:RenderObjectMap
lookupOptions	src/org/sunflow/SunflowAPI.java	/^    private final Options lookupOptions(String name) {$/;"	m	class:SunflowAPI	file:
lookupShader	src/org/sunflow/RenderObjectMap.java	/^    final Shader lookupShader(String name) {$/;"	m	class:RenderObjectMap
lookupShader	src/org/sunflow/SunflowAPI.java	/^    public final Shader lookupShader(String name) {$/;"	m	class:SunflowAPI
lookupShadingCache	src/org/sunflow/core/LightServer.java	/^    private synchronized Color lookupShadingCache(ShadingState state, Shader shader) {$/;"	m	class:LightServer	file:
lowPriority	src/org/sunflow/core/Scene.java	/^    private boolean lowPriority;$/;"	f	class:Scene	file:
lspec	src/org/sunflow/core/LightSample.java	/^    private Color lspec;$/;"	f	class:LightSample	file:
lxmax	src/org/sunflow/core/primitive/CornellBox.java	/^    private float lxmin, lymin, lxmax, lymax;$/;"	f	class:CornellBox	file:
lxmin	src/org/sunflow/core/primitive/CornellBox.java	/^    private float lxmin, lymin, lxmax, lymax;$/;"	f	class:CornellBox	file:
lymax	src/org/sunflow/core/primitive/CornellBox.java	/^    private float lxmin, lymin, lxmax, lymax;$/;"	f	class:CornellBox	file:
lymin	src/org/sunflow/core/primitive/CornellBox.java	/^    private float lxmin, lymin, lxmax, lymax;$/;"	f	class:CornellBox	file:
m00	src/org/sunflow/math/Matrix4.java	/^    private float m00;$/;"	f	class:Matrix4	file:
m01	src/org/sunflow/math/Matrix4.java	/^    private float m01;$/;"	f	class:Matrix4	file:
m02	src/org/sunflow/math/Matrix4.java	/^    private float m02;$/;"	f	class:Matrix4	file:
m03	src/org/sunflow/math/Matrix4.java	/^    private float m03;$/;"	f	class:Matrix4	file:
m10	src/org/sunflow/math/Matrix4.java	/^    private float m10;$/;"	f	class:Matrix4	file:
m11	src/org/sunflow/math/Matrix4.java	/^    private float m11;$/;"	f	class:Matrix4	file:
m12	src/org/sunflow/math/Matrix4.java	/^    private float m12;$/;"	f	class:Matrix4	file:
m13	src/org/sunflow/math/Matrix4.java	/^    private float m13;$/;"	f	class:Matrix4	file:
m20	src/org/sunflow/math/Matrix4.java	/^    private float m20;$/;"	f	class:Matrix4	file:
m21	src/org/sunflow/math/Matrix4.java	/^    private float m21;$/;"	f	class:Matrix4	file:
m22	src/org/sunflow/math/Matrix4.java	/^    private float m22;$/;"	f	class:Matrix4	file:
m23	src/org/sunflow/math/Matrix4.java	/^    private float m23;$/;"	f	class:Matrix4	file:
m30	src/org/sunflow/math/Matrix4.java	/^    private float m30;$/;"	f	class:Matrix4	file:
m31	src/org/sunflow/math/Matrix4.java	/^    private float m31;$/;"	f	class:Matrix4	file:
m32	src/org/sunflow/math/Matrix4.java	/^    private float m32;$/;"	f	class:Matrix4	file:
m33	src/org/sunflow/math/Matrix4.java	/^    private float m33;$/;"	f	class:Matrix4	file:
madd	src/org/sunflow/image/Color.java	/^    public final Color madd(Color s, Color c) {$/;"	m	class:Color
madd	src/org/sunflow/image/Color.java	/^    public final Color madd(float s, Color c) {$/;"	m	class:Color
main	src/SunflowGUI.java	/^    public static void main(String[] args) {$/;"	m	class:SunflowGUI
main	src/org/sunflow/Benchmark.java	/^    public static void main(String[] args) {$/;"	m	class:Benchmark
main	src/org/sunflow/core/tesselatable/Gumbo.java	/^    public static void main(String[] args) {$/;"	m	class:Gumbo
main	src/org/sunflow/image/RGBSpace.java	/^    public static void main(String[] args) {$/;"	m	class:RGBSpace
main	src/org/sunflow/system/RenderGlobalsPanel.java	/^    public static void main(String[] args) {$/;"	m	class:RenderGlobalsPanel
makeFromW	src/org/sunflow/math/OrthoNormalBasis.java	/^    public static final OrthoNormalBasis makeFromW(Vector3 w) {$/;"	m	class:OrthoNormalBasis
makeFromWV	src/org/sunflow/math/OrthoNormalBasis.java	/^    public static final OrthoNormalBasis makeFromWV(Vector3 w, Vector3 v) {$/;"	m	class:OrthoNormalBasis
map	src/org/sunflow/core/ShadingState.java	/^    private PhotonStore map;$/;"	f	class:ShadingState	file:
max	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        private int max;$/;"	f	class:CausticPhotonMap.NearestPhotons	file:
max	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        private int max;$/;"	f	class:GlobalPhotonMap.NearestPhotons	file:
max	src/org/sunflow/math/MathUtils.java	/^    public static final double max(double a, double b, double c) {$/;"	m	class:MathUtils
max	src/org/sunflow/math/MathUtils.java	/^    public static final float max(float a, float b, float c) {$/;"	m	class:MathUtils
max	src/org/sunflow/math/MathUtils.java	/^    public static final float max(float a, float b, float c, float d) {$/;"	m	class:MathUtils
max	src/org/sunflow/math/MathUtils.java	/^    public static final int max(int a, int b, int c) {$/;"	m	class:MathUtils
max	src/org/sunflow/system/ui/ConsoleInterface.java	/^    private int max;$/;"	f	class:ConsoleInterface	file:
maxAADepth	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int maxAADepth;$/;"	f	class:BucketRenderer	file:
maxDepth	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int maxDepth;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
maxDepth	src/org/sunflow/core/accel/KDTree.java	/^        private int maxDepth;$/;"	f	class:KDTree.BuildStats	file:
maxDiffuseDepth	src/org/sunflow/core/LightServer.java	/^    private int maxDiffuseDepth = 4;$/;"	f	class:LightServer	file:
maxDist	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    private float maxDist;$/;"	f	class:AmbientOcclusionGIEngine	file:
maxDist	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    private float maxDist;$/;"	f	class:AmbientOcclusionShader	file:
maxIterations	src/org/sunflow/core/primitive/JuliaFractal.java	/^    private int maxIterations;$/;"	f	class:JuliaFractal	file:
maxObjects	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int maxObjects;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
maxObjects	src/org/sunflow/core/accel/KDTree.java	/^        private int maxObjects;$/;"	f	class:KDTree.BuildStats	file:
maxPower	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private float maxPower;$/;"	f	class:CausticPhotonMap	file:
maxPower	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private float maxPower;$/;"	f	class:GlobalPhotonMap	file:
maxPrims	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private int maxPrims;$/;"	f	class:BoundingIntervalHierarchy	file:
maxPrims	src/org/sunflow/core/accel/KDTree.java	/^    private int maxPrims;$/;"	f	class:KDTree	file:
maxRadius	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private float maxRadius;$/;"	f	class:CausticPhotonMap	file:
maxRadius	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private float maxRadius;$/;"	f	class:GlobalPhotonMap	file:
maxReflectionDepth	src/org/sunflow/core/LightServer.java	/^    private int maxReflectionDepth = 16;$/;"	f	class:LightServer	file:
maxRefractionDepth	src/org/sunflow/core/LightServer.java	/^    private int maxRefractionDepth = 16;$/;"	f	class:LightServer	file:
maxSamplingComboxBox	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JComboBox maxSamplingComboxBox;$/;"	f	class:RenderGlobalsPanel	file:
maxSpacing	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private float maxSpacing;$/;"	f	class:IrradianceCacheGIEngine	file:
maxStepSize	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int maxStepSize;$/;"	f	class:BucketRenderer	file:
maxX	src/org/sunflow/core/primitive/Box.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:Box	file:
maxX	src/org/sunflow/core/primitive/CornellBox.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:CornellBox	file:
maxY	src/org/sunflow/core/primitive/Box.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:Box	file:
maxY	src/org/sunflow/core/primitive/CornellBox.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:CornellBox	file:
maxZ	src/org/sunflow/core/primitive/Box.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:Box	file:
maxZ	src/org/sunflow/core/primitive/CornellBox.java	/^    private float maxX, maxY, maxZ;$/;"	f	class:CornellBox	file:
maximum	src/org/sunflow/math/BoundingBox.java	/^    private Point3 maximum;$/;"	f	class:BoundingBox	file:
mid	src/org/sunflow/math/Point3.java	/^    public static final Point3 mid(Point3 p1, Point3 p2, Point3 dest) {$/;"	m	class:Point3
min	src/org/sunflow/math/MathUtils.java	/^    public static final double min(double a, double b, double c) {$/;"	m	class:MathUtils
min	src/org/sunflow/math/MathUtils.java	/^    public static final float min(float a, float b, float c) {$/;"	m	class:MathUtils
min	src/org/sunflow/math/MathUtils.java	/^    public static final float min(float a, float b, float c, float d) {$/;"	m	class:MathUtils
min	src/org/sunflow/math/MathUtils.java	/^    public static final int min(int a, int b, int c) {$/;"	m	class:MathUtils
min	src/org/sunflow/system/ui/ConsoleInterface.java	/^    private int min;$/;"	f	class:ConsoleInterface	file:
minAADepth	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int minAADepth;$/;"	f	class:BucketRenderer	file:
minDepth	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int minDepth;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
minDepth	src/org/sunflow/core/accel/KDTree.java	/^        private int minDepth;$/;"	f	class:KDTree.BuildStats	file:
minObjects	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int minObjects;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
minObjects	src/org/sunflow/core/accel/KDTree.java	/^        private int minObjects;$/;"	f	class:KDTree.BuildStats	file:
minSamplingComboBox	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JComboBox minSamplingComboBox;$/;"	f	class:RenderGlobalsPanel	file:
minSpacing	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private float minSpacing;$/;"	f	class:IrradianceCacheGIEngine	file:
minStepSize	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int minStepSize;$/;"	f	class:BucketRenderer	file:
minX	src/org/sunflow/core/primitive/Box.java	/^    private float minX, minY, minZ;$/;"	f	class:Box	file:
minX	src/org/sunflow/core/primitive/CornellBox.java	/^    private float minX, minY, minZ;$/;"	f	class:CornellBox	file:
minY	src/org/sunflow/core/primitive/Box.java	/^    private float minX, minY, minZ;$/;"	f	class:Box	file:
minY	src/org/sunflow/core/primitive/CornellBox.java	/^    private float minX, minY, minZ;$/;"	f	class:CornellBox	file:
minZ	src/org/sunflow/core/primitive/Box.java	/^    private float minX, minY, minZ;$/;"	f	class:Box	file:
minZ	src/org/sunflow/core/primitive/CornellBox.java	/^    private float minX, minY, minZ;$/;"	f	class:CornellBox	file:
minimum	src/org/sunflow/math/BoundingBox.java	/^    private Point3 minimum;$/;"	f	class:BoundingBox	file:
mitchell	src/org/sunflow/core/filter/MitchellFilter.java	/^    private float mitchell(float x) {$/;"	m	class:MitchellFilter	file:
mod	src/org/sunflow/core/bucket/RandomBucketOrder.java	/^    private int mod(int a, int b) {$/;"	m	class:RandomBucketOrder	file:
mod1	src/org/sunflow/math/QMC.java	/^    public static final double mod1(double x) {$/;"	m	class:QMC
modes	src/org/sunflow/.SunflowAPI.java.swp	/^/;"	i
modifier	src/org/sunflow/SunflowAPI.java	/^    public final void modifier(String name, Modifier modifier) {$/;"	m	class:SunflowAPI
modifier	src/org/sunflow/core/ShadingState.java	/^    private Modifier modifier;$/;"	f	class:ShadingState	file:
modifiers	src/org/sunflow/core/Instance.java	/^    private Modifier[] modifiers;$/;"	f	class:Instance	file:
modify	src/org/sunflow/core/Modifier.java	/^    public void modify(ShadingState state);$/;"	m	interface:Modifier
modify	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^    public void modify(ShadingState state) {$/;"	m	class:BumpMappingModifier
modify	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^    public void modify(ShadingState state) {$/;"	m	class:NormalMapModifier
mouseDragged	src/org/sunflow/system/ImagePanel.java	/^        public void mouseDragged(MouseEvent e) {$/;"	m	class:ImagePanel.ScrollZoomListener
mousePressed	src/org/sunflow/system/ImagePanel.java	/^        public void mousePressed(MouseEvent e) {$/;"	m	class:ImagePanel.ScrollZoomListener
mouseReleased	src/org/sunflow/system/ImagePanel.java	/^        public void mouseReleased(MouseEvent e) {$/;"	m	class:ImagePanel.ScrollZoomListener
mouseWheelMoved	src/org/sunflow/system/ImagePanel.java	/^        public void mouseWheelMoved(MouseWheelEvent e) {$/;"	m	class:ImagePanel.ScrollZoomListener
mul	src/org/sunflow/image/Color.java	/^    public final Color mul(Color c) {$/;"	m	class:Color
mul	src/org/sunflow/image/Color.java	/^    public final Color mul(float s) {$/;"	m	class:Color
mul	src/org/sunflow/image/Color.java	/^    public static final Color mul(Color c1, Color c2) {$/;"	m	class:Color
mul	src/org/sunflow/image/Color.java	/^    public static final Color mul(Color c1, Color c2, Color dest) {$/;"	m	class:Color
mul	src/org/sunflow/image/Color.java	/^    public static final Color mul(float s, Color c) {$/;"	m	class:Color
mul	src/org/sunflow/image/Color.java	/^    public static final Color mul(float s, Color c, Color dest) {$/;"	m	class:Color
mul	src/org/sunflow/image/XYZColor.java	/^    public final XYZColor mul(float s) {$/;"	m	class:XYZColor
mul	src/org/sunflow/math/Vector3.java	/^    public final Vector3 mul(float s) {$/;"	m	class:Vector3
mul	src/org/sunflow/math/Vector3.java	/^    public final Vector3 mul(float s, Vector3 dest) {$/;"	m	class:Vector3
multiply	src/org/sunflow/math/Matrix4.java	/^    public final Matrix4 multiply(Matrix4 m) {$/;"	m	class:Matrix4
mx	src/org/sunflow/system/ImagePanel.java	/^        int mx;$/;"	f	class:ImagePanel.ScrollZoomListener
my	src/org/sunflow/system/ImagePanel.java	/^        int my;$/;"	f	class:ImagePanel.ScrollZoomListener
n	src/org/sunflow/core/ShadingState.java	/^    private Vector3 n;$/;"	f	class:ShadingState	file:
n	src/org/sunflow/core/accel/KDTree.java	/^        int n;$/;"	f	class:KDTree.BuildTask
n	src/org/sunflow/core/accel/NullAccelerator.java	/^    private int n;$/;"	f	class:NullAccelerator	file:
n	src/org/sunflow/core/gi/InstantGI.java	/^        Vector3 n;$/;"	f	class:InstantGI.PointLight
n	src/org/sunflow/core/primitive/ParticleSurface.java	/^    private int n;$/;"	f	class:ParticleSurface	file:
n	src/org/sunflow/core/renderer/BucketRenderer.java	/^        int i, n;$/;"	f	class:BucketRenderer.ImageSample
nanos	src/org/sunflow/system/Timer.java	/^    public long nanos() {$/;"	m	class:Timer
nd	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float nu, nv, nd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
near	src/org/sunflow/core/IntersectionState.java	/^        public float near;$/;"	f	class:IntersectionState.StackNode
negate	src/org/sunflow/math/Vector3.java	/^    public final Vector3 negate() {$/;"	m	class:Vector3
negate	src/org/sunflow/math/Vector3.java	/^    public final Vector3 negate(Vector3 dest) {$/;"	m	class:Vector3
newFileMenuItem	src/SunflowGUI.java	/^    private JMenuItem newFileMenuItem;$/;"	f	class:SunflowGUI	file:
newFileMenuItemActionPerformed	src/SunflowGUI.java	/^    private void newFileMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
next	src/org/sunflow/core/LightSample.java	/^    LightSample next; \/\/ pointer to next item in a linked list of samples$/;"	f	class:LightSample
next	src/org/sunflow/core/LightServer.java	/^        Sample next; \/\/ linked list$/;"	f	class:LightServer.Sample
next	src/org/sunflow/core/ShadingState.java	/^        public LightSample next() {$/;"	m	class:ShadingState.LightSampleIterator
next	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        Sample next;$/;"	f	class:IrradianceCacheGIEngine.Sample
next	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        PhotonGroup next;$/;"	f	class:GridPhotonMap.PhotonGroup
nextPrime	src/org/sunflow/math/QMC.java	/^    private static final int nextPrime(int p) {$/;"	m	class:QMC	file:
ng	src/org/sunflow/core/ShadingState.java	/^    private Vector3 ng;$/;"	f	class:ShadingState	file:
ng	src/org/sunflow/core/light/TriangleMeshLight.java	/^        private Vector3 ng;$/;"	f	class:TriangleMeshLight.TriangleLight	file:
nix	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float nix, niy, niz;$/;"	f	class:IrradianceCacheGIEngine.Sample
niy	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float nix, niy, niz;$/;"	f	class:IrradianceCacheGIEngine.Sample
niz	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float nix, niy, niz;$/;"	f	class:IrradianceCacheGIEngine.Sample
node	src/org/sunflow/core/IntersectionState.java	/^        public int node;$/;"	f	class:IntersectionState.StackNode
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(Point2 p) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(Point3 p) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(Point3 p, float t) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(float x) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(float x, float y) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(float x, float y, float z) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float noise(float x, float y, float z, float t) {$/;"	m	class:PerlinScalar
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(Point2 p) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(Point3 p) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(Point3 p, float t) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(float x) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(float x, float y) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(float x, float y, float z) {$/;"	m	class:PerlinVector
noise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 noise(float x, float y, float z, float t) {$/;"	m	class:PerlinVector
normal	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        short normal;$/;"	f	class:GlobalPhotonMap.Photon
normal	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        Vector3 normal;$/;"	f	class:GridPhotonMap.PhotonGroup
normal	src/org/sunflow/core/primitive/Plane.java	/^    private Vector3 normal;$/;"	f	class:Plane	file:
normal	src/org/sunflow/math/Point3.java	/^    public static final Vector3 normal(Point3 p0, Point3 p1, Point3 p2) {$/;"	m	class:Point3
normal	src/org/sunflow/math/Point3.java	/^    public static final Vector3 normal(Point3 p0, Point3 p1, Point3 p2, Vector3 dest) {$/;"	m	class:Point3
normalMap	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^    private Texture normalMap;$/;"	f	class:NormalMapModifier	file:
normalize	src/org/sunflow/core/Ray.java	/^    public void normalize() {$/;"	m	class:Ray
normalize	src/org/sunflow/image/XYZColor.java	/^    public final void normalize() {$/;"	m	class:XYZColor
normalize	src/org/sunflow/math/Vector3.java	/^    public final Vector3 normalize() {$/;"	m	class:Vector3
normalize	src/org/sunflow/math/Vector3.java	/^    public final Vector3 normalize(Vector3 dest) {$/;"	m	class:Vector3
normalizeLength	src/org/sunflow/math/Vector3.java	/^    public final float normalizeLength() {$/;"	m	class:Vector3
normals	src/org/sunflow/core/primitive/QuadMesh.java	/^    private FloatParameter normals;$/;"	f	class:QuadMesh	file:
normals	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private FloatParameter normals;$/;"	f	class:TriangleMesh	file:
nu	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float nu, nv, nd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
numBVH2	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numBVH2;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numBias	src/org/sunflow/core/gi/InstantGI.java	/^    private int numBias;$/;"	f	class:InstantGI	file:
numBuckets	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int bucketCounter, numBuckets;$/;"	f	class:SimpleRenderer	file:
numBucketsX	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int numBucketsX, numBucketsY;$/;"	f	class:SimpleRenderer	file:
numBucketsY	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private int numBucketsX, numBucketsY;$/;"	f	class:SimpleRenderer	file:
numEmit	src/org/sunflow/core/PhotonStore.java	/^    int numEmit();$/;"	m	interface:PhotonStore
numEmit	src/org/sunflow/core/gi/InstantGI.java	/^        public int numEmit() {$/;"	m	class:InstantGI.PointLightStore
numEmit	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private int numEmit;$/;"	f	class:CausticPhotonMap	file:
numEmit	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public int numEmit() {$/;"	m	class:CausticPhotonMap
numEmit	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private int numEmit;$/;"	f	class:GlobalPhotonMap	file:
numEmit	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public int numEmit() {$/;"	m	class:GlobalPhotonMap
numEmit	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int numEmit;$/;"	f	class:GridPhotonMap	file:
numEmit	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public int numEmit() {$/;"	m	class:GridPhotonMap
numFaceVerts	src/org/sunflow/core/ParameterList.java	/^    private int numVerts, numFaces, numFaceVerts;$/;"	f	class:ParameterList	file:
numFaces	src/org/sunflow/core/ParameterList.java	/^    private int numVerts, numFaces, numFaceVerts;$/;"	f	class:ParameterList	file:
numGather	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private int numGather;$/;"	f	class:GlobalPhotonMap	file:
numGather	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int numGather;$/;"	f	class:GridPhotonMap	file:
numLeaves	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves;$/;"	f	class:KDTree.BuildStats	file:
numLeaves0	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves0;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves0	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves0;$/;"	f	class:KDTree.BuildStats	file:
numLeaves1	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves1;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves1	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves1;$/;"	f	class:KDTree.BuildStats	file:
numLeaves2	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves2;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves2	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves2;$/;"	f	class:KDTree.BuildStats	file:
numLeaves3	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves3;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves3	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves3;$/;"	f	class:KDTree.BuildStats	file:
numLeaves4	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves4;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves4	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves4;$/;"	f	class:KDTree.BuildStats	file:
numLeaves4p	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numLeaves4p;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numLeaves4p	src/org/sunflow/core/accel/KDTree.java	/^        private int numLeaves4p;$/;"	f	class:KDTree.BuildStats	file:
numLightSamples	src/org/sunflow/core/parser/SCParser.java	/^    private int numLightSamples;$/;"	f	class:SCParser	file:
numNodes	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int numNodes;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
numNodes	src/org/sunflow/core/accel/KDTree.java	/^        private int numNodes;$/;"	f	class:KDTree.BuildStats	file:
numObjects	src/org/sunflow/core/accel/KDTree.java	/^        int numObjects;$/;"	f	class:KDTree.BuildTask
numPhotons	src/org/sunflow/core/gi/InstantGI.java	/^    private int numPhotons;$/;"	f	class:InstantGI	file:
numRays	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private int numRays;$/;"	f	class:AnisotropicWardShader	file:
numRays	src/org/sunflow/core/shader/PhongShader.java	/^    private int numRays;$/;"	f	class:PhongShader	file:
numSamples	src/org/sunflow/core/light/ImageBasedLight.java	/^    private int numSamples;$/;"	f	class:ImageBasedLight	file:
numSamples	src/org/sunflow/core/light/SphereLight.java	/^    private int numSamples;$/;"	f	class:SphereLight	file:
numSamples	src/org/sunflow/core/light/TriangleMeshLight.java	/^    private int numSamples;$/;"	f	class:TriangleMeshLight	file:
numSamples	src/org/sunflow/core/shader/UberShader.java	/^    private int numSamples;$/;"	f	class:UberShader	file:
numSegments	src/org/sunflow/core/primitive/Hair.java	/^    private int numSegments;$/;"	f	class:Hair	file:
numSets	src/org/sunflow/core/gi/InstantGI.java	/^    private int numSets;$/;"	f	class:InstantGI	file:
numSkySamples	src/org/sunflow/core/light/SunSkyLight.java	/^    private int numSkySamples;$/;"	f	class:SunSkyLight	file:
numStoredPhotons	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int numStoredPhotons;$/;"	f	class:GridPhotonMap	file:
numVerts	src/org/sunflow/core/ParameterList.java	/^    private int numVerts, numFaces, numFaceVerts;$/;"	f	class:ParameterList	file:
nv	src/org/sunflow/core/primitive/TriangleMesh.java	/^        private float nu, nv, nd;$/;"	f	class:TriangleMesh.WaldTriangle	file:
nx	src/org/sunflow/core/LightServer.java	/^        float nx, ny, nz;$/;"	f	class:LightServer.Sample
nx	src/org/sunflow/core/accel/UniformGrid.java	/^    private int nx, ny, nz;$/;"	f	class:UniformGrid	file:
nx	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int nx, ny, nz;$/;"	f	class:GridPhotonMap	file:
nx	src/org/sunflow/core/primitive/CubeGrid.java	/^    private int nx, ny, nz;$/;"	f	class:CubeGrid	file:
nx	src/org/sunflow/core/renderer/BucketRenderer.java	/^        float nx, ny, nz;$/;"	f	class:BucketRenderer.ImageSample
ny	src/org/sunflow/core/LightServer.java	/^        float nx, ny, nz;$/;"	f	class:LightServer.Sample
ny	src/org/sunflow/core/accel/UniformGrid.java	/^    private int nx, ny, nz;$/;"	f	class:UniformGrid	file:
ny	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int nx, ny, nz;$/;"	f	class:GridPhotonMap	file:
ny	src/org/sunflow/core/primitive/CubeGrid.java	/^    private int nx, ny, nz;$/;"	f	class:CubeGrid	file:
ny	src/org/sunflow/core/renderer/BucketRenderer.java	/^        float nx, ny, nz;$/;"	f	class:BucketRenderer.ImageSample
nz	src/org/sunflow/core/LightServer.java	/^        float nx, ny, nz;$/;"	f	class:LightServer.Sample
nz	src/org/sunflow/core/accel/UniformGrid.java	/^    private int nx, ny, nz;$/;"	f	class:UniformGrid	file:
nz	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private int nx, ny, nz;$/;"	f	class:GridPhotonMap	file:
nz	src/org/sunflow/core/primitive/CubeGrid.java	/^    private int nx, ny, nz;$/;"	f	class:CubeGrid	file:
nz	src/org/sunflow/core/renderer/BucketRenderer.java	/^        float nx, ny, nz;$/;"	f	class:BucketRenderer.ImageSample
o2w	src/org/sunflow/core/Instance.java	/^    private Matrix4 o2w;$/;"	f	class:Instance	file:
obj	src/org/sunflow/RenderObjectMap.java	/^        private final RenderObject obj;$/;"	f	class:RenderObjectMap.RenderObjectHandle	file:
obj	src/org/sunflow/core/ParameterList.java	/^        private Object obj;$/;"	f	class:ParameterList.Parameter	file:
objects	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private int[] objects;$/;"	f	class:BoundingIntervalHierarchy	file:
occlusion	src/org/sunflow/core/ShadingState.java	/^    public final Color occlusion(int samples, float maxDist) {$/;"	m	class:ShadingState
occlusion	src/org/sunflow/core/ShadingState.java	/^    public final Color occlusion(int samples, float maxDist, Color bright, Color dark) {$/;"	m	class:ShadingState
openFile	src/SunflowGUI.java	/^    private void openFile(String filename) {$/;"	m	class:SunflowGUI	file:
openFileMenuItem	src/SunflowGUI.java	/^    private JMenuItem openFileMenuItem;$/;"	f	class:SunflowGUI	file:
openFileMenuItemActionPerformed	src/SunflowGUI.java	/^    private void openFileMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
opposite	src/org/sunflow/image/Color.java	/^    public final Color opposite() {$/;"	m	class:Color
options	src/org/sunflow/SunflowAPI.java	/^    public final void options(String name) {$/;"	m	class:SunflowAPI
order	src/org/sunflow/core/bucket/InvertedBucketOrder.java	/^    private BucketOrder order;$/;"	f	class:InvertedBucketOrder	file:
org.sunflow	src/org/sunflow/Benchmark.java	/^package org.sunflow;$/;"	p
org.sunflow	src/org/sunflow/RealtimeBenchmark.java	/^package org.sunflow;$/;"	p
org.sunflow	src/org/sunflow/RenderObjectMap.java	/^package org.sunflow;$/;"	p
org.sunflow	src/org/sunflow/SunflowAPI.java	/^package org.sunflow;$/;"	p
org.sunflow.core	src/org/sunflow/core/AccelerationStructure.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/AccelerationStructureFactory.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/BucketOrder.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Camera.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/CameraLens.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/CausticPhotonMapInterface.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Display.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Filter.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/GIEngine.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Geometry.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/GlobalPhotonMapInterface.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/ImageSampler.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Instance.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/InstanceList.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/IntersectionState.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/LightSample.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/LightServer.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/LightSource.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Modifier.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Options.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/ParameterList.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/PhotonStore.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/PrimitiveList.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Ray.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/RenderObject.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Scene.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/SceneParser.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Shader.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/ShadingState.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Tesselatable.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/Texture.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core	src/org/sunflow/core/TextureCache.java	/^package org.sunflow.core;$/;"	p
org.sunflow.core.accel	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^package org.sunflow.core.accel;$/;"	p
org.sunflow.core.accel	src/org/sunflow/core/accel/KDTree.java	/^package org.sunflow.core.accel;$/;"	p
org.sunflow.core.accel	src/org/sunflow/core/accel/NullAccelerator.java	/^package org.sunflow.core.accel;$/;"	p
org.sunflow.core.accel	src/org/sunflow/core/accel/UniformGrid.java	/^package org.sunflow.core.accel;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/BucketOrderFactory.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/ColumnBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/DiagonalBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/HilbertBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/InvertedBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/RandomBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/RowBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.bucket	src/org/sunflow/core/bucket/SpiralBucketOrder.java	/^package org.sunflow.core.bucket;$/;"	p
org.sunflow.core.camera	src/org/sunflow/core/camera/FisheyeLens.java	/^package org.sunflow.core.camera;$/;"	p
org.sunflow.core.camera	src/org/sunflow/core/camera/PinholeLens.java	/^package org.sunflow.core.camera;$/;"	p
org.sunflow.core.camera	src/org/sunflow/core/camera/SphericalLens.java	/^package org.sunflow.core.camera;$/;"	p
org.sunflow.core.camera	src/org/sunflow/core/camera/ThinLens.java	/^package org.sunflow.core.camera;$/;"	p
org.sunflow.core.display	src/org/sunflow/core/display/FastDisplay.java	/^package org.sunflow.core.display;$/;"	p
org.sunflow.core.display	src/org/sunflow/core/display/FileDisplay.java	/^package org.sunflow.core.display;$/;"	p
org.sunflow.core.display	src/org/sunflow/core/display/FrameDisplay.java	/^package org.sunflow.core.display;$/;"	p
org.sunflow.core.display	src/org/sunflow/core/display/ImgPipeDisplay.java	/^package org.sunflow.core.display;$/;"	p
org.sunflow.core.display	src/org/sunflow/core/display/OpenExrDisplay.java	/^package org.sunflow.core.display;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/BoxFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/CatmullRomFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/FilterFactory.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/GaussianFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/LanczosFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/MitchellFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/SincFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.filter	src/org/sunflow/core/filter/TriangleFilter.java	/^package org.sunflow.core.filter;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/FakeGIEngine.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/GIEngineFactory.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/InstantGI.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.gi	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^package org.sunflow.core.gi;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/DirectionalSpotlight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/ImageBasedLight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/PointLight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/SphereLight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/SunSkyLight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.light	src/org/sunflow/core/light/TriangleMeshLight.java	/^package org.sunflow.core.light;$/;"	p
org.sunflow.core.modifiers	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^package org.sunflow.core.modifiers;$/;"	p
org.sunflow.core.modifiers	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^package org.sunflow.core.modifiers;$/;"	p
org.sunflow.core.parser	src/org/sunflow/core/parser/RA2Parser.java	/^package org.sunflow.core.parser;$/;"	p
org.sunflow.core.parser	src/org/sunflow/core/parser/RA3Parser.java	/^package org.sunflow.core.parser;$/;"	p
org.sunflow.core.parser	src/org/sunflow/core/parser/SCParser.java	/^package org.sunflow.core.parser;$/;"	p
org.sunflow.core.parser	src/org/sunflow/core/parser/ShaveRibParser.java	/^package org.sunflow.core.parser;$/;"	p
org.sunflow.core.parser	src/org/sunflow/core/parser/TriParser.java	/^package org.sunflow.core.parser;$/;"	p
org.sunflow.core.photonmap	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^package org.sunflow.core.photonmap;$/;"	p
org.sunflow.core.photonmap	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^package org.sunflow.core.photonmap;$/;"	p
org.sunflow.core.photonmap	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^package org.sunflow.core.photonmap;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Background.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/BanchoffSurface.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Box.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/CornellBox.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/CubeGrid.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Hair.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/JuliaFractal.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/ParticleSurface.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Plane.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/QuadMesh.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Sphere.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/Torus.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.primitive	src/org/sunflow/core/primitive/TriangleMesh.java	/^package org.sunflow.core.primitive;$/;"	p
org.sunflow.core.renderer	src/org/sunflow/core/renderer/BucketRenderer.java	/^package org.sunflow.core.renderer;$/;"	p
org.sunflow.core.renderer	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^package org.sunflow.core.renderer;$/;"	p
org.sunflow.core.renderer	src/org/sunflow/core/renderer/SimpleRenderer.java	/^package org.sunflow.core.renderer;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/ConstantShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/DiffuseShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/GlassShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/IDShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/MirrorShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/NormalShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/PhongShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/PrimIDShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/QuickGrayShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/SimpleShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/TexturedPhongShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/TexturedWardShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/UVShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/UberShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/ViewCausticsShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/ViewGlobalPhotonsShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/ViewIrradianceShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.shader	src/org/sunflow/core/shader/WireframeShader.java	/^package org.sunflow.core.shader;$/;"	p
org.sunflow.core.tesselatable	src/org/sunflow/core/tesselatable/BezierMesh.java	/^package org.sunflow.core.tesselatable;$/;"	p
org.sunflow.core.tesselatable	src/org/sunflow/core/tesselatable/FileMesh.java	/^package org.sunflow.core.tesselatable;$/;"	p
org.sunflow.core.tesselatable	src/org/sunflow/core/tesselatable/Gumbo.java	/^package org.sunflow.core.tesselatable;$/;"	p
org.sunflow.core.tesselatable	src/org/sunflow/core/tesselatable/Teapot.java	/^package org.sunflow.core.tesselatable;$/;"	p
org.sunflow.image	src/org/sunflow/image/Bitmap.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/BlackbodySpectrum.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/ChromaticitySpectrum.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/Color.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/ConstantSpectralCurve.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/IrregularSpectralCurve.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/RGBSpace.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/RegularSpectralCurve.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/SpectralCurve.java	/^package org.sunflow.image;$/;"	p
org.sunflow.image	src/org/sunflow/image/XYZColor.java	/^package org.sunflow.image;$/;"	p
org.sunflow.math	src/org/sunflow/math/BoundingBox.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/MathUtils.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/Matrix4.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/OrthoNormalBasis.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/PerlinScalar.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/PerlinVector.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/Point2.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/Point3.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/QMC.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/Solvers.java	/^package org.sunflow.math;$/;"	p
org.sunflow.math	src/org/sunflow/math/Vector3.java	/^package org.sunflow.math;$/;"	p
org.sunflow.system	src/org/sunflow/system/BenchmarkFramework.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/BenchmarkTest.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/ByteUtil.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/ImagePanel.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/Memory.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/Parser.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/RenderGlobalsPanel.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/SearchPath.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/Timer.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/UI.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system	src/org/sunflow/system/UserInterface.java	/^package org.sunflow.system;$/;"	p
org.sunflow.system.ui	src/org/sunflow/system/ui/ConsoleInterface.java	/^package org.sunflow.system.ui;$/;"	p
org.sunflow.system.ui	src/org/sunflow/system/ui/SilentInterface.java	/^package org.sunflow.system.ui;$/;"	p
org.sunflow.util	src/org/sunflow/util/FloatArray.java	/^package org.sunflow.util;$/;"	p
org.sunflow.util	src/org/sunflow/util/IntArray.java	/^package org.sunflow.util;$/;"	p
outputInt32	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    private void outputInt32(int i) {$/;"	m	class:ImgPipeDisplay	file:
outputPacket	src/org/sunflow/core/display/ImgPipeDisplay.java	/^    private void outputPacket(int type, int d0, int d1, int d2, int d3) {$/;"	m	class:ImgPipeDisplay	file:
ox	src/org/sunflow/core/Ray.java	/^    public float ox, oy, oz;$/;"	f	class:Ray
oy	src/org/sunflow/core/Ray.java	/^    public float ox, oy, oz;$/;"	f	class:Ray
oz	src/org/sunflow/core/Ray.java	/^    public float ox, oy, oz;$/;"	f	class:Ray
p	src/org/sunflow/core/ShadingState.java	/^    private Point3 p;$/;"	f	class:ShadingState	file:
p	src/org/sunflow/core/gi/InstantGI.java	/^        Point3 p;$/;"	f	class:InstantGI.PointLight
p	src/org/sunflow/core/parser/SCParser.java	/^    private Parser p;$/;"	f	class:SCParser	file:
p	src/org/sunflow/math/PerlinScalar.java	/^    private static final int[] p = { 151, 160, 137, 91, 90, 15, 131, 13, 201,$/;"	f	class:PerlinScalar	file:
pack	src/org/sunflow/core/accel/KDTree.java	/^    private static long pack(float split, long type, int axis, int object) {$/;"	m	class:KDTree	file:
paint	src/org/sunflow/core/display/FastDisplay.java	/^    public synchronized void paint(Graphics g) {$/;"	m	class:FastDisplay
paintComponent	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void paintComponent(Graphics g) {$/;"	m	class:ImagePanel
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, Color value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, Matrix4 value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, Point3 value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, String type, String interpolation, float[] data) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, String value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, String[] value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, Vector3 value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, boolean value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, float value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, int value) {$/;"	m	class:SunflowAPI
parameter	src/org/sunflow/SunflowAPI.java	/^    public final void parameter(String name, int[] value) {$/;"	m	class:SunflowAPI
parameterList	src/org/sunflow/SunflowAPI.java	/^    private ParameterList parameterList;$/;"	f	class:SunflowAPI	file:
parse	src/org/sunflow/SunflowAPI.java	/^    public final boolean parse(String filename) {$/;"	m	class:SunflowAPI
parse	src/org/sunflow/core/SceneParser.java	/^    public boolean parse(String filename, SunflowAPI api);$/;"	m	interface:SceneParser
parse	src/org/sunflow/core/parser/RA2Parser.java	/^    public boolean parse(String filename, SunflowAPI api) {$/;"	m	class:RA2Parser
parse	src/org/sunflow/core/parser/RA3Parser.java	/^    public boolean parse(String filename, SunflowAPI api) {$/;"	m	class:RA3Parser
parse	src/org/sunflow/core/parser/SCParser.java	/^    public boolean parse(String filename, SunflowAPI api) {$/;"	m	class:SCParser
parse	src/org/sunflow/core/parser/ShaveRibParser.java	/^    public boolean parse(String filename, SunflowAPI api) {$/;"	m	class:ShaveRibParser
parse	src/org/sunflow/core/parser/TriParser.java	/^    public boolean parse(String filename, SunflowAPI api) {$/;"	m	class:TriParser
parseBackgroundBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseBackgroundBlock(SunflowAPI api) throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseCamera	src/org/sunflow/core/parser/SCParser.java	/^    private void parseCamera(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseCameraMatrix	src/org/sunflow/core/parser/SCParser.java	/^    private void parseCameraMatrix(int index, SunflowAPI api) throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseCameraTransform	src/org/sunflow/core/parser/SCParser.java	/^    private void parseCameraTransform(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseColor	src/org/sunflow/core/parser/SCParser.java	/^    private Color parseColor() throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseFilter	src/org/sunflow/core/parser/SCParser.java	/^    private void parseFilter(SunflowAPI api) throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseFloatArray	src/org/sunflow/core/parser/SCParser.java	/^    private float[] parseFloatArray(int size) throws IOException {$/;"	m	class:SCParser	file:
parseFloatArray	src/org/sunflow/core/parser/ShaveRibParser.java	/^    private float[] parseFloatArray(Parser p) throws IOException {$/;"	m	class:ShaveRibParser	file:
parseFloatArray	src/org/sunflow/core/tesselatable/Gumbo.java	/^    private static float[] parseFloatArray(Parser p) throws IOException {$/;"	m	class:Gumbo	file:
parseGIBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseGIBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseImageBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseImageBlock(SunflowAPI api) throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseInstanceBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseInstanceBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseIntArray	src/org/sunflow/core/parser/SCParser.java	/^    private int[] parseIntArray(int size) throws IOException {$/;"	m	class:SCParser	file:
parseIntArray	src/org/sunflow/core/parser/ShaveRibParser.java	/^    private int[] parseIntArray(Parser p) throws IOException {$/;"	m	class:ShaveRibParser	file:
parseLightBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseLightBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseLightserverBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseLightserverBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseMatrix	src/org/sunflow/core/parser/SCParser.java	/^    private Matrix4 parseMatrix() throws IOException, ParserException {$/;"	m	class:SCParser	file:
parseModifier	src/org/sunflow/core/parser/SCParser.java	/^    private boolean parseModifier(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseObjectBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseObjectBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parsePhotonBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parsePhotonBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parsePoint	src/org/sunflow/core/parser/SCParser.java	/^    private Point3 parsePoint() throws IOException {$/;"	m	class:SCParser	file:
parseShader	src/org/sunflow/core/parser/SCParser.java	/^    private boolean parseShader(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseTraceBlock	src/org/sunflow/core/parser/SCParser.java	/^    private void parseTraceBlock(SunflowAPI api) throws ParserException, IOException {$/;"	m	class:SCParser	file:
parseVector	src/org/sunflow/core/parser/SCParser.java	/^    private Vector3 parseVector() throws IOException {$/;"	m	class:SCParser	file:
particles	src/org/sunflow/core/primitive/ParticleSurface.java	/^    private float[] particles;$/;"	f	class:ParticleSurface	file:
patches	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private float[][] patches;$/;"	f	class:BezierMesh	file:
peekNextToken	src/org/sunflow/system/Parser.java	/^    public boolean peekNextToken(String tok) throws IOException {$/;"	m	class:Parser
perezFunction	src/org/sunflow/core/light/SunSkyLight.java	/^    private double perezFunction(final double[] lam, double theta, double gamma, double lvz) {$/;"	m	class:SunSkyLight	file:
perezY	src/org/sunflow/core/light/SunSkyLight.java	/^    private final double[] perezY = new double[5];$/;"	f	class:SunSkyLight	file:
perezx	src/org/sunflow/core/light/SunSkyLight.java	/^    private final double[] perezx = new double[5];$/;"	f	class:SunSkyLight	file:
perezy	src/org/sunflow/core/light/SunSkyLight.java	/^    private final double[] perezy = new double[5];$/;"	f	class:SunSkyLight	file:
photonCounter	src/org/sunflow/core/LightServer.java	/^    private int photonCounter;$/;"	f	class:LightServer	file:
photonList	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private ArrayList<Photon> photonList;$/;"	f	class:CausticPhotonMap	file:
photonList	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private ArrayList<Photon> photonList;$/;"	f	class:GlobalPhotonMap	file:
photons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private Photon[] photons;$/;"	f	class:CausticPhotonMap	file:
photons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private Photon[] photons;$/;"	f	class:GlobalPhotonMap	file:
pix	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float pix, piy, piz;$/;"	f	class:IrradianceCacheGIEngine.Sample
pixels	src/org/sunflow/core/display/FastDisplay.java	/^    private int[] pixels;$/;"	f	class:FastDisplay	file:
pixels	src/org/sunflow/image/Bitmap.java	/^    private int[] pixels;$/;"	f	class:Bitmap	file:
piy	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float pix, piy, piz;$/;"	f	class:IrradianceCacheGIEngine.Sample
piz	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float pix, piy, piz;$/;"	f	class:IrradianceCacheGIEngine.Sample
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(Point2 p, float periodx, float periody) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(Point3 p, Vector3 period) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(Point3 p, float t, Vector3 pperiod, float tperiod) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(float xi, float period) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(float xi, float yi, float w, float h) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(float xi, float yi, float zi, float ti, float w, float h, float d, float p) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float pnoise(float xi, float yi, float zi, float w, float h, float d) {$/;"	m	class:PerlinScalar
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(Point2 p, float periodx, float periody) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(Point3 p, Vector3 period) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(Point3 p, float t, Vector3 pperiod, float tperiod) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(float x, float period) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(float x, float y, float w, float h) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(float x, float y, float z, float t, float w, float h, float d, float p) {$/;"	m	class:PerlinVector
pnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 pnoise(float x, float y, float z, float w, float h, float d) {$/;"	m	class:PerlinVector
points	src/org/sunflow/core/primitive/Hair.java	/^    private float[] points;$/;"	f	class:Hair	file:
points	src/org/sunflow/core/primitive/QuadMesh.java	/^    protected float[] points;$/;"	f	class:QuadMesh
points	src/org/sunflow/core/primitive/TriangleMesh.java	/^    protected float[] points;$/;"	f	class:TriangleMesh
power	src/org/sunflow/core/gi/InstantGI.java	/^        Color power;$/;"	f	class:InstantGI.PointLight
power	src/org/sunflow/core/light/PointLight.java	/^    private Color power;$/;"	f	class:PointLight	file:
power	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        int power;$/;"	f	class:CausticPhotonMap.Photon
power	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        int power;$/;"	f	class:GlobalPhotonMap.Photon
power	src/org/sunflow/core/shader/PhongShader.java	/^    private float power;$/;"	f	class:PhongShader	file:
precomputeRadiance	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public void precomputeRadiance() {$/;"	m	class:GlobalPhotonMap
precomputeRadiance	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public void precomputeRadiance(boolean includeDirect, boolean includeCaustics) {$/;"	m	class:GridPhotonMap
prepare	src/org/sunflow/core/ImageSampler.java	/^    public boolean prepare(Options options, Scene scene, int w, int h);$/;"	m	interface:ImageSampler
prepare	src/org/sunflow/core/PhotonStore.java	/^    void prepare(BoundingBox sceneBounds);$/;"	m	interface:PhotonStore
prepare	src/org/sunflow/core/gi/InstantGI.java	/^        public void prepare(BoundingBox sceneBounds) {$/;"	m	class:InstantGI.PointLightStore
prepare	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public void prepare(BoundingBox sceneBounds) {$/;"	m	class:CausticPhotonMap
prepare	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public void prepare(BoundingBox sceneBounds) {$/;"	m	class:GlobalPhotonMap
prepare	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public void prepare(BoundingBox sceneBounds) {$/;"	m	class:GridPhotonMap
prepare	src/org/sunflow/core/renderer/BucketRenderer.java	/^    public boolean prepare(Options options, Scene scene, int w, int h) {$/;"	m	class:BucketRenderer
prepare	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    public boolean prepare(Options options, Scene scene, int w, int h) {$/;"	m	class:ProgressiveRenderer
prepare	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    public boolean prepare(Options options, Scene scene, int w, int h) {$/;"	m	class:SimpleRenderer
prepareShadingState	src/org/sunflow/core/Geometry.java	/^    void prepareShadingState(ShadingState state) {$/;"	m	class:Geometry
prepareShadingState	src/org/sunflow/core/Instance.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Instance
prepareShadingState	src/org/sunflow/core/InstanceList.java	/^    public final void prepareShadingState(ShadingState state) {$/;"	m	class:InstanceList
prepareShadingState	src/org/sunflow/core/PrimitiveList.java	/^    public void prepareShadingState(ShadingState state);$/;"	m	interface:PrimitiveList
prepareShadingState	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:ImageBasedLight
prepareShadingState	src/org/sunflow/core/light/SunSkyLight.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:SunSkyLight
prepareShadingState	src/org/sunflow/core/primitive/Background.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Background
prepareShadingState	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:BanchoffSurface
prepareShadingState	src/org/sunflow/core/primitive/Box.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Box
prepareShadingState	src/org/sunflow/core/primitive/CornellBox.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:CornellBox
prepareShadingState	src/org/sunflow/core/primitive/CubeGrid.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:CubeGrid
prepareShadingState	src/org/sunflow/core/primitive/Hair.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Hair
prepareShadingState	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:JuliaFractal
prepareShadingState	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:ParticleSurface
prepareShadingState	src/org/sunflow/core/primitive/Plane.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Plane
prepareShadingState	src/org/sunflow/core/primitive/QuadMesh.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:QuadMesh
prepareShadingState	src/org/sunflow/core/primitive/Sphere.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Sphere
prepareShadingState	src/org/sunflow/core/primitive/Torus.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:Torus
prepareShadingState	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public void prepareShadingState(ShadingState state) {$/;"	m	class:TriangleMesh.BakingSurface
prepareShadingState	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:TriangleMesh
prepareShadingState	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public void prepareShadingState(ShadingState state) {$/;"	m	class:BezierMesh
primitiveID	src/org/sunflow/core/ShadingState.java	/^    private int primitiveID;$/;"	f	class:ShadingState	file:
primitiveList	src/org/sunflow/core/accel/KDTree.java	/^    private PrimitiveList primitiveList;$/;"	f	class:KDTree	file:
primitives	src/org/sunflow/core/Geometry.java	/^    private PrimitiveList primitives;$/;"	f	class:Geometry	file:
primitives	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private PrimitiveList primitives;$/;"	f	class:BoundingIntervalHierarchy	file:
primitives	src/org/sunflow/core/accel/KDTree.java	/^    private int[] primitives;$/;"	f	class:KDTree	file:
primitives	src/org/sunflow/core/accel/NullAccelerator.java	/^    private PrimitiveList primitives;$/;"	f	class:NullAccelerator	file:
primitives	src/org/sunflow/core/accel/UniformGrid.java	/^    private PrimitiveList primitives;$/;"	f	class:UniformGrid	file:
print	src/SunflowGUI.java	/^    public void print(Module m, PrintLevel level, String s) {$/;"	m	class:SunflowGUI
print	src/org/sunflow/Benchmark.java	/^    public void print(Module m, PrintLevel level, String s) {$/;"	m	class:Benchmark
print	src/org/sunflow/system/UserInterface.java	/^    void print(Module m, PrintLevel level, String s);$/;"	m	interface:UserInterface
print	src/org/sunflow/system/ui/ConsoleInterface.java	/^    public void print(Module m, PrintLevel level, String s) {$/;"	m	class:ConsoleInterface
print	src/org/sunflow/system/ui/SilentInterface.java	/^    public void print(Module m, PrintLevel level, String s) {$/;"	m	class:SilentInterface
printDetailed	src/org/sunflow/system/UI.java	/^    public final static synchronized void printDetailed(Module m, String s, Object... args) {$/;"	m	class:UI
printError	src/org/sunflow/system/UI.java	/^    public final static synchronized void printError(Module m, String s, Object... args) {$/;"	m	class:UI
printInfo	src/org/sunflow/system/UI.java	/^    public final static synchronized void printInfo(Module m, String s, Object... args) {$/;"	m	class:UI
printStats	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        void printStats() {$/;"	m	class:BoundingIntervalHierarchy.BuildStats
printStats	src/org/sunflow/core/accel/KDTree.java	/^        void printStats() {$/;"	m	class:KDTree.BuildStats
printWarning	src/org/sunflow/system/UI.java	/^    public final static synchronized void printWarning(Module m, String s, Object... args) {$/;"	m	class:UI
println	src/SunflowGUI.java	/^    private void println(final String s) {$/;"	m	class:SunflowGUI	file:
processed	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final boolean processed() {$/;"	m	class:BucketRenderer.ImageSample
progressiveRenderNext	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int progressiveRenderNext(IntersectionState istate) {$/;"	m	class:ProgressiveRenderer	file:
progressiveRenderer	src/org/sunflow/SunflowAPI.java	/^    private ProgressiveRenderer progressiveRenderer;$/;"	f	class:SunflowAPI	file:
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Camera camera) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Instance instance) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, LightSource light) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Modifier modifier) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Options options) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, PrimitiveList primitives) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Shader shader) {$/;"	m	class:RenderObjectMap
put	src/org/sunflow/RenderObjectMap.java	/^    final void put(String name, Tesselatable tesselatable) {$/;"	m	class:RenderObjectMap
px	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float px, py, pz;$/;"	f	class:CausticPhotonMap.NearestPhotons
px	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float px, py, pz;$/;"	f	class:GlobalPhotonMap.NearestPhotons
py	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float px, py, pz;$/;"	f	class:CausticPhotonMap.NearestPhotons
py	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float px, py, pz;$/;"	f	class:GlobalPhotonMap.NearestPhotons
pz	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float px, py, pz;$/;"	f	class:CausticPhotonMap.NearestPhotons
pz	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float px, py, pz;$/;"	f	class:GlobalPhotonMap.NearestPhotons
qmcD0I	src/org/sunflow/core/ShadingState.java	/^    private double qmcD0I;$/;"	f	class:ShadingState	file:
qmcD1I	src/org/sunflow/core/ShadingState.java	/^    private double qmcD1I;$/;"	f	class:ShadingState	file:
quadSideLength	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float quadSideLength;$/;"	f	class:IrradianceCacheGIEngine.Node
quads	src/org/sunflow/core/primitive/QuadMesh.java	/^    protected int[] quads;$/;"	f	class:QuadMesh
quads	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private boolean quads;$/;"	f	class:BezierMesh	file:
r	src/org/sunflow/core/ShadingState.java	/^    private Ray r;$/;"	f	class:ShadingState	file:
r	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private float r, r2;$/;"	f	class:DirectionalSpotlight	file:
r	src/org/sunflow/core/primitive/ParticleSurface.java	/^    private float r, r2;$/;"	f	class:ParticleSurface	file:
r	src/org/sunflow/image/Color.java	/^    private float r, g, b;$/;"	f	class:Color	file:
r2	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private float r, r2;$/;"	f	class:DirectionalSpotlight	file:
r2	src/org/sunflow/core/light/SphereLight.java	/^    private float r2;$/;"	f	class:SphereLight	file:
r2	src/org/sunflow/core/primitive/ParticleSurface.java	/^    private float r, r2;$/;"	f	class:ParticleSurface	file:
radiance	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private Color radiance;$/;"	f	class:DirectionalSpotlight	file:
radiance	src/org/sunflow/core/light/SphereLight.java	/^    private Color radiance;$/;"	f	class:SphereLight	file:
radiance	src/org/sunflow/core/light/TriangleMeshLight.java	/^    private Color radiance;$/;"	f	class:TriangleMeshLight	file:
radiance	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^        Color radiance;$/;"	f	class:GridPhotonMap.PhotonGroup
radiance	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color radiance;$/;"	f	class:CornellBox	file:
radius	src/org/sunflow/core/light/SphereLight.java	/^    private float radius;$/;"	f	class:SphereLight	file:
radix12	src/org/sunflow/core/accel/KDTree.java	/^    private static void radix12(long[] splits, int n) {$/;"	m	class:KDTree	file:
readFlatRGBE	src/org/sunflow/image/Bitmap.java	/^    private void readFlatRGBE(FileInputStream f, int rasterPos, int numPixels) throws IOException {$/;"	m	class:Bitmap	file:
rebuildAccel	src/org/sunflow/core/Scene.java	/^    private boolean rebuildAccel;$/;"	f	class:Scene	file:
rebuildInstanceList	src/org/sunflow/RenderObjectMap.java	/^    private boolean rebuildInstanceList;$/;"	f	class:RenderObjectMap	file:
rebuildLightList	src/org/sunflow/RenderObjectMap.java	/^    private boolean rebuildLightList;$/;"	f	class:RenderObjectMap	file:
referenceImage	src/org/sunflow/Benchmark.java	/^    private int[] referenceImage;$/;"	f	class:Benchmark	file:
refineSamples	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private void refineSamples(ImageSample[] samples, int sbw, int x, int y, int stepSize, float thresh, IntersectionState istate) {$/;"	m	class:BucketRenderer	file:
refl	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    private float refl;$/;"	f	class:ShinyDiffuseShader	file:
reflectionDepth	src/org/sunflow/core/ShadingState.java	/^    private int reflectionDepth;$/;"	f	class:ShadingState	file:
refractionDepth	src/org/sunflow/core/ShadingState.java	/^    private int refractionDepth;$/;"	f	class:ShadingState	file:
remove	src/org/sunflow/RenderObjectMap.java	/^    final void remove(String name) {$/;"	m	class:RenderObjectMap
remove	src/org/sunflow/SunflowAPI.java	/^    public void remove(String name) {$/;"	m	class:SunflowAPI
remove	src/org/sunflow/core/ShadingState.java	/^        public void remove() {$/;"	m	class:ShadingState.LightSampleIterator
removeModifier	src/org/sunflow/core/Instance.java	/^    public void removeModifier(Modifier m) {$/;"	m	class:Instance
removeShader	src/org/sunflow/core/Instance.java	/^    public void removeShader(Shader s) {$/;"	m	class:Instance
render	src/org/sunflow/SunflowAPI.java	/^    public final void render(String optionsName, Display display) {$/;"	m	class:SunflowAPI
render	src/org/sunflow/core/ImageSampler.java	/^    public void render(Display display);$/;"	m	interface:ImageSampler
render	src/org/sunflow/core/Scene.java	/^    public void render(Options options, ImageSampler sampler, Display display) {$/;"	m	class:Scene
render	src/org/sunflow/core/renderer/BucketRenderer.java	/^    public void render(Display display) {$/;"	m	class:BucketRenderer
render	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    public void render(Display display) {$/;"	m	class:ProgressiveRenderer
render	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    public void render(Display display) {$/;"	m	class:SimpleRenderer
renderBucket	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private void renderBucket(Display display, int bx, int by, int threadID, IntersectionState istate) {$/;"	m	class:BucketRenderer	file:
renderBucket	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    public void renderBucket(int bx, int by, IntersectionState istate) {$/;"	m	class:SimpleRenderer
renderButton	src/SunflowGUI.java	/^    private JButton renderButton;$/;"	f	class:SunflowGUI	file:
renderMenuItem	src/SunflowGUI.java	/^    private JMenuItem renderMenuItem;$/;"	f	class:SunflowGUI	file:
renderMenuItemActionPerformed	src/SunflowGUI.java	/^    private void renderMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
renderObjects	src/org/sunflow/RenderObjectMap.java	/^    private Map<String, RenderObjectHandle> renderObjects;$/;"	f	class:RenderObjectMap	file:
renderObjects	src/org/sunflow/SunflowAPI.java	/^    private RenderObjectMap renderObjects;$/;"	f	class:SunflowAPI	file:
rendererPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel rendererPanel;$/;"	f	class:RenderGlobalsPanel	file:
repaintCounter	src/org/sunflow/system/ImagePanel.java	/^    private long repaintCounter;$/;"	f	class:ImagePanel	file:
requiresPhotons	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    public boolean requiresPhotons() {$/;"	m	class:PathTracingGIEngine
reset	src/org/sunflow/SunflowAPI.java	/^    public final void reset() {$/;"	m	class:SunflowAPI
reset	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        void reset(Point3 p, float maxDist2) {$/;"	m	class:CausticPhotonMap.NearestPhotons
reset	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        void reset(Point3 p, float maxDist2) {$/;"	m	class:GlobalPhotonMap.NearestPhotons
reset	src/org/sunflow/system/ImagePanel.java	/^    public synchronized void reset() {$/;"	m	class:ImagePanel
resetSearchPath	src/org/sunflow/system/SearchPath.java	/^    public void resetSearchPath() {$/;"	m	class:SearchPath
resetZoomMenuItem	src/SunflowGUI.java	/^    private JMenuItem resetZoomMenuItem;$/;"	f	class:SunflowGUI	file:
resolution	src/org/sunflow/Benchmark.java	/^    private int resolution;$/;"	f	class:Benchmark	file:
resolutionCheckBox	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JCheckBox resolutionCheckBox;$/;"	f	class:RenderGlobalsPanel	file:
resolutionPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel resolutionPanel;$/;"	f	class:RenderGlobalsPanel	file:
resolutionXTextField	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JTextField resolutionXTextField;$/;"	f	class:RenderGlobalsPanel	file:
resolutionYTextField	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JTextField resolutionYTextField;$/;"	f	class:RenderGlobalsPanel	file:
resolveIncludeFilename	src/org/sunflow/SunflowAPI.java	/^    public final String resolveIncludeFilename(String filename) {$/;"	m	class:SunflowAPI
resolvePath	src/org/sunflow/system/SearchPath.java	/^    public String resolvePath(String filename) {$/;"	m	class:SearchPath
resolveTextureFilename	src/org/sunflow/SunflowAPI.java	/^    public final String resolveTextureFilename(String filename) {$/;"	m	class:SunflowAPI
result	src/org/sunflow/core/ShadingState.java	/^    private Color result;$/;"	f	class:ShadingState	file:
rgbToLinear	src/org/sunflow/image/RGBSpace.java	/^    public final int rgbToLinear(int rgb) {$/;"	m	class:RGBSpace
rgbToNonLinear	src/org/sunflow/image/RGBSpace.java	/^    public final int rgbToNonLinear(int rgb) {$/;"	m	class:RGBSpace
rhoD	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private Color rhoD; \/\/ diffuse reflectance$/;"	f	class:AnisotropicWardShader	file:
rhoS	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    private Color rhoS; \/\/ specular reflectance$/;"	f	class:AnisotropicWardShader	file:
ri	src/org/sunflow/core/primitive/Torus.java	/^    private float ri, ro;$/;"	f	class:Torus	file:
ri2	src/org/sunflow/core/primitive/Torus.java	/^    private float ri2, ro2;$/;"	f	class:Torus	file:
riLP	src/org/sunflow/math/QMC.java	/^    public static double riLP(int i, int r) {$/;"	m	class:QMC
riS	src/org/sunflow/math/QMC.java	/^    public static double riS(int i, int r) {$/;"	m	class:QMC
riVDC	src/org/sunflow/math/QMC.java	/^    public static double riVDC(int bits, int r) {$/;"	m	class:QMC
right	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color left, right, top, bottom, back;$/;"	f	class:CornellBox	file:
rleCompress	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private static final int rleCompress(byte[] in, int inLen, byte[] out) {$/;"	m	class:OpenExrDisplay	file:
ro	src/org/sunflow/core/primitive/Torus.java	/^    private float ri, ro;$/;"	f	class:Torus	file:
ro2	src/org/sunflow/core/primitive/Torus.java	/^    private float ri2, ro2;$/;"	f	class:Torus	file:
root	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private Node root;$/;"	f	class:IrradianceCacheGIEngine	file:
rotate	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 rotate(float x, float y, float z, float theta) {$/;"	m	class:Matrix4
rotateX	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 rotateX(float theta) {$/;"	m	class:Matrix4
rotateY	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 rotateY(float theta) {$/;"	m	class:Matrix4
rotateZ	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 rotateZ(float theta) {$/;"	m	class:Matrix4
rstack	src/org/sunflow/core/IntersectionState.java	/^    private final float[] rstack;$/;"	f	class:IntersectionState	file:
run	src/org/sunflow/core/renderer/BucketRenderer.java	/^        public void run() {$/;"	m	class:BucketRenderer.BucketThread
run	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        public void run() {$/;"	m	class:ProgressiveRenderer.SmallBucketThread
run	src/org/sunflow/core/renderer/SimpleRenderer.java	/^        public void run() {$/;"	m	class:SimpleRenderer.BucketThread
runSystemCheck	src/org/sunflow/SunflowAPI.java	/^    public static void runSystemCheck() {$/;"	m	class:SunflowAPI
rw	src/org/sunflow/image/RGBSpace.java	/^    private final float rw, gw, bw;$/;"	f	class:RGBSpace	file:
rwl	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private ReentrantReadWriteLock rwl;$/;"	f	class:IrradianceCacheGIEngine	file:
rwl	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    private ReentrantReadWriteLock rwl;$/;"	f	class:GridPhotonMap	file:
rx	src/org/sunflow/core/ShadingState.java	/^    private float rx, ry;$/;"	f	class:ShadingState	file:
rx	src/org/sunflow/core/renderer/BucketRenderer.java	/^        float rx, ry;$/;"	f	class:BucketRenderer.ImageSample
rx	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
ry	src/org/sunflow/core/ShadingState.java	/^    private float rx, ry;$/;"	f	class:ShadingState	file:
ry	src/org/sunflow/core/renderer/BucketRenderer.java	/^        float rx, ry;$/;"	f	class:BucketRenderer.ImageSample
ry	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
rz	src/org/sunflow/image/RGBSpace.java	/^    private final float rx, ry, rz, gx, gy, gz, bx, by, bz;$/;"	f	class:RGBSpace	file:
s	src/org/sunflow/core/LightServer.java	/^        Shader s;$/;"	f	class:LightServer.Sample
s	src/org/sunflow/core/filter/BlackmanHarrisFilter.java	/^    private float s, inv;$/;"	f	class:BlackmanHarrisFilter	file:
s	src/org/sunflow/core/filter/BoxFilter.java	/^    private float s;$/;"	f	class:BoxFilter	file:
s	src/org/sunflow/core/filter/GaussianFilter.java	/^    private float s;$/;"	f	class:GaussianFilter	file:
s	src/org/sunflow/core/filter/SincFilter.java	/^    private float s;$/;"	f	class:SincFilter	file:
s	src/org/sunflow/core/filter/TriangleFilter.java	/^    private float s, inv;$/;"	f	class:TriangleFilter	file:
sample	src/org/sunflow/image/BlackbodySpectrum.java	/^    public float sample(float lambda) {$/;"	m	class:BlackbodySpectrum
sample	src/org/sunflow/image/ChromaticitySpectrum.java	/^    public float sample(float lambda) {$/;"	m	class:ChromaticitySpectrum
sample	src/org/sunflow/image/ConstantSpectralCurve.java	/^    public float sample(float lambda) {$/;"	m	class:ConstantSpectralCurve
sample	src/org/sunflow/image/IrregularSpectralCurve.java	/^    public float sample(float lambda) {$/;"	m	class:IrregularSpectralCurve
sample	src/org/sunflow/image/RegularSpectralCurve.java	/^    public float sample(float lambda) {$/;"	m	class:RegularSpectralCurve
sample	src/org/sunflow/image/SpectralCurve.java	/^    public abstract float sample(float lambda);$/;"	m	class:SpectralCurve
sampled	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final boolean sampled() {$/;"	m	class:BucketRenderer.ImageSample
samples	src/org/sunflow/core/gi/AmbientOcclusionGIEngine.java	/^    private int samples;$/;"	f	class:AmbientOcclusionGIEngine	file:
samples	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private int samples;$/;"	f	class:IrradianceCacheGIEngine	file:
samples	src/org/sunflow/core/gi/PathTracingGIEngine.java	/^    private int samples;$/;"	f	class:PathTracingGIEngine	file:
samples	src/org/sunflow/core/light/ImageBasedLight.java	/^    private Vector3[] samples;$/;"	f	class:ImageBasedLight	file:
samples	src/org/sunflow/core/primitive/CornellBox.java	/^    private int samples;$/;"	f	class:CornellBox	file:
samples	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    private int samples;$/;"	f	class:AmbientOcclusionShader	file:
samplingPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel samplingPanel;$/;"	f	class:RenderGlobalsPanel	file:
save	src/org/sunflow/image/Bitmap.java	/^    public static void save(BufferedImage image, String filename) {$/;"	m	class:Bitmap
save	src/org/sunflow/image/Bitmap.java	/^    public void save(String filename) {$/;"	m	class:Bitmap
save	src/org/sunflow/system/ImagePanel.java	/^    public void save(String filename) {$/;"	m	class:ImagePanel
saveAsMenuItem	src/SunflowGUI.java	/^    private JMenuItem saveAsMenuItem;$/;"	f	class:SunflowGUI	file:
saveAsMenuItemActionPerformed	src/SunflowGUI.java	/^    private void saveAsMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
saveCurrentFile	src/SunflowGUI.java	/^    private void saveCurrentFile(String filename) {$/;"	m	class:SunflowGUI	file:
saveHDR	src/org/sunflow/image/Bitmap.java	/^    private void saveHDR(String filename) {$/;"	m	class:Bitmap	file:
saveMenuItem	src/SunflowGUI.java	/^    private JMenuItem saveMenuItem;$/;"	f	class:SunflowGUI	file:
saveOutput	src/org/sunflow/Benchmark.java	/^    private boolean saveOutput;$/;"	f	class:Benchmark	file:
savePNG	src/org/sunflow/image/Bitmap.java	/^    private void savePNG(String filename) {$/;"	m	class:Bitmap	file:
saveTGA	src/org/sunflow/image/Bitmap.java	/^    private void saveTGA(String filename) {$/;"	m	class:Bitmap	file:
scale	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^    private float scale;$/;"	f	class:BumpMappingModifier	file:
scale	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final void scale(float s) {$/;"	m	class:BucketRenderer.ImageSample
scale	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 scale(float s) {$/;"	m	class:Matrix4
scale	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 scale(float sx, float sy, float sz) {$/;"	m	class:Matrix4
scatterPhoton	src/org/sunflow/core/Shader.java	/^    public void scatterPhoton(ShadingState state, Color power);$/;"	m	interface:Shader
scatterPhoton	src/org/sunflow/core/light/ImageBasedLight.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ImageBasedLight
scatterPhoton	src/org/sunflow/core/light/SphereLight.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:SphereLight
scatterPhoton	src/org/sunflow/core/light/SunSkyLight.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:SunSkyLight
scatterPhoton	src/org/sunflow/core/light/TriangleMeshLight.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:TriangleMeshLight
scatterPhoton	src/org/sunflow/core/primitive/CornellBox.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:CornellBox
scatterPhoton	src/org/sunflow/core/primitive/Hair.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:Hair
scatterPhoton	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:AmbientOcclusionShader
scatterPhoton	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:AnisotropicWardShader
scatterPhoton	src/org/sunflow/core/shader/ConstantShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ConstantShader
scatterPhoton	src/org/sunflow/core/shader/DiffuseShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:DiffuseShader
scatterPhoton	src/org/sunflow/core/shader/GlassShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:GlassShader
scatterPhoton	src/org/sunflow/core/shader/IDShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:IDShader
scatterPhoton	src/org/sunflow/core/shader/MirrorShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:MirrorShader
scatterPhoton	src/org/sunflow/core/shader/NormalShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:NormalShader
scatterPhoton	src/org/sunflow/core/shader/PhongShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:PhongShader
scatterPhoton	src/org/sunflow/core/shader/PrimIDShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:PrimIDShader
scatterPhoton	src/org/sunflow/core/shader/QuickGrayShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:QuickGrayShader
scatterPhoton	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ShinyDiffuseShader
scatterPhoton	src/org/sunflow/core/shader/SimpleShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:SimpleShader
scatterPhoton	src/org/sunflow/core/shader/UVShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:UVShader
scatterPhoton	src/org/sunflow/core/shader/UberShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:UberShader
scatterPhoton	src/org/sunflow/core/shader/ViewCausticsShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ViewCausticsShader
scatterPhoton	src/org/sunflow/core/shader/ViewGlobalPhotonsShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ViewGlobalPhotonsShader
scatterPhoton	src/org/sunflow/core/shader/ViewIrradianceShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:ViewIrradianceShader
scatterPhoton	src/org/sunflow/core/shader/WireframeShader.java	/^    public void scatterPhoton(ShadingState state, Color power) {$/;"	m	class:WireframeShader
scene	src/org/sunflow/SunflowAPI.java	/^    private Scene scene;$/;"	f	class:SunflowAPI	file:
scene	src/org/sunflow/core/LightServer.java	/^    private Scene scene;$/;"	f	class:LightServer	file:
scene	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private Scene scene;$/;"	f	class:BucketRenderer	file:
scene	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private Scene scene;$/;"	f	class:ProgressiveRenderer	file:
scene	src/org/sunflow/core/renderer/SimpleRenderer.java	/^    private Scene scene;$/;"	f	class:SimpleRenderer	file:
sceneMenu	src/SunflowGUI.java	/^    private JMenu sceneMenu;$/;"	f	class:SunflowGUI	file:
searchPath	src/org/sunflow/system/SearchPath.java	/^    private LinkedList<String> searchPath;$/;"	f	class:SearchPath	file:
seconds	src/org/sunflow/core/display/FastDisplay.java	/^    private float seconds;$/;"	f	class:FastDisplay	file:
seconds	src/org/sunflow/system/Timer.java	/^    public double seconds() {$/;"	m	class:Timer
segmentOffset	src/org/sunflow/image/RGBSpace.java	/^    private final float slope, slopeMatch, segmentOffset;$/;"	f	class:RGBSpace	file:
selectFrame	src/SunflowGUI.java	/^    private void selectFrame(JInternalFrame frame) {$/;"	m	class:SunflowGUI	file:
server	src/org/sunflow/core/ShadingState.java	/^    private LightServer server;$/;"	f	class:ShadingState	file:
set	src/org/sunflow/core/renderer/BucketRenderer.java	/^        final void set(ShadingState state) {$/;"	m	class:BucketRenderer.ImageSample
set	src/org/sunflow/image/Color.java	/^    public final Color set(Color c) {$/;"	m	class:Color
set	src/org/sunflow/image/Color.java	/^    public final Color set(float r, float g, float b) {$/;"	m	class:Color
set	src/org/sunflow/math/Point2.java	/^    public final Point2 set(Point2 p) {$/;"	m	class:Point2
set	src/org/sunflow/math/Point2.java	/^    public final Point2 set(float x, float y) {$/;"	m	class:Point2
set	src/org/sunflow/math/Point3.java	/^    public final Point3 set(Point3 p) {$/;"	m	class:Point3
set	src/org/sunflow/math/Point3.java	/^    public final Point3 set(float x, float y, float z) {$/;"	m	class:Point3
set	src/org/sunflow/math/Vector3.java	/^    public final Vector3 set(Vector3 v) {$/;"	m	class:Vector3
set	src/org/sunflow/math/Vector3.java	/^    public final Vector3 set(float x, float y, float z) {$/;"	m	class:Vector3
set	src/org/sunflow/system/UI.java	/^    public final static void set(UserInterface ui) {$/;"	m	class:UI
set	src/org/sunflow/util/FloatArray.java	/^    public final void set(int index, float value) {$/;"	m	class:FloatArray
set	src/org/sunflow/util/IntArray.java	/^    public final void set(int index, int value) {$/;"	m	class:IntArray
setBakingInstance	src/org/sunflow/core/Scene.java	/^    public void setBakingInstance(Instance instance) {$/;"	m	class:Scene
setBasis	src/org/sunflow/core/ShadingState.java	/^    public final void setBasis(OrthoNormalBasis basis) {$/;"	m	class:ShadingState
setCamera	src/org/sunflow/core/Scene.java	/^    public void setCamera(Camera camera) {$/;"	m	class:Scene
setCurrentFrame	src/org/sunflow/SunflowAPI.java	/^    public void setCurrentFrame(int currentFrame) {$/;"	m	class:SunflowAPI
setDumpMode	src/org/sunflow/core/accel/KDTree.java	/^    public static void setDumpMode(boolean dump, String prefix) {$/;"	m	class:KDTree
setEnableInterface	src/SunflowGUI.java	/^    private void setEnableInterface(boolean enabled) {$/;"	m	class:SunflowGUI	file:
setFaceCount	src/org/sunflow/core/ParameterList.java	/^    public void setFaceCount(int numFaces) {$/;"	m	class:ParameterList
setFaceVertexCount	src/org/sunflow/core/ParameterList.java	/^    public void setFaceVertexCount(int numFaceVerts) {$/;"	m	class:ParameterList
setGamma	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void setGamma(float gamma) {$/;"	m	class:OpenExrDisplay
setInstanceLists	src/org/sunflow/core/Scene.java	/^    public void setInstanceLists(Instance[] instances, Instance[] infinite) {$/;"	m	class:Scene
setIntersection	src/org/sunflow/core/IntersectionState.java	/^    public final void setIntersection(int id, float u, float v) {$/;"	m	class:IntersectionState
setLightList	src/org/sunflow/core/Scene.java	/^    public void setLightList(LightSource[] lights) {$/;"	m	class:Scene
setLights	src/org/sunflow/core/LightServer.java	/^    void setLights(LightSource[] lights) {$/;"	m	class:LightServer
setMax	src/org/sunflow/core/Ray.java	/^    public final void setMax(float t) {$/;"	m	class:Ray
setModifier	src/org/sunflow/core/ShadingState.java	/^    public final void setModifier(Modifier modifier) {$/;"	m	class:ShadingState
setPixel	src/org/sunflow/image/Bitmap.java	/^    public void setPixel(int x, int y, Color c) {$/;"	m	class:Bitmap
setRGB	src/org/sunflow/image/Color.java	/^    public final Color setRGB(int rgb) {$/;"	m	class:Color
setRGBE	src/org/sunflow/image/Color.java	/^    public final Color setRGBE(int rgbe) {$/;"	m	class:Color
setRadiance	src/org/sunflow/core/LightSample.java	/^    public void setRadiance(Color d, Color s) {$/;"	m	class:LightSample
setRay	src/org/sunflow/core/ShadingState.java	/^    final void setRay(Ray r) {$/;"	m	class:ShadingState
setResult	src/org/sunflow/core/ShadingState.java	/^    final void setResult(Color c) {$/;"	m	class:ShadingState
setShader	src/org/sunflow/core/ShadingState.java	/^    public final void setShader(Shader shader) {$/;"	m	class:ShadingState
setShaderOverride	src/org/sunflow/core/LightServer.java	/^    void setShaderOverride(Shader shader, boolean photonOverride) {$/;"	m	class:LightServer
setShaderOverride	src/org/sunflow/core/Scene.java	/^    public void setShaderOverride(Shader shader, boolean photonOverride) {$/;"	m	class:Scene
setShadowRay	src/org/sunflow/core/LightSample.java	/^    public void setShadowRay(Ray shadowRay) {$/;"	m	class:LightSample
setSmallTriangles	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public static void setSmallTriangles(boolean smallTriangles) {$/;"	m	class:TriangleMesh
setSplitAxis	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        void setSplitAxis(int axis) {$/;"	m	class:CausticPhotonMap.Photon
setSplitAxis	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        void setSplitAxis(int axis) {$/;"	m	class:GlobalPhotonMap.Photon
setVertexCount	src/org/sunflow/core/ParameterList.java	/^    public void setVertexCount(int numVerts) {$/;"	m	class:ParameterList
shade	src/org/sunflow/core/ShadingState.java	/^    public final Color shade() {$/;"	m	class:ShadingState
shadeBakeResult	src/org/sunflow/core/LightServer.java	/^    void shadeBakeResult(ShadingState state) {$/;"	m	class:LightServer
shadeHit	src/org/sunflow/core/LightServer.java	/^    Color shadeHit(ShadingState state) {$/;"	m	class:LightServer
shadePhoton	src/org/sunflow/core/LightServer.java	/^    void shadePhoton(ShadingState state, Color power) {$/;"	m	class:LightServer
shader	src/org/sunflow/SunflowAPI.java	/^    public final void shader(String name, Shader shader) {$/;"	m	class:SunflowAPI
shader	src/org/sunflow/core/ShadingState.java	/^    private Shader shader;$/;"	f	class:ShadingState	file:
shader	src/org/sunflow/core/renderer/BucketRenderer.java	/^        Shader shader;$/;"	f	class:BucketRenderer.ImageSample
shaderOverride	src/org/sunflow/SunflowAPI.java	/^    public final void shaderOverride(String name, boolean photonOverride) {$/;"	m	class:SunflowAPI
shaderOverride	src/org/sunflow/core/LightServer.java	/^    private Shader shaderOverride;$/;"	f	class:LightServer	file:
shaderOverridePhotons	src/org/sunflow/core/LightServer.java	/^    private boolean shaderOverridePhotons;$/;"	f	class:LightServer	file:
shaders	src/org/sunflow/core/Instance.java	/^    private Shader[] shaders;$/;"	f	class:Instance	file:
shadingCache	src/org/sunflow/core/LightServer.java	/^    private CacheEntry[] shadingCache;$/;"	f	class:LightServer	file:
shadingCache	src/org/sunflow/core/LightServer.java	/^    void shadingCache(float shadingRate) {$/;"	m	class:LightServer
shadingCacheResolution	src/org/sunflow/core/LightServer.java	/^    private float shadingCacheResolution;$/;"	f	class:LightServer	file:
shadowRay	src/org/sunflow/core/LightSample.java	/^    private Ray shadowRay; \/\/ ray to be used to evaluate if the point is in$/;"	f	class:LightSample	file:
showBenchmarkOutput	src/org/sunflow/Benchmark.java	/^    private boolean showBenchmarkOutput;$/;"	f	class:Benchmark	file:
showOutput	src/org/sunflow/Benchmark.java	/^    private boolean showOutput;$/;"	f	class:Benchmark	file:
showStats	src/org/sunflow/core/LightServer.java	/^    void showStats() {$/;"	m	class:LightServer
sideLength	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^        float sideLength;$/;"	f	class:IrradianceCacheGIEngine.Node
sigma	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int[] sigma;$/;"	f	class:BucketRenderer	file:
sigma	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private int[] sigma;$/;"	f	class:ProgressiveRenderer	file:
sinc1d	src/org/sunflow/core/filter/LanczosFilter.java	/^    private float sinc1d(float x) {$/;"	m	class:LanczosFilter	file:
sinc1d	src/org/sunflow/core/filter/SincFilter.java	/^    private float sinc1d(float x) {$/;"	m	class:SincFilter	file:
size	src/org/sunflow/core/ParameterList.java	/^        private int size() {$/;"	m	class:ParameterList.Parameter	file:
size	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public int size() {$/;"	m	class:GridPhotonMap
size	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        int x, y, size;$/;"	f	class:ProgressiveRenderer.SmallBucket
size	src/org/sunflow/util/FloatArray.java	/^    private int size;$/;"	f	class:FloatArray	file:
size	src/org/sunflow/util/IntArray.java	/^    private int size;$/;"	f	class:IntArray	file:
sizeof	src/org/sunflow/system/Memory.java	/^    public static final String sizeof(int[] array) {$/;"	m	class:Memory
sky	src/org/sunflow/core/gi/FakeGIEngine.java	/^    private Color sky;$/;"	f	class:FakeGIEngine	file:
slope	src/org/sunflow/image/RGBSpace.java	/^    private final float slope, slopeMatch, segmentOffset;$/;"	f	class:RGBSpace	file:
slopeMatch	src/org/sunflow/image/RGBSpace.java	/^    private final float slope, slopeMatch, segmentOffset;$/;"	f	class:RGBSpace	file:
smallBucketQueue	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^    private PriorityBlockingQueue<SmallBucket> smallBucketQueue;$/;"	f	class:ProgressiveRenderer	file:
smallTriangles	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private static boolean smallTriangles = false;$/;"	f	class:TriangleMesh	file:
smallTrianglesMenuItem	src/SunflowGUI.java	/^    private JCheckBoxMenuItem smallTrianglesMenuItem;$/;"	f	class:SunflowGUI	file:
smallTrianglesMenuItemActionPerformed	src/SunflowGUI.java	/^    private void smallTrianglesMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
smooth	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private boolean smooth;$/;"	f	class:BezierMesh	file:
smoothNormals	src/org/sunflow/core/tesselatable/FileMesh.java	/^    private boolean smoothNormals = false;$/;"	f	class:FileMesh	file:
smoothStep	src/org/sunflow/math/MathUtils.java	/^    public static final float smoothStep(float a, float b, float x) {$/;"	m	class:MathUtils
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(Point2 p) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(Point3 p) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(Point3 p, float t) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(float x) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(float x, float y) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(float x, float y, float z) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float snoise(float x, float y, float z, float w) {$/;"	m	class:PerlinScalar
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(Point2 p) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(Point3 p) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(Point3 p, float t) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(float x) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(float x, float y) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(float x, float y, float z) {$/;"	m	class:PerlinVector
snoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 snoise(float x, float y, float z, float t) {$/;"	m	class:PerlinVector
solAmplitudes	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final float[] solAmplitudes = { 165.5f, 162.3f, 211.2f,$/;"	f	class:SunSkyLight	file:
solCurve	src/org/sunflow/core/light/SunSkyLight.java	/^    private static final RegularSpectralCurve solCurve = new RegularSpectralCurve(solAmplitudes, 380, 750);$/;"	f	class:SunSkyLight	file:
solveCubicForQuartic	src/org/sunflow/math/Solvers.java	/^    private static final double solveCubicForQuartic(double p, double q, double r) {$/;"	m	class:Solvers	file:
solveQuadric	src/org/sunflow/math/Solvers.java	/^    public static final double[] solveQuadric(double a, double b, double c) {$/;"	m	class:Solvers
solveQuartic	src/org/sunflow/math/Solvers.java	/^    public static double[] solveQuartic(double a, double b, double c, double d, double e) {$/;"	m	class:Solvers
spec	src/org/sunflow/core/shader/PhongShader.java	/^    private Color spec;$/;"	f	class:PhongShader	file:
spec	src/org/sunflow/core/shader/UberShader.java	/^    private Color spec;$/;"	f	class:UberShader	file:
specBlend	src/org/sunflow/core/shader/UberShader.java	/^    private float specBlend;$/;"	f	class:UberShader	file:
specmap	src/org/sunflow/core/shader/UberShader.java	/^    private Texture specmap;$/;"	f	class:UberShader	file:
spectrum	src/org/sunflow/image/RegularSpectralCurve.java	/^    private final float[] spectrum;$/;"	f	class:RegularSpectralCurve	file:
specularPhong	src/org/sunflow/core/ShadingState.java	/^    public final Color specularPhong(Color spec, float power, int numRays) {$/;"	m	class:ShadingState
sphere	src/org/sunflow/Benchmark.java	/^        private void sphere(String name, String shaderName, float x, float y, float z, float radius) {$/;"	m	class:Benchmark.BenchmarkScene	file:
splits	src/org/sunflow/core/accel/KDTree.java	/^        long[] splits;$/;"	f	class:KDTree.BuildTask
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(Point2 p, float periodx, float periody) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(Point3 p, Vector3 period) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(Point3 p, float t, Vector3 pperiod, float tperiod) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(float xi, float period) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(float xi, float yi, float w, float h) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(float xi, float yi, float zi, float ti, float w, float h, float d, float p) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinScalar.java	/^    public static final float spnoise(float xi, float yi, float zi, float w, float h, float d) {$/;"	m	class:PerlinScalar
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(Point2 p, float periodx, float periody) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(Point3 p, Vector3 period) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(Point3 p, float t, Vector3 pperiod, float tperiod) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(float x, float period) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(float x, float y, float w, float h) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(float x, float y, float z, float t, float w, float h, float d, float p) {$/;"	m	class:PerlinVector
spnoise	src/org/sunflow/math/PerlinVector.java	/^    public static final Vector3 spnoise(float x, float y, float z, float w, float h, float d) {$/;"	m	class:PerlinVector
src	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    private Point3 src;$/;"	f	class:DirectionalSpotlight	file:
stack	src/org/sunflow/core/IntersectionState.java	/^    private final StackNode[] stack;$/;"	f	class:IntersectionState	file:
start	src/org/sunflow/system/Timer.java	/^    public void start() {$/;"	m	class:Timer
startTime	src/org/sunflow/system/Timer.java	/^    private long startTime, endTime;$/;"	f	class:Timer	file:
store	src/org/sunflow/core/PhotonStore.java	/^    void store(ShadingState state, Vector3 dir, Color power, Color diffuse);$/;"	m	interface:PhotonStore
store	src/org/sunflow/core/gi/InstantGI.java	/^        public void store(ShadingState state, Vector3 dir, Color power, Color diffuse) {$/;"	m	class:InstantGI.PointLightStore
store	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    public void store(ShadingState state, Vector3 dir, Color power, Color diffuse) {$/;"	m	class:CausticPhotonMap
store	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    public void store(ShadingState state, Vector3 dir, Color power, Color diffuse) {$/;"	m	class:GlobalPhotonMap
store	src/org/sunflow/core/photonmap/GridPhotonMap.java	/^    public void store(ShadingState state, Vector3 dir, Color power, Color diffuse) {$/;"	m	class:GridPhotonMap
storePhoton	src/org/sunflow/core/ShadingState.java	/^    public final void storePhoton(Vector3 dir, Color power, Color diffuse) {$/;"	m	class:ShadingState
storedPhotons	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private int storedPhotons;$/;"	f	class:CausticPhotonMap	file:
storedPhotons	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private int storedPhotons;$/;"	f	class:GlobalPhotonMap	file:
sub	src/org/sunflow/image/Color.java	/^    public final Color sub(Color c) {$/;"	m	class:Color
sub	src/org/sunflow/image/Color.java	/^    public static final Color sub(Color c1, Color c2) {$/;"	m	class:Color
sub	src/org/sunflow/image/Color.java	/^    public static final Color sub(Color c1, Color c2, Color dest) {$/;"	m	class:Color
sub	src/org/sunflow/math/Point3.java	/^    public static final Vector3 sub(Point3 p1, Point3 p2, Vector3 dest) {$/;"	m	class:Point3
sub	src/org/sunflow/math/Vector3.java	/^    public static final Vector3 sub(Vector3 v1, Vector3 v2, Vector3 dest) {$/;"	m	class:Vector3
subPixelSize	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int subPixelSize;$/;"	f	class:BucketRenderer	file:
subdivide	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private void subdivide(int left, int right, IntArray tempTree, int[] indices, float[] gridBox, float[] nodeBox, int nodeIndex, int depth, BuildStats stats) {$/;"	m	class:BoundingIntervalHierarchy	file:
subdivs	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    private int subdivs;$/;"	f	class:BezierMesh	file:
sumDepth	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int sumDepth;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
sumDepth	src/org/sunflow/core/accel/KDTree.java	/^        private int sumDepth;$/;"	f	class:KDTree.BuildStats	file:
sumObjects	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        private int sumObjects;$/;"	f	class:BoundingIntervalHierarchy.BuildStats	file:
sumObjects	src/org/sunflow/core/accel/KDTree.java	/^        private int sumObjects;$/;"	f	class:KDTree.BuildStats	file:
sunColor	src/org/sunflow/core/light/SunSkyLight.java	/^    private Color sunColor;$/;"	f	class:SunSkyLight	file:
sunDir	src/org/sunflow/core/light/SunSkyLight.java	/^    private Vector3 sunDir;$/;"	f	class:SunSkyLight	file:
sunDirWorld	src/org/sunflow/core/light/SunSkyLight.java	/^    private Vector3 sunDirWorld;$/;"	f	class:SunSkyLight	file:
sunSpectralRadiance	src/org/sunflow/core/light/SunSkyLight.java	/^    private SpectralCurve sunSpectralRadiance;$/;"	f	class:SunSkyLight	file:
sunTheta	src/org/sunflow/core/light/SunSkyLight.java	/^    private float sunTheta;$/;"	f	class:SunSkyLight	file:
superSampling	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private int superSampling;$/;"	f	class:BucketRenderer	file:
swap	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^    private void swap(int i, int j) {$/;"	m	class:CausticPhotonMap	file:
swap	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^    private void swap(int i, int j) {$/;"	m	class:GlobalPhotonMap	file:
swapUV	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void swapUV() {$/;"	m	class:OrthoNormalBasis
swapVW	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void swapVW() {$/;"	m	class:OrthoNormalBasis
swapWU	src/org/sunflow/math/OrthoNormalBasis.java	/^    public void swapWU() {$/;"	m	class:OrthoNormalBasis
t	src/org/sunflow/core/display/FastDisplay.java	/^    private Timer t;$/;"	f	class:FastDisplay	file:
tMax	src/org/sunflow/core/Ray.java	/^    private float tMax;$/;"	f	class:Ray	file:
tMin	src/org/sunflow/core/Ray.java	/^    private float tMin;$/;"	f	class:Ray	file:
task	src/org/sunflow/system/ui/ConsoleInterface.java	/^    private String task;$/;"	f	class:ConsoleInterface	file:
taskCancel	src/org/sunflow/system/UI.java	/^    public final static synchronized void taskCancel() {$/;"	m	class:UI
taskCancelButton	src/SunflowGUI.java	/^    private JButton taskCancelButton;$/;"	f	class:SunflowGUI	file:
taskCanceled	src/org/sunflow/system/UI.java	/^    public final static synchronized boolean taskCanceled() {$/;"	m	class:UI
taskProgressBar	src/SunflowGUI.java	/^    private JProgressBar taskProgressBar;$/;"	f	class:SunflowGUI	file:
taskStart	src/SunflowGUI.java	/^    public void taskStart(String s, int min, int max) {$/;"	m	class:SunflowGUI
taskStart	src/org/sunflow/Benchmark.java	/^    public void taskStart(String s, int min, int max) {$/;"	m	class:Benchmark
taskStart	src/org/sunflow/system/UI.java	/^    public final static synchronized void taskStart(String s, int min, int max) {$/;"	m	class:UI
taskStart	src/org/sunflow/system/UserInterface.java	/^    void taskStart(String s, int min, int max);$/;"	m	interface:UserInterface
taskStart	src/org/sunflow/system/ui/ConsoleInterface.java	/^    public void taskStart(String s, int min, int max) {$/;"	m	class:ConsoleInterface
taskStart	src/org/sunflow/system/ui/SilentInterface.java	/^    public void taskStart(String s, int min, int max) {$/;"	m	class:SilentInterface
taskStop	src/SunflowGUI.java	/^    public void taskStop() {$/;"	m	class:SunflowGUI
taskStop	src/org/sunflow/Benchmark.java	/^    public void taskStop() {$/;"	m	class:Benchmark
taskStop	src/org/sunflow/system/UI.java	/^    public final static synchronized void taskStop() {$/;"	m	class:UI
taskStop	src/org/sunflow/system/UserInterface.java	/^    void taskStop();$/;"	m	interface:UserInterface
taskStop	src/org/sunflow/system/ui/ConsoleInterface.java	/^    public void taskStop() {$/;"	m	class:ConsoleInterface
taskStop	src/org/sunflow/system/ui/SilentInterface.java	/^    public void taskStop() {$/;"	m	class:SilentInterface
taskUpdate	src/SunflowGUI.java	/^    public void taskUpdate(int current) {$/;"	m	class:SunflowGUI
taskUpdate	src/org/sunflow/Benchmark.java	/^    public void taskUpdate(int current) {$/;"	m	class:Benchmark
taskUpdate	src/org/sunflow/system/UI.java	/^    public final static synchronized void taskUpdate(int current) {$/;"	m	class:UI
taskUpdate	src/org/sunflow/system/UserInterface.java	/^    void taskUpdate(int current);$/;"	m	interface:UserInterface
taskUpdate	src/org/sunflow/system/ui/ConsoleInterface.java	/^    public void taskUpdate(int current) {$/;"	m	class:ConsoleInterface
taskUpdate	src/org/sunflow/system/ui/SilentInterface.java	/^    public void taskUpdate(int current) {$/;"	m	class:SilentInterface
temp	src/org/sunflow/image/BlackbodySpectrum.java	/^    private float temp;$/;"	f	class:BlackbodySpectrum	file:
tesselatable	src/org/sunflow/core/Geometry.java	/^    private Tesselatable tesselatable;$/;"	f	class:Geometry	file:
tesselate	src/org/sunflow/core/Geometry.java	/^    private synchronized void tesselate() {$/;"	m	class:Geometry	file:
tesselate	src/org/sunflow/core/Tesselatable.java	/^    public PrimitiveList tesselate();$/;"	m	interface:Tesselatable
tesselate	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public PrimitiveList tesselate() {$/;"	m	class:BezierMesh
tesselate	src/org/sunflow/core/tesselatable/FileMesh.java	/^    public PrimitiveList tesselate() {$/;"	m	class:FileMesh
tex	src/org/sunflow/core/ShadingState.java	/^    private Point2 tex;$/;"	f	class:ShadingState	file:
tex	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^    private Texture tex;$/;"	f	class:TexturedAmbientOcclusionShader	file:
tex	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^    private Texture tex;$/;"	f	class:TexturedDiffuseShader	file:
tex	src/org/sunflow/core/shader/TexturedPhongShader.java	/^    private Texture tex;$/;"	f	class:TexturedPhongShader	file:
tex	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^    private Texture tex;$/;"	f	class:TexturedShinyDiffuseShader	file:
tex	src/org/sunflow/core/shader/TexturedWardShader.java	/^    private Texture tex;$/;"	f	class:TexturedWardShader	file:
texture	src/org/sunflow/core/light/ImageBasedLight.java	/^    private Texture texture;$/;"	f	class:ImageBasedLight	file:
textureCacheClearMenuItem	src/SunflowGUI.java	/^    private JMenuItem textureCacheClearMenuItem;$/;"	f	class:SunflowGUI	file:
textureCacheClearMenuItemActionPerformed	src/SunflowGUI.java	/^    private void textureCacheClearMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
textureSearchPath	src/org/sunflow/SunflowAPI.java	/^    private SearchPath textureSearchPath;$/;"	f	class:SunflowAPI	file:
textures	src/org/sunflow/core/TextureCache.java	/^    private static HashMap<String, Texture> textures = new HashMap<String, Texture>();$/;"	f	class:TextureCache	file:
threadCheckBox	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JCheckBox threadCheckBox;$/;"	f	class:RenderGlobalsPanel	file:
threadID	src/org/sunflow/core/renderer/BucketRenderer.java	/^        private int threadID;$/;"	f	class:BucketRenderer.BucketThread	file:
threadTextField	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JTextField threadTextField;$/;"	f	class:RenderGlobalsPanel	file:
threads	src/org/sunflow/Benchmark.java	/^    private int threads;$/;"	f	class:Benchmark	file:
threads	src/org/sunflow/core/Scene.java	/^    private int threads;$/;"	f	class:Scene	file:
threadsPanel	src/org/sunflow/system/RenderGlobalsPanel.java	/^    private JPanel threadsPanel;$/;"	f	class:RenderGlobalsPanel	file:
thresh	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private float thresh;$/;"	f	class:BucketRenderer	file:
tileOffsets	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private long[][] tileOffsets;$/;"	f	class:OpenExrDisplay	file:
tileOffsetsPosition	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private long tileOffsetsPosition;$/;"	f	class:OpenExrDisplay	file:
tileSize	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private int tileSize;$/;"	f	class:OpenExrDisplay	file:
tileWindowMenuItem	src/SunflowGUI.java	/^    private JMenuItem tileWindowMenuItem;$/;"	f	class:SunflowGUI	file:
tileWindowMenuItemActionPerformed	src/SunflowGUI.java	/^    private void tileWindowMenuItemActionPerformed(ActionEvent evt) {$/;"	m	class:SunflowGUI	file:
tilesX	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private int tilesX;$/;"	f	class:OpenExrDisplay	file:
tilesY	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private int tilesY;$/;"	f	class:OpenExrDisplay	file:
timeLimit	src/org/sunflow/system/BenchmarkFramework.java	/^    private int timeLimit; \/\/ time limit in seconds$/;"	f	class:BenchmarkFramework	file:
timers	src/org/sunflow/system/BenchmarkFramework.java	/^    private Timer[] timers;$/;"	f	class:BenchmarkFramework	file:
tmpbuf	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private byte[] tmpbuf;$/;"	f	class:OpenExrDisplay	file:
toInt	src/org/sunflow/system/ByteUtil.java	/^    public static final int toInt(byte in0, byte in1, byte in2, byte in3) {$/;"	m	class:ByteUtil
toInt	src/org/sunflow/system/ByteUtil.java	/^    public static final int toInt(byte[] in) {$/;"	m	class:ByteUtil
toInt	src/org/sunflow/system/ByteUtil.java	/^    public static final int toInt(byte[] in, int ofs) {$/;"	m	class:ByteUtil
toLinear	src/org/sunflow/image/Color.java	/^    public Color toLinear() {$/;"	m	class:Color
toLong	src/org/sunflow/system/ByteUtil.java	/^    public static final long toLong(byte[] in) {$/;"	m	class:ByteUtil
toNonLinear	src/org/sunflow/image/Color.java	/^    public Color toNonLinear() {$/;"	m	class:Color
toRGB	src/org/sunflow/image/Color.java	/^    public final int toRGB() {$/;"	m	class:Color
toRGBE	src/org/sunflow/image/Color.java	/^    public final int toRGBE() {$/;"	m	class:Color
toString	src/org/sunflow/core/ParameterList.java	/^        public String toString() {$/;"	m	class:ParameterList.Parameter
toString	src/org/sunflow/image/Color.java	/^    public String toString() {$/;"	m	class:Color
toString	src/org/sunflow/image/RGBSpace.java	/^    public final String toString() {$/;"	m	class:RGBSpace
toString	src/org/sunflow/image/XYZColor.java	/^    public final String toString() {$/;"	m	class:XYZColor
toString	src/org/sunflow/math/BoundingBox.java	/^    public final String toString() {$/;"	m	class:BoundingBox
toString	src/org/sunflow/math/Point2.java	/^    public final String toString() {$/;"	m	class:Point2
toString	src/org/sunflow/math/Point3.java	/^    public final String toString() {$/;"	m	class:Point3
toString	src/org/sunflow/math/Vector3.java	/^    public final String toString() {$/;"	m	class:Vector3
toString	src/org/sunflow/system/Timer.java	/^    public String toString() {$/;"	m	class:Timer
toString	src/org/sunflow/system/Timer.java	/^    public static String toString(double seconds) {$/;"	m	class:Timer
toString	src/org/sunflow/system/Timer.java	/^    public static String toString(long nanos) {$/;"	m	class:Timer
toXYZ	src/org/sunflow/image/SpectralCurve.java	/^    public final XYZColor toXYZ() {$/;"	m	class:SpectralCurve
tolerance	src/org/sunflow/core/gi/IrradianceCacheGIEngine.java	/^    private float tolerance;$/;"	f	class:IrradianceCacheGIEngine	file:
top	src/org/sunflow/core/primitive/CornellBox.java	/^    private Color left, right, top, bottom, back;$/;"	f	class:CornellBox	file:
trace	src/org/sunflow/core/Scene.java	/^    void trace(Ray r, IntersectionState state) {$/;"	m	class:Scene
traceBake	src/org/sunflow/core/Scene.java	/^    void traceBake(Ray r, IntersectionState state) {$/;"	m	class:Scene
traceDiffusePhoton	src/org/sunflow/core/LightServer.java	/^    void traceDiffusePhoton(ShadingState previous, Ray r, Color power) {$/;"	m	class:LightServer
traceDiffusePhoton	src/org/sunflow/core/ShadingState.java	/^    public final void traceDiffusePhoton(Ray r, Color power) {$/;"	m	class:ShadingState
traceFinalGather	src/org/sunflow/core/LightServer.java	/^    ShadingState traceFinalGather(ShadingState previous, Ray r, int i) {$/;"	m	class:LightServer
traceFinalGather	src/org/sunflow/core/ShadingState.java	/^    public final ShadingState traceFinalGather(Ray r, int i) {$/;"	m	class:ShadingState
traceGlossy	src/org/sunflow/core/LightServer.java	/^    Color traceGlossy(ShadingState previous, Ray r, int i) {$/;"	m	class:LightServer
traceGlossy	src/org/sunflow/core/ShadingState.java	/^    public final Color traceGlossy(Ray r, int i) {$/;"	m	class:ShadingState
traceReflection	src/org/sunflow/core/LightServer.java	/^    Color traceReflection(ShadingState previous, Ray r, int i) {$/;"	m	class:LightServer
traceReflection	src/org/sunflow/core/ShadingState.java	/^    public final Color traceReflection(Ray r, int i) {$/;"	m	class:ShadingState
traceReflectionPhoton	src/org/sunflow/core/LightServer.java	/^    void traceReflectionPhoton(ShadingState previous, Ray r, Color power) {$/;"	m	class:LightServer
traceReflectionPhoton	src/org/sunflow/core/ShadingState.java	/^    public final void traceReflectionPhoton(Ray r, Color power) {$/;"	m	class:ShadingState
traceRefraction	src/org/sunflow/core/LightServer.java	/^    Color traceRefraction(ShadingState previous, Ray r, int i) {$/;"	m	class:LightServer
traceRefraction	src/org/sunflow/core/ShadingState.java	/^    public final Color traceRefraction(Ray r, int i) {$/;"	m	class:ShadingState
traceRefractionPhoton	src/org/sunflow/core/LightServer.java	/^    void traceRefractionPhoton(ShadingState previous, Ray r, Color power) {$/;"	m	class:LightServer
traceRefractionPhoton	src/org/sunflow/core/ShadingState.java	/^    public final void traceRefractionPhoton(Ray r, Color power) {$/;"	m	class:ShadingState
traceShadow	src/org/sunflow/core/LightSample.java	/^    public final void traceShadow(ShadingState state) {$/;"	m	class:LightSample
traceShadow	src/org/sunflow/core/Scene.java	/^    Color traceShadow(Ray r, IntersectionState state) {$/;"	m	class:Scene
traceShadow	src/org/sunflow/core/ShadingState.java	/^    public final Color traceShadow(Ray r) {$/;"	m	class:ShadingState
traceTransparency	src/org/sunflow/core/ShadingState.java	/^    public final Color traceTransparency() {$/;"	m	class:ShadingState
transform	src/org/sunflow/core/Ray.java	/^    public Ray transform(Matrix4 m) {$/;"	m	class:Ray
transform	src/org/sunflow/math/Matrix4.java	/^    public final BoundingBox transform(BoundingBox b) {$/;"	m	class:Matrix4
transform	src/org/sunflow/math/OrthoNormalBasis.java	/^    public Vector3 transform(Vector3 a) {$/;"	m	class:OrthoNormalBasis
transform	src/org/sunflow/math/OrthoNormalBasis.java	/^    public Vector3 transform(Vector3 a, Vector3 dest) {$/;"	m	class:OrthoNormalBasis
transformNormalObjectToWorld	src/org/sunflow/core/Instance.java	/^    public Vector3 transformNormalObjectToWorld(Vector3 n) {$/;"	m	class:Instance
transformNormalWorldToObject	src/org/sunflow/core/Instance.java	/^    public Vector3 transformNormalWorldToObject(Vector3 n) {$/;"	m	class:Instance
transformObjectToWorld	src/org/sunflow/core/Instance.java	/^    public Point3 transformObjectToWorld(Point3 p) {$/;"	m	class:Instance
transformP	src/org/sunflow/math/Matrix4.java	/^    public final Point3 transformP(Point3 p) {$/;"	m	class:Matrix4
transformPX	src/org/sunflow/math/Matrix4.java	/^    public final float transformPX(float x, float y, float z) {$/;"	m	class:Matrix4
transformPY	src/org/sunflow/math/Matrix4.java	/^    public final float transformPY(float x, float y, float z) {$/;"	m	class:Matrix4
transformPZ	src/org/sunflow/math/Matrix4.java	/^    public final float transformPZ(float x, float y, float z) {$/;"	m	class:Matrix4
transformTransposeV	src/org/sunflow/math/Matrix4.java	/^    public final Vector3 transformTransposeV(Vector3 v) {$/;"	m	class:Matrix4
transformTransposeVX	src/org/sunflow/math/Matrix4.java	/^    public final float transformTransposeVX(float x, float y, float z) {$/;"	m	class:Matrix4
transformTransposeVY	src/org/sunflow/math/Matrix4.java	/^    public final float transformTransposeVY(float x, float y, float z) {$/;"	m	class:Matrix4
transformTransposeVZ	src/org/sunflow/math/Matrix4.java	/^    public final float transformTransposeVZ(float x, float y, float z) {$/;"	m	class:Matrix4
transformV	src/org/sunflow/math/Matrix4.java	/^    public final Vector3 transformV(Vector3 v) {$/;"	m	class:Matrix4
transformVX	src/org/sunflow/math/Matrix4.java	/^    public final float transformVX(float x, float y, float z) {$/;"	m	class:Matrix4
transformVY	src/org/sunflow/math/Matrix4.java	/^    public final float transformVY(float x, float y, float z) {$/;"	m	class:Matrix4
transformVZ	src/org/sunflow/math/Matrix4.java	/^    public final float transformVZ(float x, float y, float z) {$/;"	m	class:Matrix4
transformVectorObjectToWorld	src/org/sunflow/core/Instance.java	/^    public Vector3 transformVectorObjectToWorld(Vector3 v) {$/;"	m	class:Instance
transformVectorWorldToObject	src/org/sunflow/core/Instance.java	/^    public Vector3 transformVectorWorldToObject(Vector3 v) {$/;"	m	class:Instance
transformWorldToObject	src/org/sunflow/core/Instance.java	/^    public Point3 transformWorldToObject(Point3 p) {$/;"	m	class:Instance
translation	src/org/sunflow/math/Matrix4.java	/^    public final static Matrix4 translation(float x, float y, float z) {$/;"	m	class:Matrix4
tree	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^    private int[] tree;$/;"	f	class:BoundingIntervalHierarchy	file:
tree	src/org/sunflow/core/accel/KDTree.java	/^    private int[] tree;$/;"	f	class:KDTree	file:
tri3	src/org/sunflow/core/light/TriangleMeshLight.java	/^        private int tri3;$/;"	f	class:TriangleMeshLight.TriangleLight	file:
triaccel	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private WaldTriangle[] triaccel;$/;"	f	class:TriangleMesh	file:
triangles	src/org/sunflow/core/primitive/TriangleMesh.java	/^    protected int[] triangles;$/;"	f	class:TriangleMesh
trim	src/org/sunflow/util/FloatArray.java	/^    public final float[] trim() {$/;"	m	class:FloatArray
trim	src/org/sunflow/util/IntArray.java	/^    public final int[] trim() {$/;"	m	class:IntArray
turbidity	src/org/sunflow/core/light/SunSkyLight.java	/^    private float turbidity;$/;"	f	class:SunSkyLight	file:
type	src/org/sunflow/RenderObjectMap.java	/^        private final RenderObjectType type;$/;"	f	class:RenderObjectMap.RenderObjectHandle	file:
type	src/org/sunflow/core/ParameterList.java	/^        private ParameterType type;$/;"	f	class:ParameterList.Parameter	file:
type	src/org/sunflow/system/SearchPath.java	/^    private String type;$/;"	f	class:SearchPath	file:
typeName	src/org/sunflow/RenderObjectMap.java	/^        private String typeName() {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
u	src/org/sunflow/core/IntersectionState.java	/^    float u, v;$/;"	f	class:IntersectionState
u	src/org/sunflow/math/OrthoNormalBasis.java	/^    private Vector3 u, v, w;$/;"	f	class:OrthoNormalBasis	file:
ui	src/org/sunflow/system/UI.java	/^    private static UserInterface ui = new ConsoleInterface();$/;"	f	class:UI	file:
ungammaCorrect	src/org/sunflow/image/RGBSpace.java	/^    public final float ungammaCorrect(float vp) {$/;"	m	class:RGBSpace
unpackAxis	src/org/sunflow/core/accel/KDTree.java	/^    private static int unpackAxis(long p) {$/;"	m	class:KDTree	file:
unpackObject	src/org/sunflow/core/accel/KDTree.java	/^    private static int unpackObject(long p) {$/;"	m	class:KDTree	file:
unpackSplit	src/org/sunflow/core/accel/KDTree.java	/^    private static float unpackSplit(long p) {$/;"	m	class:KDTree	file:
unpackSplitType	src/org/sunflow/core/accel/KDTree.java	/^    private static long unpackSplitType(long p) {$/;"	m	class:KDTree	file:
untransform	src/org/sunflow/math/OrthoNormalBasis.java	/^    public Vector3 untransform(Vector3 a) {$/;"	m	class:OrthoNormalBasis
untransform	src/org/sunflow/math/OrthoNormalBasis.java	/^    public Vector3 untransform(Vector3 a, Vector3 dest) {$/;"	m	class:OrthoNormalBasis
untransformX	src/org/sunflow/math/OrthoNormalBasis.java	/^    public float untransformX(Vector3 a) {$/;"	m	class:OrthoNormalBasis
untransformY	src/org/sunflow/math/OrthoNormalBasis.java	/^    public float untransformY(Vector3 a) {$/;"	m	class:OrthoNormalBasis
untransformZ	src/org/sunflow/math/OrthoNormalBasis.java	/^    public float untransformZ(Vector3 a) {$/;"	m	class:OrthoNormalBasis
up	src/org/sunflow/core/gi/FakeGIEngine.java	/^    private Vector3 up;$/;"	f	class:FakeGIEngine	file:
update	src/org/sunflow/RenderObjectMap.java	/^        private boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:RenderObjectMap.RenderObjectHandle	file:
update	src/org/sunflow/RenderObjectMap.java	/^    final boolean update(String name, ParameterList pl, SunflowAPI api) {$/;"	m	class:RenderObjectMap
update	src/org/sunflow/SunflowAPI.java	/^    public boolean update(String name) {$/;"	m	class:SunflowAPI
update	src/org/sunflow/core/Camera.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Camera
update	src/org/sunflow/core/Geometry.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Geometry
update	src/org/sunflow/core/Instance.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Instance
update	src/org/sunflow/core/InstanceList.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:InstanceList
update	src/org/sunflow/core/Options.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Options
update	src/org/sunflow/core/RenderObject.java	/^    public boolean update(ParameterList pl, SunflowAPI api);$/;"	m	interface:RenderObject
update	src/org/sunflow/core/camera/FisheyeLens.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:FisheyeLens
update	src/org/sunflow/core/camera/PinholeLens.java	/^    private void update() {$/;"	m	class:PinholeLens	file:
update	src/org/sunflow/core/camera/PinholeLens.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:PinholeLens
update	src/org/sunflow/core/camera/SphericalLens.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:SphericalLens
update	src/org/sunflow/core/camera/ThinLens.java	/^    private void update() {$/;"	m	class:ThinLens	file:
update	src/org/sunflow/core/camera/ThinLens.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ThinLens
update	src/org/sunflow/core/light/DirectionalSpotlight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:DirectionalSpotlight
update	src/org/sunflow/core/light/ImageBasedLight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ImageBasedLight
update	src/org/sunflow/core/light/PointLight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:PointLight
update	src/org/sunflow/core/light/SphereLight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:SphereLight
update	src/org/sunflow/core/light/SunSkyLight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:SunSkyLight
update	src/org/sunflow/core/light/TriangleMeshLight.java	/^        public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TriangleMeshLight.TriangleLight
update	src/org/sunflow/core/light/TriangleMeshLight.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TriangleMeshLight
update	src/org/sunflow/core/modifiers/BumpMappingModifier.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:BumpMappingModifier
update	src/org/sunflow/core/modifiers/NormalMapModifier.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:NormalMapModifier
update	src/org/sunflow/core/primitive/Background.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Background
update	src/org/sunflow/core/primitive/BanchoffSurface.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:BanchoffSurface
update	src/org/sunflow/core/primitive/Box.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Box
update	src/org/sunflow/core/primitive/CornellBox.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:CornellBox
update	src/org/sunflow/core/primitive/CubeGrid.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:CubeGrid
update	src/org/sunflow/core/primitive/Hair.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Hair
update	src/org/sunflow/core/primitive/JuliaFractal.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:JuliaFractal
update	src/org/sunflow/core/primitive/ParticleSurface.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ParticleSurface
update	src/org/sunflow/core/primitive/Plane.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Plane
update	src/org/sunflow/core/primitive/QuadMesh.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:QuadMesh
update	src/org/sunflow/core/primitive/Sphere.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Sphere
update	src/org/sunflow/core/primitive/Torus.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:Torus
update	src/org/sunflow/core/primitive/TriangleMesh.java	/^        public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TriangleMesh.BakingSurface
update	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TriangleMesh
update	src/org/sunflow/core/shader/AmbientOcclusionShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:AmbientOcclusionShader
update	src/org/sunflow/core/shader/AnisotropicWardShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:AnisotropicWardShader
update	src/org/sunflow/core/shader/ConstantShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ConstantShader
update	src/org/sunflow/core/shader/DiffuseShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:DiffuseShader
update	src/org/sunflow/core/shader/GlassShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:GlassShader
update	src/org/sunflow/core/shader/IDShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:IDShader
update	src/org/sunflow/core/shader/MirrorShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:MirrorShader
update	src/org/sunflow/core/shader/NormalShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:NormalShader
update	src/org/sunflow/core/shader/PhongShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:PhongShader
update	src/org/sunflow/core/shader/PrimIDShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:PrimIDShader
update	src/org/sunflow/core/shader/QuickGrayShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:QuickGrayShader
update	src/org/sunflow/core/shader/ShinyDiffuseShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ShinyDiffuseShader
update	src/org/sunflow/core/shader/SimpleShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:SimpleShader
update	src/org/sunflow/core/shader/TexturedAmbientOcclusionShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TexturedAmbientOcclusionShader
update	src/org/sunflow/core/shader/TexturedDiffuseShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TexturedDiffuseShader
update	src/org/sunflow/core/shader/TexturedPhongShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TexturedPhongShader
update	src/org/sunflow/core/shader/TexturedShinyDiffuseShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TexturedShinyDiffuseShader
update	src/org/sunflow/core/shader/TexturedWardShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:TexturedWardShader
update	src/org/sunflow/core/shader/UVShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:UVShader
update	src/org/sunflow/core/shader/UberShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:UberShader
update	src/org/sunflow/core/shader/ViewCausticsShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ViewCausticsShader
update	src/org/sunflow/core/shader/ViewGlobalPhotonsShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ViewGlobalPhotonsShader
update	src/org/sunflow/core/shader/ViewIrradianceShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:ViewIrradianceShader
update	src/org/sunflow/core/shader/WireframeShader.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:WireframeShader
update	src/org/sunflow/core/tesselatable/BezierMesh.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:BezierMesh
update	src/org/sunflow/core/tesselatable/FileMesh.java	/^    public boolean update(ParameterList pl, SunflowAPI api) {$/;"	m	class:FileMesh
updateBVH2	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        void updateBVH2() {$/;"	m	class:BoundingIntervalHierarchy.BuildStats
updateBasis	src/org/sunflow/core/light/ImageBasedLight.java	/^    private void updateBasis(Vector3 center, Vector3 up) {$/;"	m	class:ImageBasedLight	file:
updateBounds	src/org/sunflow/core/Instance.java	/^    public void updateBounds() {$/;"	m	class:Instance
updateCameraMatrix	src/org/sunflow/core/Camera.java	/^    private boolean updateCameraMatrix(int index, ParameterList pl) {$/;"	m	class:Camera	file:
updateGeometry	src/org/sunflow/core/primitive/CornellBox.java	/^    private void updateGeometry(Point3 c0, Point3 c1) {$/;"	m	class:CornellBox	file:
updateInner	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        void updateInner() {$/;"	m	class:BoundingIntervalHierarchy.BuildStats
updateInner	src/org/sunflow/core/accel/KDTree.java	/^        void updateInner() {$/;"	m	class:KDTree.BuildStats
updateLeaf	src/org/sunflow/core/accel/BoundingIntervalHierarchy.java	/^        void updateLeaf(int depth, int n) {$/;"	m	class:BoundingIntervalHierarchy.BuildStats
updateLeaf	src/org/sunflow/core/accel/KDTree.java	/^        void updateLeaf(int depth, int n) {$/;"	m	class:KDTree.BuildStats
updateScene	src/org/sunflow/RenderObjectMap.java	/^    final void updateScene(Scene scene) {$/;"	m	class:RenderObjectMap
usage	src/SunflowGUI.java	/^    public static void usage(boolean verbose) {$/;"	m	class:SunflowGUI
useJitter	src/org/sunflow/core/renderer/BucketRenderer.java	/^    private boolean useJitter;$/;"	f	class:BucketRenderer	file:
uvs	src/org/sunflow/core/primitive/QuadMesh.java	/^    private FloatParameter uvs;$/;"	f	class:QuadMesh	file:
uvs	src/org/sunflow/core/primitive/TriangleMesh.java	/^    private FloatParameter uvs;$/;"	f	class:TriangleMesh	file:
v	src/org/sunflow/core/IntersectionState.java	/^    float u, v;$/;"	f	class:IntersectionState
v	src/org/sunflow/math/OrthoNormalBasis.java	/^    private Vector3 u, v, w;$/;"	f	class:OrthoNormalBasis	file:
validationImage	src/org/sunflow/Benchmark.java	/^    private int[] validationImage;$/;"	f	class:Benchmark	file:
verbosity	src/org/sunflow/system/UI.java	/^    private static int verbosity = 0;$/;"	f	class:UI	file:
verbosity	src/org/sunflow/system/UI.java	/^    public final static void verbosity(int verbosity) {$/;"	m	class:UI
virtualLights	src/org/sunflow/core/gi/InstantGI.java	/^        ArrayList<PointLight> virtualLights = new ArrayList<PointLight>();$/;"	f	class:InstantGI.PointLightStore
virtualLights	src/org/sunflow/core/gi/InstantGI.java	/^    private PointLight[][] virtualLights;$/;"	f	class:InstantGI	file:
voxelwx	src/org/sunflow/core/accel/UniformGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:UniformGrid	file:
voxelwx	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:CubeGrid	file:
voxelwy	src/org/sunflow/core/accel/UniformGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:UniformGrid	file:
voxelwy	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:CubeGrid	file:
voxelwz	src/org/sunflow/core/accel/UniformGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:UniformGrid	file:
voxelwz	src/org/sunflow/core/primitive/CubeGrid.java	/^    private float voxelwx, voxelwy, voxelwz;$/;"	f	class:CubeGrid	file:
w	src/org/sunflow/math/OrthoNormalBasis.java	/^    private Vector3 u, v, w;$/;"	f	class:OrthoNormalBasis	file:
w	src/org/sunflow/system/ImagePanel.java	/^    private float w, h;$/;"	f	class:ImagePanel	file:
w2c	src/org/sunflow/core/Camera.java	/^    private Matrix4[] w2c;$/;"	f	class:Camera	file:
w2o	src/org/sunflow/core/Instance.java	/^    private Matrix4 w2o;$/;"	f	class:Instance	file:
wavelengths	src/org/sunflow/image/IrregularSpectralCurve.java	/^    private final float[] wavelengths;$/;"	f	class:IrregularSpectralCurve	file:
white	src/org/sunflow/image/Color.java	/^    public static Color white() {$/;"	m	class:Color
width	src/org/sunflow/core/shader/WireframeShader.java	/^    private float width;$/;"	f	class:WireframeShader	file:
width	src/org/sunflow/image/Bitmap.java	/^    private int width;$/;"	f	class:Bitmap	file:
widths	src/org/sunflow/core/primitive/Hair.java	/^    private FloatParameter widths;$/;"	f	class:Hair	file:
windowMenu	src/SunflowGUI.java	/^    private JMenu windowMenu;$/;"	f	class:SunflowGUI	file:
writeObj	src/org/sunflow/core/primitive/QuadMesh.java	/^    public void writeObj(String filename) {$/;"	m	class:QuadMesh
writeObj	src/org/sunflow/core/primitive/TriangleMesh.java	/^    public void writeObj(String filename) {$/;"	m	class:TriangleMesh
writeRGBHeader	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void writeRGBHeader(int w, int h, int tileSize) throws Exception {$/;"	m	class:OpenExrDisplay
writeTile	src/org/sunflow/core/display/OpenExrDisplay.java	/^    private void writeTile(int tileX, int tileY, int w, int h, Color[] tile) throws IOException {$/;"	m	class:OpenExrDisplay	file:
writeTileOffsets	src/org/sunflow/core/display/OpenExrDisplay.java	/^    public void writeTileOffsets() throws IOException {$/;"	m	class:OpenExrDisplay
x	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float x;$/;"	f	class:CausticPhotonMap.Photon
x	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float x;$/;"	f	class:GlobalPhotonMap.Photon
x	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        int x, y, size;$/;"	f	class:ProgressiveRenderer.SmallBucket
x	src/org/sunflow/math/Point2.java	/^    public float x, y;$/;"	f	class:Point2
x	src/org/sunflow/math/Point3.java	/^    public float x, y, z;$/;"	f	class:Point3
x	src/org/sunflow/math/Vector3.java	/^    public float x, y, z;$/;"	f	class:Vector3
xb	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
xg	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
xo	src/org/sunflow/system/ImagePanel.java	/^    private float xo, yo;$/;"	f	class:ImagePanel	file:
xorshift	src/org/sunflow/core/bucket/RandomBucketOrder.java	/^    private long xorshift(long y) {$/;"	m	class:RandomBucketOrder	file:
xr	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
xw	src/org/sunflow/image/RGBSpace.java	/^    private final float xw, yw, zw;$/;"	f	class:RGBSpace	file:
y	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float y;$/;"	f	class:CausticPhotonMap.Photon
y	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float y;$/;"	f	class:GlobalPhotonMap.Photon
y	src/org/sunflow/core/renderer/ProgressiveRenderer.java	/^        int x, y, size;$/;"	f	class:ProgressiveRenderer.SmallBucket
y	src/org/sunflow/math/Point2.java	/^    public float x, y;$/;"	f	class:Point2
y	src/org/sunflow/math/Point3.java	/^    public float x, y, z;$/;"	f	class:Point3
y	src/org/sunflow/math/Vector3.java	/^    public float x, y, z;$/;"	f	class:Vector3
yb	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
yg	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
yo	src/org/sunflow/system/ImagePanel.java	/^    private float xo, yo;$/;"	f	class:ImagePanel	file:
yr	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
yw	src/org/sunflow/image/RGBSpace.java	/^    private final float xw, yw, zw;$/;"	f	class:RGBSpace	file:
z	src/org/sunflow/core/photonmap/CausticPhotonMap.java	/^        float z;$/;"	f	class:CausticPhotonMap.Photon
z	src/org/sunflow/core/photonmap/GlobalPhotonMap.java	/^        float z;$/;"	f	class:GlobalPhotonMap.Photon
z	src/org/sunflow/math/Point3.java	/^    public float x, y, z;$/;"	f	class:Point3
z	src/org/sunflow/math/Vector3.java	/^    public float x, y, z;$/;"	f	class:Vector3
zb	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
zenithY	src/org/sunflow/core/light/SunSkyLight.java	/^    private double zenithY, zenithx, zenithy;$/;"	f	class:SunSkyLight	file:
zenithx	src/org/sunflow/core/light/SunSkyLight.java	/^    private double zenithY, zenithx, zenithy;$/;"	f	class:SunSkyLight	file:
zenithy	src/org/sunflow/core/light/SunSkyLight.java	/^    private double zenithY, zenithx, zenithy;$/;"	f	class:SunSkyLight	file:
zg	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
zoom	src/org/sunflow/system/ImagePanel.java	/^    private synchronized void zoom(int dx, int dy) {$/;"	m	class:ImagePanel	file:
zooming	src/org/sunflow/system/ImagePanel.java	/^        boolean zooming;$/;"	f	class:ImagePanel.ScrollZoomListener
zr	src/org/sunflow/image/RGBSpace.java	/^    private final float xr, yr, zr, xg, yg, zg, xb, yb, zb;$/;"	f	class:RGBSpace	file:
zw	src/org/sunflow/image/RGBSpace.java	/^    private final float xw, yw, zw;$/;"	f	class:RGBSpace	file:
