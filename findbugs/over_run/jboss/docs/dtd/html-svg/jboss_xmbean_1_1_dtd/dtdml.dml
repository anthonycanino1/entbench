<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "jboss_xmbean_1_1.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR>&lt;?xml encoding='UTF-8' ?&gt;<BR><BR>&lt;!-- This is the XML DTD for the JBoss MX 1.0 XMBean deployment descriptor.Author: Juha LindforsAuthor: David JencksAuthor: Matt MunzAuthor: Heiko W. RuppThe DOCTYPE is:  <BR>&lt;!DOCTYPE mbean PUBLIC      &quot;-//JBoss//DTD JBOSS XMBEAN 1.1//EN&quot;      &quot;http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_1.dtd&quot;&gt;--&gt;<BR>&lt;!--   The mbean element is the root element of the document containing the  required elements for describing the management interface of one  MBean (constructors, attributes, operations and notifications). It  also includes an optional description element that can be used to  describe the purpose of the MBean and attributes for persistence  policy and attribute caching.--&gt;<BR>&lt;!ELEMENT mbean (description? , descriptors? , class , constructor* , attribute* , operation* , notification*)&gt;<BR>&lt;!-- The class element specifies the fully qualifed name of the model MBeanimplementation class. This class will be exposed as a ModelMBean by theJMX implementation.--&gt;<BR>&lt;!ELEMENT class (#PCDATA)&gt;<BR>&lt;!--  The constructor element describes the constructors of an MBean  that are exposed to the management application. The optional  description element can be used to to describe the use of the  constructor.  --&gt;<BR>&lt;!ELEMENT constructor (description? , name , parameter* , descriptors?)&gt;<BR>&lt;!--   The attribute element describes the management attributes of an  MBean. The name element contains the attribute's name and the type  element contains a fully qualified class name of the attribute's  type.--&gt;<BR>&lt;!ELEMENT attribute (description? , name , type , descriptors?)&gt;<BR>&lt;!--  The access attribute defines the  read/write access modes of an attribute  --&gt;<BR>&lt;!ATTLIST attribute access     (read-only | write-only | read-write )  &quot;read-write&quot;&gt;<BR>&lt;!--  The getMethod attribute defines the name of the method which readsthe named attribute. This must be specified if the managed attribute shouldbe obtained from the mbean instance. --&gt;<BR>&lt;!ATTLIST attribute getMethod CDATA  #IMPLIED&gt;<BR>&lt;!--  The setMethod attribute defines the name of the method which writesthe named attribute. This must be specified if the managed attribute shouldbe obtained from the mbean instance. --&gt;<BR>&lt;!ATTLIST attribute setMethod CDATA  #IMPLIED&gt;<BR>&lt;!--   The operation element describes a management operation of an MBean.  The name element contains the operation's name and the parameter  elements describe the operation's signature. The return-type element  must contain a fully qualified class name of the return type from  this operation.    If return-type is not specified, void is assumed.--&gt;<BR>&lt;!ELEMENT operation (description? , name , parameter* , return-type? , descriptors?)&gt;<BR>&lt;!--  The impact attribute defines the impact of executing the operation and must be one of:ACTION, The operation changes the state of the MBean component (write operation).INFO, The operation should not alter the  state of the MBean component (read operation).ACTION_INFO, The operation behaves like a  read/write operation.--&gt;<BR>&lt;!ATTLIST operation impact  (ACTION | INFO | ACTION_INFO )  &quot;ACTION_INFO&quot;&gt;<BR>&lt;!--  The descriptors element contains all the descriptors for a containing element, as subelements.The descriptors suggested in the jmx spec have predefined elements, whereas custom descriptors havea generic element.--&gt;<BR>&lt;!ELEMENT descriptors (interceptors? , persistence? , currencyTimeLimit? , state-action-on-update? , display-name? , default? , value? , persistence-manager? , descriptor*)&gt;<BR>&lt;!-- The interceptors element specifies a customized stack of interceptorsthat will be used in place of the default stack. Currently this is onlyused when specified at the mbean level, but it could define a custom attributeor operation level interceptor stack in the future.--&gt;<BR>&lt;!ELEMENT interceptors (interceptor+)&gt;<BR>&lt;!-- The interceptor element specifies a custom interceptor stack to insertahead of the standard ModelBean consisting of:   org.jboss.mx.interceptor.PersistenceInterceptor   org.jboss.mx.interceptor.MBeanAttributeInterceptor   org.jboss.mx.interceptor.ObjectReferenceInterceptorEach interceptor must implement the org.jboss.mx.interceptor.Interceptorinterface, and must have either a no-arg constructor, or a constructorthat accepts a javax.management.modelmbean.ModelMBeanInfo.--&gt;<BR>&lt;!ELEMENT interceptor ANY&gt;<BR>&lt;!ATTLIST interceptor  code CDATA  #REQUIRED &gt;<BR>&lt;!-- The persistence element contains descriptors for the persistPolicy,persistPeriod, persistLocation, and persistName properties suggested by the spec.--&gt;<BR>&lt;!ELEMENT persistence EMPTY&gt;<BR>&lt;!-- The persistPolicy defines how attributes should be persisted and must be one of:Never, attribute values are transient values that are never persistedOnUpdate, attribute values are persisted whenever they are updatedOnTimer, attribute values are persisted based on the time given by the persistPeriod.NoMoreOftenThan, attribute values are persisted when updated unless but no moreoten than the persistPeriod.--&gt;<BR>&lt;!ATTLIST persistence persistPolicy    (Never | OnUpdate | NoMoreOftenThan | OnTimer )  #IMPLIED&gt;<BR>&lt;!-- The persistPeriod attribute gives the update frequency in milliseconds ifthe perisitPolicy attribute is NoMoreOftenThan or OnTimer.--&gt;<BR>&lt;!ATTLIST persistence persistPeriod   CDATA  #IMPLIED&gt;<BR>&lt;!-- The persistLocation attribute specifies the location of the persistencestore. Its form depends on the JMX implementation. Currently this should referto a directory into which the attributes will be serialized.--&gt;<BR>&lt;!ATTLIST persistence persistLocation CDATA  #IMPLIED&gt;<BR>&lt;!-- The  persistName attribute can be used in conjunction with thepersistLocation attribute to further qualify the persistent store location. Fora directory persistLocation the persistName specifies the file to which theattributes are stored within the directory.--&gt;<BR>&lt;!ATTLIST persistence persistName     CDATA  #IMPLIED&gt;<BR>&lt;!-- The currencyTimeLimit element specifies the time in seconds that a cachedvalue of an attribute remains valid.--&gt;<BR>&lt;!ELEMENT currencyTimeLimit EMPTY&gt;<BR>&lt;!--  The value attribute gives the  currencyTimeLimit in seconds. A 0 valueindicates that an attribute value should always be retrieved from the mbean andnever cached. A -1 value indicates that a cache value is always valid.--&gt;<BR>&lt;!ATTLIST currencyTimeLimit value CDATA  #IMPLIED&gt;<BR>&lt;!--  The state-action-on-update element specifies the what happens to an mbeanwhen one of its attributes is updated. The action is given by the value attribute.--&gt;<BR>&lt;!ELEMENT state-action-on-update EMPTY&gt;<BR>&lt;!-- The value value attribute defines what happens to the mbean lifecyclestate when one of its attributes is update. It must be one of:keep-running,restart,reconfigure,reinstantiate--&gt;<BR>&lt;!ATTLIST state-action-on-update value  (keep-running | restart | reconfigure | reinstantiate )  #IMPLIED&gt;<BR>&lt;!--  The displayName element specifies the human friendly name of an item --&gt;<BR>&lt;!ELEMENT display-name EMPTY&gt;<BR>&lt;!--   The value attribute gives the string representation of the displayName --&gt;<BR>&lt;!ATTLIST display-name value CDATA  #IMPLIED&gt;<BR>&lt;!-- The persistence-manager element give the name of a class to use as thepersistence manager. --&gt;<BR>&lt;!ELEMENT persistence-manager EMPTY&gt;<BR>&lt;!--  The value attribute specifies the class name that supplies theorg.jboss.mx.persistence.PersistenceManager interface implementation. --&gt;<BR>&lt;!ATTLIST persistence-manager value CDATA  #IMPLIED&gt;<BR>&lt;!-- The default element specifes a default value to use when a field has notbeen set.--&gt;<BR>&lt;!ELEMENT default EMPTY&gt;<BR>&lt;!--  The value  attribute  gives the default value representation--&gt;<BR>&lt;!ATTLIST default value CDATA  #REQUIRED&gt;<BR>&lt;!-- The value element specifies a management attribute's current value--&gt;<BR>&lt;!ELEMENT value EMPTY&gt;<BR>&lt;!--  The  value  (initial) value for attribute  --&gt;<BR>&lt;!ATTLIST value value CDATA  #REQUIRED&gt;<BR>&lt;!--  The  descriptor element--&gt;<BR>&lt;!ELEMENT descriptor EMPTY&gt;<BR>&lt;!-- The name attribute specifies the type of the descriptor. --&gt;<BR>&lt;!ATTLIST descriptor name  CDATA  #REQUIRED&gt;<BR>&lt;!-- The value attribute specifies the descriptor value.--&gt;<BR>&lt;!ATTLIST descriptor value CDATA  #REQUIRED&gt;<BR>&lt;!-- The notification element describes a management notification. The name  element contains the fully qualified name of the notification class and  the notification-type element contains the dot-separated notification  type string.--&gt;<BR>&lt;!ELEMENT notification (description? , name , notification-type+ , descriptors?)&gt;<BR>&lt;!-- The parameter element specifies an operation parameter--&gt;<BR>&lt;!ELEMENT parameter (description? , name , type)&gt;<BR>&lt;!-- The name element is used to define the fundamental name of a component, such as thembean JMX name, the name of an attribute, constructor, operation, notification, etc. This is acase-sensitive code centric name. For notifications the name if the class name of the eventobject, javax.management.Notification or a subclass.--&gt;<BR>&lt;!ELEMENT name (#PCDATA)&gt;<BR>&lt;!-- The description element provides human readable descriptive text for constructors,attributes, operations, paramters, notifications, etc.--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;<BR>&lt;!-- The type element specifies a fully qualified name of a Java type.--&gt;<BR>&lt;!ELEMENT type (#PCDATA)&gt;<BR>&lt;!-- The return-type element specifies the return type of an operation. If not given or emptyit is assumed to be the void type.--&gt;<BR>&lt;!ELEMENT return-type (#PCDATA)&gt;<BR>&lt;!-- The notification-type element speicifies the types of notifications that may be sent. These arethe value that will be seen as the the javax.management.Notification.type attribute.--&gt;<BR>&lt;!ELEMENT notification-type (#PCDATA)&gt;<BR>&lt;!-- provide entites for default MBean Operations and the three default MBean attributes--&gt;<BR>&lt;!ENTITY defops &quot;<BR>&lt;operation&gt; <BR>&lt;description&gt;Standard MBean lifecycle method<BR>&lt;/description&gt; <BR>&lt;name&gt;create<BR>&lt;/name&gt;<BR>&lt;/operation&gt;<BR>&lt;operation&gt; <BR>&lt;description&gt;The start lifecycle operation<BR>&lt;/description&gt; <BR>&lt;name&gt;start<BR>&lt;/name&gt;<BR>&lt;/operation&gt;<BR>&lt;operation&gt; <BR>&lt;description&gt;The stop lifecycle operation<BR>&lt;/description&gt; <BR>&lt;name&gt;stop<BR>&lt;/name&gt;<BR>&lt;/operation&gt;<BR>&lt;operation&gt; <BR>&lt;description&gt;The destroy lifecycle operation<BR>&lt;/description&gt; <BR>&lt;name&gt;destroy<BR>&lt;/name&gt;<BR>&lt;/operation&gt;&quot;&gt;<BR>&lt;!ENTITY defattr &quot;<BR>&lt;attribute access=&quot;read-only&quot; getMethod=&quot;getName&quot;&gt; <BR>&lt;description&gt;The class name of the MBean<BR>&lt;/description&gt; <BR>&lt;name&gt;Name<BR>&lt;/name&gt; <BR>&lt;type&gt;java.lang.String<BR>&lt;/type&gt;<BR>&lt;/attribute&gt;<BR>&lt;attribute access=&quot;read-only&quot; getMethod=&quot;getState&quot;&gt; <BR>&lt;description&gt;The status of the MBean<BR>&lt;/description&gt; <BR>&lt;name&gt;State<BR>&lt;/name&gt; <BR>&lt;type&gt;int<BR>&lt;/type&gt;<BR>&lt;/attribute&gt;<BR>&lt;attribute access=&quot;read-only&quot; getMethod=&quot;getStateString&quot;&gt; <BR>&lt;description&gt;The status of the MBean in text form<BR>&lt;/description&gt; <BR>&lt;name&gt;StateString<BR>&lt;/name&gt; <BR>&lt;type&gt;java.lang.String<BR>&lt;/type&gt;<BR>&lt;/attribute&gt;&quot;&gt;]]>

	</dtdsource>
	<ElementDecl Name = "mbean">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT mbean (description? , descriptors? , class , constructor* , attribute* , operation* , notification*)&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "descriptors" Frequency = "Optional"/>
				<Ref Element = "class"/>
				<Ref Element = "constructor" Frequency = "ZeroOrMore"/>
				<Ref Element = "attribute" Frequency = "ZeroOrMore"/>
				<Ref Element = "operation" Frequency = "ZeroOrMore"/>
				<Ref Element = "notification" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "class">
		<dtdsource><![CDATA[
<BR>&lt;!-- The class element specifies the fully qualifed name of the model MBeanimplementation class. This class will be exposed as a ModelMBean by theJMX implementation.--&gt;<BR>&lt;!ELEMENT class (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The class element specifies the fully qualifed name of the model MBean
implementation class. This class will be exposed as a ModelMBean by the
JMX implementation.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "constructor">
		<dtdsource><![CDATA[
<BR>&lt;!--  The constructor element describes the constructors of an MBean  that are exposed to the management application. The optional  description element can be used to to describe the use of the  constructor.  --&gt;<BR>&lt;!ELEMENT constructor (description? , name , parameter* , descriptors?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The constructor element describes the constructors of an MBean
  that are exposed to the management application. The optional
  description element can be used to to describe the use of the
  constructor.  

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "name"/>
				<Ref Element = "parameter" Frequency = "ZeroOrMore"/>
				<Ref Element = "descriptors" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "attribute">
		<dtdsource><![CDATA[
<BR>&lt;!--   The attribute element describes the management attributes of an  MBean. The name element contains the attribute's name and the type  element contains a fully qualified class name of the attribute's  type.--&gt;<BR>&lt;!ELEMENT attribute (description? , name , type , descriptors?)&gt;<BR>&lt;!--  The access attribute defines the  read/write access modes of an attribute  --&gt;<BR>&lt;!ATTLIST attribute access     (read-only | write-only | read-write )  &quot;read-write&quot;&gt;<BR>&lt;!--  The getMethod attribute defines the name of the method which readsthe named attribute. This must be specified if the managed attribute shouldbe obtained from the mbean instance. --&gt;<BR>&lt;!ATTLIST attribute getMethod CDATA  #IMPLIED&gt;<BR>&lt;!--  The setMethod attribute defines the name of the method which writesthe named attribute. This must be specified if the managed attribute shouldbe obtained from the mbean instance. --&gt;<BR>&lt;!ATTLIST attribute setMethod CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The attribute element describes the management attributes of an
  MBean. The name element contains the attribute's name and the type
  element contains a fully qualified class name of the attribute's
  type.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "name"/>
				<Ref Element = "type"/>
				<Ref Element = "descriptors" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "access" Type = "Enumeration" AttValue = "read-write">
				<DDML:Doc>  The access attribute defines the  read/write access modes of an attribute  </DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "read-only"/>
					<EnumerationValue Value = "write-only"/>
					<EnumerationValue Value = "read-write"/>
				</Enumeration>
			</AttDef>
			<AttDef Name = "getMethod">
				<DDML:Doc>  The getMethod attribute defines the name of the method which reads
the named attribute. This must be specified if the managed attribute should
be obtained from the mbean instance. 
				</DDML:Doc>
			</AttDef>
			<AttDef Name = "setMethod">
				<DDML:Doc>  The setMethod attribute defines the name of the method which writes
the named attribute. This must be specified if the managed attribute should
be obtained from the mbean instance. 
				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "access" Type = "Enumeration" AttValue = "read-write">
			<DDML:Doc>  The access attribute defines the  read/write access modes of an attribute  </DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "read-only"/>
				<EnumerationValue Value = "write-only"/>
				<EnumerationValue Value = "read-write"/>
			</Enumeration>
		</AttDef>
		<AttDef Name = "getMethod">
			<DDML:Doc>  The getMethod attribute defines the name of the method which reads
the named attribute. This must be specified if the managed attribute should
be obtained from the mbean instance. 
			</DDML:Doc>
		</AttDef>
		<AttDef Name = "setMethod">
			<DDML:Doc>  The setMethod attribute defines the name of the method which writes
the named attribute. This must be specified if the managed attribute should
be obtained from the mbean instance. 
			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "operation">
		<dtdsource><![CDATA[
<BR>&lt;!--   The operation element describes a management operation of an MBean.  The name element contains the operation's name and the parameter  elements describe the operation's signature. The return-type element  must contain a fully qualified class name of the return type from  this operation.    If return-type is not specified, void is assumed.--&gt;<BR>&lt;!ELEMENT operation (description? , name , parameter* , return-type? , descriptors?)&gt;<BR>&lt;!--  The impact attribute defines the impact of executing the operation and must be one of:ACTION, The operation changes the state of the MBean component (write operation).INFO, The operation should not alter the  state of the MBean component (read operation).ACTION_INFO, The operation behaves like a  read/write operation.--&gt;<BR>&lt;!ATTLIST operation impact  (ACTION | INFO | ACTION_INFO )  &quot;ACTION_INFO&quot;&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The operation element describes a management operation of an MBean.
  The name element contains the operation's name and the parameter
  elements describe the operation's signature. The return-type element
  must contain a fully qualified class name of the return type from
  this operation.
  
  If return-type is not specified, void is assumed.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "name"/>
				<Ref Element = "parameter" Frequency = "ZeroOrMore"/>
				<Ref Element = "return-type" Frequency = "Optional"/>
				<Ref Element = "descriptors" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "impact" Type = "Enumeration" AttValue = "ACTION_INFO">
				<DDML:Doc>  The impact attribute defines the impact of executing the operation and must be one of:
	ACTION, The operation changes the state of the MBean component (write operation).
	INFO, The operation should not alter the  state of the MBean component (read operation).
	ACTION_INFO, The operation behaves like a  read/write operation.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "ACTION"/>
					<EnumerationValue Value = "INFO"/>
					<EnumerationValue Value = "ACTION_INFO"/>
				</Enumeration>
			</AttDef>
		</AttGroup>
		<AttDef Name = "impact" Type = "Enumeration" AttValue = "ACTION_INFO">
			<DDML:Doc>  The impact attribute defines the impact of executing the operation and must be one of:
	ACTION, The operation changes the state of the MBean component (write operation).
	INFO, The operation should not alter the  state of the MBean component (read operation).
	ACTION_INFO, The operation behaves like a  read/write operation.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "ACTION"/>
				<EnumerationValue Value = "INFO"/>
				<EnumerationValue Value = "ACTION_INFO"/>
			</Enumeration>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "descriptors">
		<dtdsource><![CDATA[
<BR>&lt;!--  The descriptors element contains all the descriptors for a containing element, as subelements.The descriptors suggested in the jmx spec have predefined elements, whereas custom descriptors havea generic element.--&gt;<BR>&lt;!ELEMENT descriptors (interceptors? , persistence? , currencyTimeLimit? , state-action-on-update? , display-name? , default? , value? , persistence-manager? , descriptor*)&gt;]]>

		</dtdsource>
		<DDML:Doc>  The descriptors element contains all the descriptors for a containing element, as subelements.
The descriptors suggested in the jmx spec have predefined elements, whereas custom descriptors have
a generic element.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "interceptors" Frequency = "Optional"/>
				<Ref Element = "persistence" Frequency = "Optional"/>
				<Ref Element = "currencyTimeLimit" Frequency = "Optional"/>
				<Ref Element = "state-action-on-update" Frequency = "Optional"/>
				<Ref Element = "display-name" Frequency = "Optional"/>
				<Ref Element = "default" Frequency = "Optional"/>
				<Ref Element = "value" Frequency = "Optional"/>
				<Ref Element = "persistence-manager" Frequency = "Optional"/>
				<Ref Element = "descriptor" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "interceptors">
		<dtdsource><![CDATA[
<BR>&lt;!-- The interceptors element specifies a customized stack of interceptorsthat will be used in place of the default stack. Currently this is onlyused when specified at the mbean level, but it could define a custom attributeor operation level interceptor stack in the future.--&gt;<BR>&lt;!ELEMENT interceptors (interceptor+)&gt;]]>

		</dtdsource>
		<DDML:Doc> The interceptors element specifies a customized stack of interceptors
that will be used in place of the default stack. Currently this is only
used when specified at the mbean level, but it could define a custom attribute
or operation level interceptor stack in the future.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "interceptor" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "interceptor">
		<dtdsource><![CDATA[
<BR>&lt;!-- The interceptor element specifies a custom interceptor stack to insertahead of the standard ModelBean consisting of:   org.jboss.mx.interceptor.PersistenceInterceptor   org.jboss.mx.interceptor.MBeanAttributeInterceptor   org.jboss.mx.interceptor.ObjectReferenceInterceptorEach interceptor must implement the org.jboss.mx.interceptor.Interceptorinterface, and must have either a no-arg constructor, or a constructorthat accepts a javax.management.modelmbean.ModelMBeanInfo.--&gt;<BR>&lt;!ELEMENT interceptor ANY&gt;<BR>&lt;!ATTLIST interceptor  code CDATA  #REQUIRED &gt;]]>

		</dtdsource>
		<DDML:Doc> The interceptor element specifies a custom interceptor stack to insert
ahead of the standard ModelBean consisting of:
   org.jboss.mx.interceptor.PersistenceInterceptor
   org.jboss.mx.interceptor.MBeanAttributeInterceptor
   org.jboss.mx.interceptor.ObjectReferenceInterceptor

Each interceptor must implement the org.jboss.mx.interceptor.Interceptor
interface, and must have either a no-arg constructor, or a constructor
that accepts a javax.management.modelmbean.ModelMBeanInfo.

		</DDML:Doc>
		<Model>
			<Any/>
		</Model>
		<AttGroup>
			<AttDef Name = "code" Required = "Yes"/>
		</AttGroup>
		<AttDef Name = "code" Required = "Yes"/>
	</ElementDecl>
	<ElementDecl Name = "persistence">
		<dtdsource><![CDATA[
<BR>&lt;!-- The persistence element contains descriptors for the persistPolicy,persistPeriod, persistLocation, and persistName properties suggested by the spec.--&gt;<BR>&lt;!ELEMENT persistence EMPTY&gt;<BR>&lt;!-- The persistPolicy defines how attributes should be persisted and must be one of:Never, attribute values are transient values that are never persistedOnUpdate, attribute values are persisted whenever they are updatedOnTimer, attribute values are persisted based on the time given by the persistPeriod.NoMoreOftenThan, attribute values are persisted when updated unless but no moreoten than the persistPeriod.--&gt;<BR>&lt;!ATTLIST persistence persistPolicy    (Never | OnUpdate | NoMoreOftenThan | OnTimer )  #IMPLIED&gt;<BR>&lt;!-- The persistPeriod attribute gives the update frequency in milliseconds ifthe perisitPolicy attribute is NoMoreOftenThan or OnTimer.--&gt;<BR>&lt;!ATTLIST persistence persistPeriod   CDATA  #IMPLIED&gt;<BR>&lt;!-- The persistLocation attribute specifies the location of the persistencestore. Its form depends on the JMX implementation. Currently this should referto a directory into which the attributes will be serialized.--&gt;<BR>&lt;!ATTLIST persistence persistLocation CDATA  #IMPLIED&gt;<BR>&lt;!-- The  persistName attribute can be used in conjunction with thepersistLocation attribute to further qualify the persistent store location. Fora directory persistLocation the persistName specifies the file to which theattributes are stored within the directory.--&gt;<BR>&lt;!ATTLIST persistence persistName     CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The persistence element contains descriptors for the persistPolicy,
persistPeriod, persistLocation, and persistName properties suggested by the spec.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "persistPolicy" Type = "Enumeration">
				<DDML:Doc> The persistPolicy defines how attributes should be persisted and must be one of:
	Never, attribute values are transient values that are never persisted
	OnUpdate, attribute values are persisted whenever they are updated
	OnTimer, attribute values are persisted based on the time given by the persistPeriod.
	NoMoreOftenThan, attribute values are persisted when updated unless but no more
	oten than the persistPeriod.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "Never"/>
					<EnumerationValue Value = "OnUpdate"/>
					<EnumerationValue Value = "NoMoreOftenThan"/>
					<EnumerationValue Value = "OnTimer"/>
				</Enumeration>
			</AttDef>
			<AttDef Name = "persistPeriod">
				<DDML:Doc> The persistPeriod attribute gives the update frequency in milliseconds if
the perisitPolicy attribute is NoMoreOftenThan or OnTimer.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "persistLocation">
				<DDML:Doc> The persistLocation attribute specifies the location of the persistence
store. Its form depends on the JMX implementation. Currently this should refer
to a directory into which the attributes will be serialized.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "persistName">
				<DDML:Doc> The  persistName attribute can be used in conjunction with the
persistLocation attribute to further qualify the persistent store location. For
a directory persistLocation the persistName specifies the file to which the
attributes are stored within the directory.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "persistPolicy" Type = "Enumeration">
			<DDML:Doc> The persistPolicy defines how attributes should be persisted and must be one of:
	Never, attribute values are transient values that are never persisted
	OnUpdate, attribute values are persisted whenever they are updated
	OnTimer, attribute values are persisted based on the time given by the persistPeriod.
	NoMoreOftenThan, attribute values are persisted when updated unless but no more
	oten than the persistPeriod.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "Never"/>
				<EnumerationValue Value = "OnUpdate"/>
				<EnumerationValue Value = "NoMoreOftenThan"/>
				<EnumerationValue Value = "OnTimer"/>
			</Enumeration>
		</AttDef>
		<AttDef Name = "persistPeriod">
			<DDML:Doc> The persistPeriod attribute gives the update frequency in milliseconds if
the perisitPolicy attribute is NoMoreOftenThan or OnTimer.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "persistLocation">
			<DDML:Doc> The persistLocation attribute specifies the location of the persistence
store. Its form depends on the JMX implementation. Currently this should refer
to a directory into which the attributes will be serialized.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "persistName">
			<DDML:Doc> The  persistName attribute can be used in conjunction with the
persistLocation attribute to further qualify the persistent store location. For
a directory persistLocation the persistName specifies the file to which the
attributes are stored within the directory.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "currencyTimeLimit">
		<dtdsource><![CDATA[
<BR>&lt;!-- The currencyTimeLimit element specifies the time in seconds that a cachedvalue of an attribute remains valid.--&gt;<BR>&lt;!ELEMENT currencyTimeLimit EMPTY&gt;<BR>&lt;!--  The value attribute gives the  currencyTimeLimit in seconds. A 0 valueindicates that an attribute value should always be retrieved from the mbean andnever cached. A -1 value indicates that a cache value is always valid.--&gt;<BR>&lt;!ATTLIST currencyTimeLimit value CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The currencyTimeLimit element specifies the time in seconds that a cached
value of an attribute remains valid.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value">
				<DDML:Doc>  The value attribute gives the  currencyTimeLimit in seconds. A 0 value
indicates that an attribute value should always be retrieved from the mbean and
never cached. A -1 value indicates that a cache value is always valid.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value">
			<DDML:Doc>  The value attribute gives the  currencyTimeLimit in seconds. A 0 value
indicates that an attribute value should always be retrieved from the mbean and
never cached. A -1 value indicates that a cache value is always valid.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "state-action-on-update">
		<dtdsource><![CDATA[
<BR>&lt;!--  The state-action-on-update element specifies the what happens to an mbeanwhen one of its attributes is updated. The action is given by the value attribute.--&gt;<BR>&lt;!ELEMENT state-action-on-update EMPTY&gt;<BR>&lt;!-- The value value attribute defines what happens to the mbean lifecyclestate when one of its attributes is update. It must be one of:keep-running,restart,reconfigure,reinstantiate--&gt;<BR>&lt;!ATTLIST state-action-on-update value  (keep-running | restart | reconfigure | reinstantiate )  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc>  The state-action-on-update element specifies the what happens to an mbean
when one of its attributes is updated. The action is given by the value attribute.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value" Type = "Enumeration">
				<DDML:Doc> The value value attribute defines what happens to the mbean lifecycle
state when one of its attributes is update. It must be one of:
	keep-running,
	restart,
	reconfigure,
	reinstantiate

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "keep-running"/>
					<EnumerationValue Value = "restart"/>
					<EnumerationValue Value = "reconfigure"/>
					<EnumerationValue Value = "reinstantiate"/>
				</Enumeration>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value" Type = "Enumeration">
			<DDML:Doc> The value value attribute defines what happens to the mbean lifecycle
state when one of its attributes is update. It must be one of:
	keep-running,
	restart,
	reconfigure,
	reinstantiate

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "keep-running"/>
				<EnumerationValue Value = "restart"/>
				<EnumerationValue Value = "reconfigure"/>
				<EnumerationValue Value = "reinstantiate"/>
			</Enumeration>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "display-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The displayName element specifies the human friendly name of an item --&gt;<BR>&lt;!ELEMENT display-name EMPTY&gt;<BR>&lt;!--   The value attribute gives the string representation of the displayName --&gt;<BR>&lt;!ATTLIST display-name value CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc>  The displayName element specifies the human friendly name of an item
 
		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value">
				<DDML:Doc>   The value attribute gives the string representation of the displayName
 
				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value">
			<DDML:Doc>   The value attribute gives the string representation of the displayName
 
			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "persistence-manager">
		<dtdsource><![CDATA[
<BR>&lt;!-- The persistence-manager element give the name of a class to use as thepersistence manager. --&gt;<BR>&lt;!ELEMENT persistence-manager EMPTY&gt;<BR>&lt;!--  The value attribute specifies the class name that supplies theorg.jboss.mx.persistence.PersistenceManager interface implementation. --&gt;<BR>&lt;!ATTLIST persistence-manager value CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The persistence-manager element give the name of a class to use as the
persistence manager.
 
		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value">
				<DDML:Doc>  The value attribute specifies the class name that supplies the
org.jboss.mx.persistence.PersistenceManager interface implementation.
 
				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value">
			<DDML:Doc>  The value attribute specifies the class name that supplies the
org.jboss.mx.persistence.PersistenceManager interface implementation.
 
			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "default">
		<dtdsource><![CDATA[
<BR>&lt;!-- The default element specifes a default value to use when a field has notbeen set.--&gt;<BR>&lt;!ELEMENT default EMPTY&gt;<BR>&lt;!--  The value  attribute  gives the default value representation--&gt;<BR>&lt;!ATTLIST default value CDATA  #REQUIRED&gt;]]>

		</dtdsource>
		<DDML:Doc> The default element specifes a default value to use when a field has not
been set.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value" Required = "Yes">
				<DDML:Doc>  The value  attribute  gives the default value representation

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value" Required = "Yes">
			<DDML:Doc>  The value  attribute  gives the default value representation

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "value">
		<dtdsource><![CDATA[
<BR>&lt;!-- The value element specifies a management attribute's current value--&gt;<BR>&lt;!ELEMENT value EMPTY&gt;<BR>&lt;!--  The  value  (initial) value for attribute  --&gt;<BR>&lt;!ATTLIST value value CDATA  #REQUIRED&gt;]]>

		</dtdsource>
		<DDML:Doc> The value element specifies a management attribute's current value

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "value" Required = "Yes">
				<DDML:Doc>  The  value  (initial) value for attribute  </DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "value" Required = "Yes">
			<DDML:Doc>  The  value  (initial) value for attribute  </DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "descriptor">
		<dtdsource><![CDATA[
<BR>&lt;!--  The  descriptor element--&gt;<BR>&lt;!ELEMENT descriptor EMPTY&gt;<BR>&lt;!-- The name attribute specifies the type of the descriptor. --&gt;<BR>&lt;!ATTLIST descriptor name  CDATA  #REQUIRED&gt;<BR>&lt;!-- The value attribute specifies the descriptor value.--&gt;<BR>&lt;!ATTLIST descriptor value CDATA  #REQUIRED&gt;]]>

		</dtdsource>
		<DDML:Doc>  The  descriptor element

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "name" Required = "Yes">
				<DDML:Doc> The name attribute specifies the type of the descriptor.
 
				</DDML:Doc>
			</AttDef>
			<AttDef Name = "value" Required = "Yes">
				<DDML:Doc> The value attribute specifies the descriptor value.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "name" Required = "Yes">
			<DDML:Doc> The name attribute specifies the type of the descriptor.
 
			</DDML:Doc>
		</AttDef>
		<AttDef Name = "value" Required = "Yes">
			<DDML:Doc> The value attribute specifies the descriptor value.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "notification">
		<dtdsource><![CDATA[
<BR>&lt;!-- The notification element describes a management notification. The name  element contains the fully qualified name of the notification class and  the notification-type element contains the dot-separated notification  type string.--&gt;<BR>&lt;!ELEMENT notification (description? , name , notification-type+ , descriptors?)&gt;]]>

		</dtdsource>
		<DDML:Doc> The notification element describes a management notification. The name
  element contains the fully qualified name of the notification class and
  the notification-type element contains the dot-separated notification
  type string.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "name"/>
				<Ref Element = "notification-type" Frequency = "OneOrMore"/>
				<Ref Element = "descriptors" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "parameter">
		<dtdsource><![CDATA[
<BR>&lt;!-- The parameter element specifies an operation parameter--&gt;<BR>&lt;!ELEMENT parameter (description? , name , type)&gt;]]>

		</dtdsource>
		<DDML:Doc> The parameter element specifies an operation parameter

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "name"/>
				<Ref Element = "type"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "name">
		<dtdsource><![CDATA[
<BR>&lt;!-- The name element is used to define the fundamental name of a component, such as thembean JMX name, the name of an attribute, constructor, operation, notification, etc. This is acase-sensitive code centric name. For notifications the name if the class name of the eventobject, javax.management.Notification or a subclass.--&gt;<BR>&lt;!ELEMENT name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The name element is used to define the fundamental name of a component, such as the
mbean JMX name, the name of an attribute, constructor, operation, notification, etc. This is a
case-sensitive code centric name. For notifications the name if the class name of the event
object, javax.management.Notification or a subclass.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "description">
		<dtdsource><![CDATA[
<BR>&lt;!-- The description element provides human readable descriptive text for constructors,attributes, operations, paramters, notifications, etc.--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The description element provides human readable descriptive text for constructors,
attributes, operations, paramters, notifications, etc.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "type">
		<dtdsource><![CDATA[
<BR>&lt;!-- The type element specifies a fully qualified name of a Java type.--&gt;<BR>&lt;!ELEMENT type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The type element specifies a fully qualified name of a Java type.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "return-type">
		<dtdsource><![CDATA[
<BR>&lt;!-- The return-type element specifies the return type of an operation. If not given or emptyit is assumed to be the void type.--&gt;<BR>&lt;!ELEMENT return-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The return-type element specifies the return type of an operation. If not given or empty
it is assumed to be the void type.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "notification-type">
		<dtdsource><![CDATA[
<BR>&lt;!-- The notification-type element speicifies the types of notifications that may be sent. These arethe value that will be seen as the the javax.management.Notification.type attribute.--&gt;<BR>&lt;!ELEMENT notification-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The notification-type element speicifies the types of notifications that may be sent. These are
the value that will be seen as the the javax.management.Notification.type attribute.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
</DocumentDef>