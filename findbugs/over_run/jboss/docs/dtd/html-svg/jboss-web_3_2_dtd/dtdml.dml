<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "jboss-web_3_2.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR>&lt;?xml encoding='UTF-8' ?&gt;<BR><BR>&lt;!-- The JBoss specific elements used to integrate the servlet 2.3 web.xmlelements into a JBoss deployment. This version applies to the JBoss 3.2.xreleases.DOCTYPE jboss-web    PUBLIC &quot;-//JBoss//DTD Web Application 2.3V2//EN&quot;    &quot;http://www.jboss.org/j2ee/dtd/jboss-web_3_2.dtd&quot;--&gt;<BR>&lt;!-- The jboss-web element is the root element.--&gt;<BR>&lt;!ELEMENT jboss-web (class-loading? , security-domain? , context-root? , virtual-host? , use-session-cookies? , replication-config? , resource-env-ref* , resource-ref* , ejb-ref* , ejb-local-ref* , depends*)&gt;<BR>&lt;!-- The class-loading element allows one to override the default classloading behavior of the web container. You can specify theExamples:   <BR>&lt;class-loading java2ClassLoadingCompliance='false'/&gt;   <BR>&lt;class-loading java2ClassLoadingCompliance='false'&gt;      <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;         ...      <BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;--&gt;<BR>&lt;!ELEMENT class-loading (loader-repository?)&gt;<BR>&lt;!-- The java2ClassLoadingCompliance attribute indicates if the normal Java2parent first class loading model should be used over the servlet 2.3 webcontainer first model.--&gt;<BR>&lt;!ATTLIST class-loading java2ClassLoadingCompliance CDATA  #IMPLIED&gt;<BR>&lt;!-- The loader-repository specifies the name of the UnifiedLoaderRepository   MBean to use for the ear to provide ear level scoping of classes deployed   in the ear. It is a unique JMX ObjectName string. It may also specify   an arbitrary configuration by including a loader-repository-config element.Examples:   <BR>&lt;class-loading&gt;   <BR>&lt;loader-repository&gt;jboss.test:loader=cts-cmp2v1-sar.ear<BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;   <BR>&lt;class-loading java2ClassLoadingCompliance='false'&gt;   <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;      dot.com:loader=unique-archive-name      <BR>&lt;loader-repository-config configParserClass='dot.com.LoaderParser'&gt;         java2ParentDelegaton=true      <BR>&lt;/loader-repository-config&gt;   <BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;--&gt;<BR>&lt;!ELEMENT loader-repository (#PCDATA | loader-repository-config)*&gt;<BR>&lt;!-- The loaderRepositoryClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepository implementation.--&gt;<BR>&lt;!ATTLIST loader-repository loaderRepositoryClass CDATA  #IMPLIED&gt;<BR>&lt;!-- The loader-repository-config element specifies any arbitrary configurationfragment for use in configuring the loader-repository instance. The actualcontent of this element is specific to the loaderRepositoryClass and thecode parsing the element.--&gt;<BR>&lt;!ELEMENT loader-repository-config (#PCDATA)&gt;<BR>&lt;!-- The configParserClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParserimplementation to use to parse the loader-repository-config content.--&gt;<BR>&lt;!ATTLIST loader-repository-config configParserClass CDATA  #IMPLIED&gt;<BR>&lt;!-- The context-root element specifies the context root of a webapplication. This is normally specified at the ear level using the standardJ2EE application.xml descriptor, but it may be given here for standalone wars.This should not override the application.xml level specification.--&gt;<BR>&lt;!ELEMENT context-root (#PCDATA)&gt;<BR>&lt;!-- The security-domain element allows one to specify a module widesecurity manager domain. It specifies the JNDI name of the securitymanager that implements the org.jboss.security.AuthenticationManager andorg.jboss.security.RealmMapping interfaces for the domain.--&gt;<BR>&lt;!ELEMENT security-domain (#PCDATA)&gt;<BR>&lt;!-- The virtual-host element allows one to specify which virtual host the warshould be deployed to. Example, to specify that a war should be deployed to thewww.jboss-store.org virtual host add the following virtual-host element:   <BR>&lt;virtual-host&gt;www.jboss-store.org<BR>&lt;/virtual-host&gt;--&gt;<BR>&lt;!ELEMENT virtual-host (#PCDATA)&gt;<BR>&lt;!--The resource-env-ref element maps from the servlet ENC relative nameof the resource-env-ref to the deployment environment JNDI name ofthe administered object resource.Example:    <BR>&lt;resource-env-ref&gt;        <BR>&lt;resource-env-ref-name&gt;jms/NewsTopic<BR>&lt;/resource-env-ref-name&gt;        <BR>&lt;jndi-name&gt;topic/NewsTopic<BR>&lt;/jndi-name&gt;    <BR>&lt;/resource-env-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-env-ref (resource-env-ref-name , jndi-name)&gt;<BR>&lt;!-- The resource-env-ref-name specifies the name of the web.xmlresource-env-ref-name element which this mapping applies.--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;<BR>&lt;!--The resource-ref element maps from the servlet ENC relative nameof the resource-ref to the deployment environment JNDI name ofthe resource manager connection factory.Example:    <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name&gt;jdbc/TheDataSource<BR>&lt;/res-ref-name&gt;        <BR>&lt;jndi-name&gt;java:/DefaultDS<BR>&lt;/jndi-name&gt;    <BR>&lt;/resource-ref&gt;    <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name&gt;jdbc/TheDataSource<BR>&lt;/res-ref-name&gt;        <BR>&lt;res-url&gt;http://x.y.z<BR>&lt;/res-url&gt;    <BR>&lt;/resource-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-ref (res-ref-name , (jndi-name | res-url))&gt;<BR>&lt;!-- The res-ref-name specifies the name of the web.xml res-ref-name elementwhich this mapping applies.--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;<BR>&lt;!-- The ejb-ref element maps from the servlet ENC relative nameof the ejb reference to the deployment environment JNDI name ofthe bean.Example:    <BR>&lt;ejb-ref&gt;        <BR>&lt;ejb-ref-name&gt;ejb/Bean0<BR>&lt;/ejb-ref-name&gt;        <BR>&lt;jndi-name&gt;deployed/ejbs/Bean0<BR>&lt;/jndi-name&gt;    <BR>&lt;/ejb-ref&gt;--&gt;<BR>&lt;!ELEMENT ejb-ref (ejb-ref-name , jndi-name)&gt;<BR>&lt;!-- The ejb-local-ref element maps from the servlet ENC relative nameof the ejb local reference to the deployment environment JNDI name ofthe bean.Example:    <BR>&lt;ejb-local-ref&gt;        <BR>&lt;ejb-ref-name&gt;ejb/Bean0<BR>&lt;/ejb-ref-name&gt;        <BR>&lt;local-jndi-name&gt;deployed/ejbs/Bean0<BR>&lt;/local-jndi-name&gt;    <BR>&lt;/ejb-local-ref&gt;--&gt;<BR>&lt;!ELEMENT ejb-local-ref (ejb-ref-name , (local-jndi-name | jndi-name))&gt;<BR>&lt;!-- The ejb-ref-name element gives the ENC relative name usedin the web.xml ejb-ref-name element.Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;<BR>&lt;!-- The jndi-name element specifies the JNDI name of the deployedobject to which the servlet ENC binding will link to via a JNDILinkRef.Used in: resource-ref, resource-env-ref, ejb-ref--&gt;<BR>&lt;!ELEMENT jndi-name (#PCDATA)&gt;<BR>&lt;!--  The JNDI name under with the local home interface should be bound  Used in: ejb-local-ref--&gt;<BR>&lt;!ELEMENT local-jndi-name (#PCDATA)&gt;<BR>&lt;!-- The res-url element value is url a URL string.   Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-url (#PCDATA)&gt;<BR>&lt;!-- The depends element gives a JMX ObjectName of a service on which thecontainer or ejb depends.--&gt;<BR>&lt;!ELEMENT depends (#PCDATA)&gt;<BR>&lt;!-- The use-session-cookies element controls wether this context uses session cookies     or not.Example:     <BR>&lt;use-session-cookies&gt;true<BR>&lt;/use-session-cookies&gt;--&gt;<BR>&lt;!ELEMENT use-session-cookies (#PCDATA)&gt;<BR>&lt;!--   HTTP Session clustering configuration (optional tags)--&gt;<BR>&lt;!ELEMENT replication-config (replication-trigger? , replication-type?)&gt;<BR>&lt;!--   Clustering only: Determines when the container should consider that a session                    must be replicated accross the cluster.                    Possible values are:                    1 - &quot;SET_AND_GET&quot;                    2 - &quot;SET_AND_NON_PRIMITIVE_GET&quot; (default value)                    3 - &quot;SET&quot;    The first option is conservative but not optimal (performance-wise): it will replicate the   session even if its content has not been modified but simply accessed. There is no deterministic   way to know if the content of an attribute is not itself modified. Consequently, by default, not   hypothesis can be done. It is up to the developer to tell us if we can trust this policy.    The second option is conservative but will only replicate if a non-primitive Object has been   accessed (Integer, Long, String, etc. which are immutables). It is the default value.    The third option considers that the developer will explicitely call setAttribute on the session   if it has to be replicated.Examples:         <BR>&lt;replication-trigger&gt;SET_AND_GET<BR>&lt;/replication-trigger&gt;      or         <BR>&lt;replication-trigger&gt;SET_AND_NON_PRIMITIVE_GET<BR>&lt;/replication-trigger&gt;      or         <BR>&lt;replication-trigger&gt;SET<BR>&lt;/replication-trigger&gt;--&gt;<BR>&lt;!ELEMENT replication-trigger (#PCDATA)&gt;<BR>&lt;!--   Clustering only: Determines how the container will replicate your sessions.                    Possible values are:                    1 - &quot;SYNC&quot; (default)                    2 - &quot;ASYNC&quot;    The first option will make sure that the session is actually copied to other nodes of the cluster    before finishing returning the HTTP request. The session removal and expiration are    an exception to this rule.    The second option will asynchronously replicate sessions to the other nodes. This is more    efficient (better scalability and performance) but in case of failover you cannot be sure the    session has actually arrive on the other node(s).Examples:         <BR>&lt;replication-type&gt;SYNC<BR>&lt;/replication-type&gt;      or         <BR>&lt;replication-type&gt;ASYNC<BR>&lt;/replication-type&gt;--&gt;<BR>&lt;!ELEMENT replication-type (#PCDATA)&gt;]]>

	</dtdsource>
	<ElementDecl Name = "jboss-web">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT jboss-web (class-loading? , security-domain? , context-root? , virtual-host? , use-session-cookies? , replication-config? , resource-env-ref* , resource-ref* , ejb-ref* , ejb-local-ref* , depends*)&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "class-loading" Frequency = "Optional"/>
				<Ref Element = "security-domain" Frequency = "Optional"/>
				<Ref Element = "context-root" Frequency = "Optional"/>
				<Ref Element = "virtual-host" Frequency = "Optional"/>
				<Ref Element = "use-session-cookies" Frequency = "Optional"/>
				<Ref Element = "replication-config" Frequency = "Optional"/>
				<Ref Element = "resource-env-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "ejb-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "ejb-local-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "depends" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "class-loading">
		<dtdsource><![CDATA[
<BR>&lt;!-- The class-loading element allows one to override the default classloading behavior of the web container. You can specify theExamples:   <BR>&lt;class-loading java2ClassLoadingCompliance='false'/&gt;   <BR>&lt;class-loading java2ClassLoadingCompliance='false'&gt;      <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;         ...      <BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;--&gt;<BR>&lt;!ELEMENT class-loading (loader-repository?)&gt;<BR>&lt;!-- The java2ClassLoadingCompliance attribute indicates if the normal Java2parent first class loading model should be used over the servlet 2.3 webcontainer first model.--&gt;<BR>&lt;!ATTLIST class-loading java2ClassLoadingCompliance CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The class-loading element allows one to override the default class
loading behavior of the web container. You can specify the
Examples:
   &amp;lt;class-loading java2ClassLoadingCompliance='false'/&amp;gt;

   &amp;lt;class-loading java2ClassLoadingCompliance='false'&amp;gt;
      &amp;lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&amp;gt;
         ...
      &amp;lt;/loader-repository&amp;gt;
   &amp;lt;/class-loading&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "loader-repository" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "java2ClassLoadingCompliance">
				<DDML:Doc> The java2ClassLoadingCompliance attribute indicates if the normal Java2
parent first class loading model should be used over the servlet 2.3 web
container first model.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "java2ClassLoadingCompliance">
			<DDML:Doc> The java2ClassLoadingCompliance attribute indicates if the normal Java2
parent first class loading model should be used over the servlet 2.3 web
container first model.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "loader-repository">
		<dtdsource><![CDATA[
<BR>&lt;!-- The loader-repository specifies the name of the UnifiedLoaderRepository   MBean to use for the ear to provide ear level scoping of classes deployed   in the ear. It is a unique JMX ObjectName string. It may also specify   an arbitrary configuration by including a loader-repository-config element.Examples:   <BR>&lt;class-loading&gt;   <BR>&lt;loader-repository&gt;jboss.test:loader=cts-cmp2v1-sar.ear<BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;   <BR>&lt;class-loading java2ClassLoadingCompliance='false'&gt;   <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;      dot.com:loader=unique-archive-name      <BR>&lt;loader-repository-config configParserClass='dot.com.LoaderParser'&gt;         java2ParentDelegaton=true      <BR>&lt;/loader-repository-config&gt;   <BR>&lt;/loader-repository&gt;   <BR>&lt;/class-loading&gt;--&gt;<BR>&lt;!ELEMENT loader-repository (#PCDATA | loader-repository-config)*&gt;<BR>&lt;!-- The loaderRepositoryClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepository implementation.--&gt;<BR>&lt;!ATTLIST loader-repository loaderRepositoryClass CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The loader-repository specifies the name of the UnifiedLoaderRepository
   MBean to use for the ear to provide ear level scoping of classes deployed
   in the ear. It is a unique JMX ObjectName string. It may also specify
   an arbitrary configuration by including a loader-repository-config element.

Examples:
   &amp;lt;class-loading&amp;gt;
   &amp;lt;loader-repository&amp;gt;jboss.test:loader=cts-cmp2v1-sar.ear&amp;lt;/loader-repository&amp;gt;
   &amp;lt;/class-loading&amp;gt;

   &amp;lt;class-loading java2ClassLoadingCompliance='false'&amp;gt;
   &amp;lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&amp;gt;
      dot.com:loader=unique-archive-name
      &amp;lt;loader-repository-config configParserClass='dot.com.LoaderParser'&amp;gt;
         java2ParentDelegaton=true
      &amp;lt;/loader-repository-config&amp;gt;
   &amp;lt;/loader-repository&amp;gt;
   &amp;lt;/class-loading&amp;gt;

		</DDML:Doc>
		<Model>
			<Mixed>
				<Ref Element = "loader-repository-config"/>
			</Mixed>
		</Model>
		<AttGroup>
			<AttDef Name = "loaderRepositoryClass">
				<DDML:Doc> The loaderRepositoryClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepository implementation.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "loaderRepositoryClass">
			<DDML:Doc> The loaderRepositoryClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepository implementation.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "loader-repository-config">
		<dtdsource><![CDATA[
<BR>&lt;!-- The loader-repository-config element specifies any arbitrary configurationfragment for use in configuring the loader-repository instance. The actualcontent of this element is specific to the loaderRepositoryClass and thecode parsing the element.--&gt;<BR>&lt;!ELEMENT loader-repository-config (#PCDATA)&gt;<BR>&lt;!-- The configParserClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParserimplementation to use to parse the loader-repository-config content.--&gt;<BR>&lt;!ATTLIST loader-repository-config configParserClass CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The loader-repository-config element specifies any arbitrary configuration
fragment for use in configuring the loader-repository instance. The actual
content of this element is specific to the loaderRepositoryClass and the
code parsing the element.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "configParserClass">
				<DDML:Doc> The configParserClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParser
implementation to use to parse the loader-repository-config content.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "configParserClass">
			<DDML:Doc> The configParserClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParser
implementation to use to parse the loader-repository-config content.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "context-root">
		<dtdsource><![CDATA[
<BR>&lt;!-- The context-root element specifies the context root of a webapplication. This is normally specified at the ear level using the standardJ2EE application.xml descriptor, but it may be given here for standalone wars.This should not override the application.xml level specification.--&gt;<BR>&lt;!ELEMENT context-root (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The context-root element specifies the context root of a web
application. This is normally specified at the ear level using the standard
J2EE application.xml descriptor, but it may be given here for standalone wars.
This should not override the application.xml level specification.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "security-domain">
		<dtdsource><![CDATA[
<BR>&lt;!-- The security-domain element allows one to specify a module widesecurity manager domain. It specifies the JNDI name of the securitymanager that implements the org.jboss.security.AuthenticationManager andorg.jboss.security.RealmMapping interfaces for the domain.--&gt;<BR>&lt;!ELEMENT security-domain (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The security-domain element allows one to specify a module wide
security manager domain. It specifies the JNDI name of the security
manager that implements the org.jboss.security.AuthenticationManager and
org.jboss.security.RealmMapping interfaces for the domain.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "virtual-host">
		<dtdsource><![CDATA[
<BR>&lt;!-- The virtual-host element allows one to specify which virtual host the warshould be deployed to. Example, to specify that a war should be deployed to thewww.jboss-store.org virtual host add the following virtual-host element:   <BR>&lt;virtual-host&gt;www.jboss-store.org<BR>&lt;/virtual-host&gt;--&gt;<BR>&lt;!ELEMENT virtual-host (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The virtual-host element allows one to specify which virtual host the war
should be deployed to. Example, to specify that a war should be deployed to the
www.jboss-store.org virtual host add the following virtual-host element:
   &amp;lt;virtual-host&amp;gt;www.jboss-store.org&amp;lt;/virtual-host&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-env-ref element maps from the servlet ENC relative nameof the resource-env-ref to the deployment environment JNDI name ofthe administered object resource.Example:    <BR>&lt;resource-env-ref&gt;        <BR>&lt;resource-env-ref-name&gt;jms/NewsTopic<BR>&lt;/resource-env-ref-name&gt;        <BR>&lt;jndi-name&gt;topic/NewsTopic<BR>&lt;/jndi-name&gt;    <BR>&lt;/resource-env-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-env-ref (resource-env-ref-name , jndi-name)&gt;]]>

		</dtdsource>
		<DDML:Doc>The resource-env-ref element maps from the servlet ENC relative name
of the resource-env-ref to the deployment environment JNDI name of
the administered object resource.
Example:
    &amp;lt;resource-env-ref&amp;gt;
        &amp;lt;resource-env-ref-name&amp;gt;jms/NewsTopic&amp;lt;/resource-env-ref-name&amp;gt;
        &amp;lt;jndi-name&amp;gt;topic/NewsTopic&amp;lt;/jndi-name&amp;gt;
    &amp;lt;/resource-env-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "resource-env-ref-name"/>
				<Ref Element = "jndi-name"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!-- The resource-env-ref-name specifies the name of the web.xmlresource-env-ref-name element which this mapping applies.--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The resource-env-ref-name specifies the name of the web.xml
resource-env-ref-name element which this mapping applies.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-ref element maps from the servlet ENC relative nameof the resource-ref to the deployment environment JNDI name ofthe resource manager connection factory.Example:    <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name&gt;jdbc/TheDataSource<BR>&lt;/res-ref-name&gt;        <BR>&lt;jndi-name&gt;java:/DefaultDS<BR>&lt;/jndi-name&gt;    <BR>&lt;/resource-ref&gt;    <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name&gt;jdbc/TheDataSource<BR>&lt;/res-ref-name&gt;        <BR>&lt;res-url&gt;http://x.y.z<BR>&lt;/res-url&gt;    <BR>&lt;/resource-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-ref (res-ref-name , (jndi-name | res-url))&gt;]]>

		</dtdsource>
		<DDML:Doc>The resource-ref element maps from the servlet ENC relative name
of the resource-ref to the deployment environment JNDI name of
the resource manager connection factory.
Example:
    &amp;lt;resource-ref&amp;gt;
        &amp;lt;res-ref-name&amp;gt;jdbc/TheDataSource&amp;lt;/res-ref-name&amp;gt;
        &amp;lt;jndi-name&amp;gt;java:/DefaultDS&amp;lt;/jndi-name&amp;gt;
    &amp;lt;/resource-ref&amp;gt;

    &amp;lt;resource-ref&amp;gt;
        &amp;lt;res-ref-name&amp;gt;jdbc/TheDataSource&amp;lt;/res-ref-name&amp;gt;
        &amp;lt;res-url&amp;gt;http://x.y.z&amp;lt;/res-url&amp;gt;
    &amp;lt;/resource-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "res-ref-name"/>
				<Choice>
					<Ref Element = "jndi-name"/>
					<Ref Element = "res-url"/>
				</Choice>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!-- The res-ref-name specifies the name of the web.xml res-ref-name elementwhich this mapping applies.--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The res-ref-name specifies the name of the web.xml res-ref-name element
which this mapping applies.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref">
		<dtdsource><![CDATA[
<BR>&lt;!-- The ejb-ref element maps from the servlet ENC relative nameof the ejb reference to the deployment environment JNDI name ofthe bean.Example:    <BR>&lt;ejb-ref&gt;        <BR>&lt;ejb-ref-name&gt;ejb/Bean0<BR>&lt;/ejb-ref-name&gt;        <BR>&lt;jndi-name&gt;deployed/ejbs/Bean0<BR>&lt;/jndi-name&gt;    <BR>&lt;/ejb-ref&gt;--&gt;<BR>&lt;!ELEMENT ejb-ref (ejb-ref-name , jndi-name)&gt;]]>

		</dtdsource>
		<DDML:Doc> The ejb-ref element maps from the servlet ENC relative name
of the ejb reference to the deployment environment JNDI name of
the bean.
Example:
    &amp;lt;ejb-ref&amp;gt;
        &amp;lt;ejb-ref-name&amp;gt;ejb/Bean0&amp;lt;/ejb-ref-name&amp;gt;
        &amp;lt;jndi-name&amp;gt;deployed/ejbs/Bean0&amp;lt;/jndi-name&amp;gt;
    &amp;lt;/ejb-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-ref-name"/>
				<Ref Element = "jndi-name"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-local-ref">
		<dtdsource><![CDATA[
<BR>&lt;!-- The ejb-local-ref element maps from the servlet ENC relative nameof the ejb local reference to the deployment environment JNDI name ofthe bean.Example:    <BR>&lt;ejb-local-ref&gt;        <BR>&lt;ejb-ref-name&gt;ejb/Bean0<BR>&lt;/ejb-ref-name&gt;        <BR>&lt;local-jndi-name&gt;deployed/ejbs/Bean0<BR>&lt;/local-jndi-name&gt;    <BR>&lt;/ejb-local-ref&gt;--&gt;<BR>&lt;!ELEMENT ejb-local-ref (ejb-ref-name , (local-jndi-name | jndi-name))&gt;]]>

		</dtdsource>
		<DDML:Doc> The ejb-local-ref element maps from the servlet ENC relative name
of the ejb local reference to the deployment environment JNDI name of
the bean.
Example:
    &amp;lt;ejb-local-ref&amp;gt;
        &amp;lt;ejb-ref-name&amp;gt;ejb/Bean0&amp;lt;/ejb-ref-name&amp;gt;
        &amp;lt;local-jndi-name&amp;gt;deployed/ejbs/Bean0&amp;lt;/local-jndi-name&amp;gt;
    &amp;lt;/ejb-local-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-ref-name"/>
				<Choice>
					<Ref Element = "local-jndi-name"/>
					<Ref Element = "jndi-name"/>
				</Choice>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!-- The ejb-ref-name element gives the ENC relative name usedin the web.xml ejb-ref-name element.Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The ejb-ref-name element gives the ENC relative name used
in the web.xml ejb-ref-name element.

Used in: ejb-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!-- The jndi-name element specifies the JNDI name of the deployedobject to which the servlet ENC binding will link to via a JNDILinkRef.Used in: resource-ref, resource-env-ref, ejb-ref--&gt;<BR>&lt;!ELEMENT jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The jndi-name element specifies the JNDI name of the deployed
object to which the servlet ENC binding will link to via a JNDI
LinkRef.

Used in: resource-ref, resource-env-ref, ejb-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "local-jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The JNDI name under with the local home interface should be bound  Used in: ejb-local-ref--&gt;<BR>&lt;!ELEMENT local-jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The JNDI name under with the local home interface should be bound

  Used in: ejb-local-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-url">
		<dtdsource><![CDATA[
<BR>&lt;!-- The res-url element value is url a URL string.   Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-url (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The res-url element value is url a URL string.

   Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "depends">
		<dtdsource><![CDATA[
<BR>&lt;!-- The depends element gives a JMX ObjectName of a service on which thecontainer or ejb depends.--&gt;<BR>&lt;!ELEMENT depends (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The depends element gives a JMX ObjectName of a service on which the
container or ejb depends.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "use-session-cookies">
		<dtdsource><![CDATA[
<BR>&lt;!-- The use-session-cookies element controls wether this context uses session cookies     or not.Example:     <BR>&lt;use-session-cookies&gt;true<BR>&lt;/use-session-cookies&gt;--&gt;<BR>&lt;!ELEMENT use-session-cookies (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The use-session-cookies element controls wether this context uses session cookies
     or not.

Example:
     &amp;lt;use-session-cookies&amp;gt;true&amp;lt;/use-session-cookies&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "replication-config">
		<dtdsource><![CDATA[
<BR>&lt;!--   HTTP Session clustering configuration (optional tags)--&gt;<BR>&lt;!ELEMENT replication-config (replication-trigger? , replication-type?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
   HTTP Session clustering configuration (optional tags)

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "replication-trigger" Frequency = "Optional"/>
				<Ref Element = "replication-type" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "replication-trigger">
		<dtdsource><![CDATA[
<BR>&lt;!--   Clustering only: Determines when the container should consider that a session                    must be replicated accross the cluster.                    Possible values are:                    1 - &quot;SET_AND_GET&quot;                    2 - &quot;SET_AND_NON_PRIMITIVE_GET&quot; (default value)                    3 - &quot;SET&quot;    The first option is conservative but not optimal (performance-wise): it will replicate the   session even if its content has not been modified but simply accessed. There is no deterministic   way to know if the content of an attribute is not itself modified. Consequently, by default, not   hypothesis can be done. It is up to the developer to tell us if we can trust this policy.    The second option is conservative but will only replicate if a non-primitive Object has been   accessed (Integer, Long, String, etc. which are immutables). It is the default value.    The third option considers that the developer will explicitely call setAttribute on the session   if it has to be replicated.Examples:         <BR>&lt;replication-trigger&gt;SET_AND_GET<BR>&lt;/replication-trigger&gt;      or         <BR>&lt;replication-trigger&gt;SET_AND_NON_PRIMITIVE_GET<BR>&lt;/replication-trigger&gt;      or         <BR>&lt;replication-trigger&gt;SET<BR>&lt;/replication-trigger&gt;--&gt;<BR>&lt;!ELEMENT replication-trigger (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
   Clustering only: Determines when the container should consider that a session
                    must be replicated accross the cluster.
                    Possible values are:
                    1 - "SET_AND_GET"
                    2 - "SET_AND_NON_PRIMITIVE_GET" (default value)
                    3 - "SET"

    The first option is conservative but not optimal (performance-wise): it will replicate the
   session even if its content has not been modified but simply accessed. There is no deterministic
   way to know if the content of an attribute is not itself modified. Consequently, by default, not
   hypothesis can be done. It is up to the developer to tell us if we can trust this policy.
    The second option is conservative but will only replicate if a non-primitive Object has been
   accessed (Integer, Long, String, etc. which are immutables). It is the default value.
    The third option considers that the developer will explicitely call setAttribute on the session
   if it has to be replicated.

Examples:
         &amp;lt;replication-trigger&amp;gt;SET_AND_GET&amp;lt;/replication-trigger&amp;gt;
      or
         &amp;lt;replication-trigger&amp;gt;SET_AND_NON_PRIMITIVE_GET&amp;lt;/replication-trigger&amp;gt;
      or
         &amp;lt;replication-trigger&amp;gt;SET&amp;lt;/replication-trigger&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "replication-type">
		<dtdsource><![CDATA[
<BR>&lt;!--   Clustering only: Determines how the container will replicate your sessions.                    Possible values are:                    1 - &quot;SYNC&quot; (default)                    2 - &quot;ASYNC&quot;    The first option will make sure that the session is actually copied to other nodes of the cluster    before finishing returning the HTTP request. The session removal and expiration are    an exception to this rule.    The second option will asynchronously replicate sessions to the other nodes. This is more    efficient (better scalability and performance) but in case of failover you cannot be sure the    session has actually arrive on the other node(s).Examples:         <BR>&lt;replication-type&gt;SYNC<BR>&lt;/replication-type&gt;      or         <BR>&lt;replication-type&gt;ASYNC<BR>&lt;/replication-type&gt;--&gt;<BR>&lt;!ELEMENT replication-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
   Clustering only: Determines how the container will replicate your sessions.
                    Possible values are:
                    1 - "SYNC" (default)
                    2 - "ASYNC"

    The first option will make sure that the session is actually copied to other nodes of the cluster
    before finishing returning the HTTP request. The session removal and expiration are
    an exception to this rule.
    The second option will asynchronously replicate sessions to the other nodes. This is more
    efficient (better scalability and performance) but in case of failover you cannot be sure the
    session has actually arrive on the other node(s).

Examples:
         &amp;lt;replication-type&amp;gt;SYNC&amp;lt;/replication-type&amp;gt;
      or
         &amp;lt;replication-type&amp;gt;ASYNC&amp;lt;/replication-type&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
</DocumentDef>