<?xml version = "1.0"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "application-client_1_3.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR><BR>&lt;!--Copyright (c) 2000 Sun Microsystems, Inc.,901 San Antonio Road,Palo Alto, California 94303, U.S.A.All rights reserved.Sun Microsystems, Inc. has intellectual property rights relating totechnology embodied in the product that is described in this document.In particular, and without limitation, these intellectual propertyrights may include one or more of the U.S. patents listed athttp://www.sun.com/patents and one or more additional patents orpending patent applications in the U.S. and in other countries.This document and the product to which it pertains are distributedunder licenses restricting their use, copying, distribution, anddecompilation.  This document may be reproduced and distributed but maynot be changed without prior written authorization of Sun and itslicensors, if any.Third-party software, including font technology, is copyrighted andlicensed from Sun suppliers.Sun,  Sun Microsystems,  the Sun logo,  Java,  JavaServer Pages,  JavaNaming and Directory Interface,  JDBC,  JDK,  JavaMail and  andEnterprise JavaBeans are trademarks or registered trademarks of SunMicrosystems, Inc. in the U.S. and other countries.Federal Acquisitions: Commercial Software - Government Users Subject toStandard License Terms and Conditions.DOCUMENTATION IS PROVIDED &quot;AS IS&quot; AND ALL EXPRESS OR IMPLIEDCONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING ANY IMPLIEDWARRANTY OF MERCHANTABILITY, FITNESS FOR FOR A PARTICULAR PURPOSE ORNON-INFRINGEMENT, ARE DISCLAIMED, EXCEPT TO THE EXTENT THAT SUCHDISCLAIMERS ARE HELD TO BE LEGALLY INVALID._________________________________________________________________________Copyright (c) 2000 Sun Microsystems, Inc.,901 San Antonio Road,Palo Alto, California 94303, E'tats-Unis.Tous droits re'serve's.Sun Microsystems, Inc. a les droits de proprie'te' intellectuelsrelatants a` la technologie incorpore'e dans le produit qui est de'critdans ce document. En particulier, et sans la limitation, ces droits deproprie'te' intellectuels peuvent inclure un ou plus des brevetsame'ricains e'nume're's a` http://www.sun.com/patents et un ou lesbrevets plus supple'mentaires ou les applications de brevet en attentedans les E'tats-Unis et dans les autres pays.Ce produit ou document est prote'ge' par un copyright et distribue'avec des licences qui en restreignent l'utilisation, la copie, ladistribution, et la de'compilation.  Ce documention associe n peute^tre reproduite et distribuer, par quelque moyen que ce soit, sansl'autorisation pre'alable et e'crite de Sun et de ses bailleurs delicence, le cas e'che'ant.Le logiciel de'tenu par des tiers, et qui comprend la technologierelative aux polices de caracte`res, est prote'ge' par un copyright etlicencie' par des fournisseurs de Sun.Sun,  Sun Microsystems,  le logo Sun,  Java,  JavaServer Pages,  JavaNaming and Directory Interface,  JDBC,  JDK,  JavaMail et  andEnterprise JavaBeans sont des marques de fabrique ou des marquesde'pose'es de Sun Microsystems, Inc. aux E'tats-Unis et dans d'autrespays.LA DOCUMENTATION EST FOURNIE &quot;EN L'E'TAT&quot; ET TOUTES AUTRES CONDITIONS,DECLARATIONS ET GARANTIES EXPRESSES OU TACITES SONT FORMELLEMENTEXCLUES, DANS LA MESURE AUTORISEE PAR LA LOI APPLICABLE, Y COMPRISNOTAMMENT TOUTE GARANTIE IMPLICITE RELATIVE A LA QUALITE MARCHANDE, AL'APTITUDE A UNE UTILISATION PARTICULIERE OU A L'ABSENCE DECONTREFAC,ON.--&gt;<BR>&lt;!--This is the XML DTD for the J2EE 1.3 application client deploymentdescriptor.  All J2EE 1.3 application client deployment descriptorsmust include a DOCTYPE of the following form:  <BR>&lt;!DOCTYPE application-client PUBLIC&quot;-//Sun Microsystems, Inc.//DTD J2EE Application Client 1.3//EN&quot;&quot;http://java.sun.com/dtd/application-client_1_3.dtd&quot;&gt;--&gt;<BR>&lt;!--The following conventions apply to all J2EE deployment descriptorelements unless indicated otherwise.- In elements that contain PCDATA, leading and trailing whitespace  in the data may be ignored.- In elements whose value is an &quot;enumerated type&quot;, the value is  case sensitive.- In elements that specify a pathname to a file within the same  JAR file, relative filenames (i.e., those not starting with &quot;/&quot;)  are considered relative to the root of the JAR file's namespace.  Absolute filenames (i.e., those starting with &quot;/&quot;) also specify  names in the root of the JAR file's namespace.  In general, relative  names are preferred.  The exception is .war files where absolute  names are preferred for consistency with the servlet API.--&gt;<BR>&lt;!--The application-client element is the root element of an applicationclient deployment descriptor.  The application client deploymentdescriptor describes the EJB components and external resourcesreferenced by the application client.--&gt;<BR>&lt;!ELEMENT application-client (icon? , display-name , description? , env-entry* , ejb-ref* , resource-ref* , resource-env-ref* , callback-handler?)&gt;<BR>&lt;!--The ID mechanism is to allow tools that produce additional deploymentinformation (i.e., information beyond the standard deploymentdescriptor information) to store the non-standard information in aseparate file, and easily refer from these tool-specific files to theinformation in the standard deployment descriptor.Tools are not allowed to add the non-standard information into thestandard deployment descriptor.--&gt;<BR>&lt;!ATTLIST application-client id ID  #IMPLIED&gt;<BR>&lt;!--The callback-handler element names a class provided by theapplication.  The class must have a no args constructor and mustimplement the javax.security.auth.callback.CallbackHandler interface.The class will be instantiated by the application client container andused by the container to collect authentication information from theuser.Used in: application-client--&gt;<BR>&lt;!ELEMENT callback-handler (#PCDATA)&gt;<BR>&lt;!ATTLIST callback-handler  id ID  #IMPLIED &gt;<BR>&lt;!--The description element is used to provide text describing the parentelement.  The description element should include any information thatthe application client jar file producer wants to provide to the consumer ofthe application client jar file (i.e., to the Deployer). Typically, the toolsused by the application client jar file consumer will display the descriptionwhen processing the parent element that contains the description.Used in: application-client, ejb-ref, env-entry, resource-env-ref,resource-ref--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;<BR>&lt;!ATTLIST description  id ID  #IMPLIED &gt;<BR>&lt;!--The display-name element contains a short name that is intended to bedisplayed by tools.  The display name need not be unique.Used in: application-clientExample:<BR>&lt;display-name&gt;Employee Self Service<BR>&lt;/display-name&gt;--&gt;<BR>&lt;!ELEMENT display-name (#PCDATA)&gt;<BR>&lt;!ATTLIST display-name  id ID  #IMPLIED &gt;<BR>&lt;!--The ejb-link element is used in the ejb-ref elementto specify that an EJB reference is linked to anenterprise bean.The name in the ejb-link element is composed of apath name specifying the ejb-jar containing the referenced enterprisebean with the ejb-name of the target bean appended and separated fromthe path name by &quot;#&quot;.  The path name is relative to the jar filecontaining the application client that is referencing the enterprise bean.This allows multiple enterprise beans with the same ejb-name to beuniquely identified.Used in: ejb-refExamples:<BR>&lt;ejb-link&gt;EmployeeRecord<BR>&lt;/ejb-link&gt;<BR>&lt;ejb-link&gt;../products/product.jar#ProductEJB<BR>&lt;/ejb-link&gt;--&gt;<BR>&lt;!ELEMENT ejb-link (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-link  id ID  #IMPLIED &gt;<BR>&lt;!--The ejb-ref element is used for the declaration of a reference toan enterprise bean's home. The declaration consists of:- an optional description- the EJB reference name used in the code of  the application client that's referencing the enterprise bean- the expected type of the referenced enterprise bean- the expected home and remote interfaces of the referenced  enterprise bean- optional ejb-link information, used to specify the referenced  enterprise beanUsed in: application-client--&gt;<BR>&lt;!ELEMENT ejb-ref (description? , ejb-ref-name , ejb-ref-type , home , remote , ejb-link?)&gt;<BR>&lt;!ATTLIST ejb-ref  id ID  #IMPLIED &gt;<BR>&lt;!--The ejb-ref-name element contains the name of an EJB reference. TheEJB reference is an entry in the application client's environment and isrelative to the java:comp/env context.  The name must be uniquewithin the application client.It is recommended that name is prefixed with &quot;ejb/&quot;.Used in: ejb-refExample:<BR>&lt;ejb-ref-name&gt;ejb/Payroll<BR>&lt;/ejb-ref-name&gt;--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-ref-name  id ID  #IMPLIED &gt;<BR>&lt;!--The ejb-ref-type element contains the expected type of thereferenced enterprise bean.The ejb-ref-type element must be one of the following:<BR>&lt;ejb-ref-type&gt;Entity<BR>&lt;/ejb-ref-type&gt;<BR>&lt;ejb-ref-type&gt;Session<BR>&lt;/ejb-ref-type&gt;Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-type (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-ref-type  id ID  #IMPLIED &gt;<BR>&lt;!--The env-entry element contains the declaration of an application client'senvironment entry. The declaration consists of an optionaldescription, the name of the environment entry, and an optionalvalue.  If a value is not specified, one must be suppliedduring deployment.Used in: application-client--&gt;<BR>&lt;!ELEMENT env-entry (description? , env-entry-name , env-entry-type , env-entry-value?)&gt;<BR>&lt;!ATTLIST env-entry  id ID  #IMPLIED &gt;<BR>&lt;!--The env-entry-name element contains the name of an application client'senvironment entry.  The name is a JNDI name relative to thejava:comp/env context.  The name must be unique within an application client.Used in: env-entryExample:<BR>&lt;env-entry-name&gt;minAmount<BR>&lt;/env-entry-name&gt;--&gt;<BR>&lt;!ELEMENT env-entry-name (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-name  id ID  #IMPLIED &gt;<BR>&lt;!--The env-entry-type element contains the fully-qualified Java type ofthe environment entry value that is expected by the application client'scode.The following are the legal values of env-entry-type:java.lang.Booleanjava.lang.Bytejava.lang.Characterjava.lang.Stringjava.lang.Shortjava.lang.Integerjava.lang.Longjava.lang.Floatjava.lang.DoubleUsed in: env-entryExample:<BR>&lt;env-entry-type&gt;java.lang.Boolean<BR>&lt;/env-entry-type&gt;--&gt;<BR>&lt;!ELEMENT env-entry-type (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-type  id ID  #IMPLIED &gt;<BR>&lt;!--The env-entry-value element contains the value of an application client'senvironment entry. The value must be a String that is valid for theconstructor of the specified type that takes a single Stringparameter, or for java.lang.Character, a single character.Used in: env-entryExample:<BR>&lt;env-entry-value&gt;100.00<BR>&lt;/env-entry-value&gt;--&gt;<BR>&lt;!ELEMENT env-entry-value (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-value  id ID  #IMPLIED &gt;<BR>&lt;!--The home element contains the fully-qualified name of the enterprisebean's home interface.Used in: ejb-refExample:<BR>&lt;home&gt;com.aardvark.payroll.PayrollHome<BR>&lt;/home&gt;--&gt;<BR>&lt;!ELEMENT home (#PCDATA)&gt;<BR>&lt;!ATTLIST home  id ID  #IMPLIED &gt;<BR>&lt;!--The icon element contains small-icon and large-icon elements thatspecify the file names for small and a large GIF or JPEG icon imagesused to represent the parent element in a GUI tool.Used in: application-client--&gt;<BR>&lt;!ELEMENT icon (small-icon? , large-icon?)&gt;<BR>&lt;!ATTLIST icon  id ID  #IMPLIED &gt;<BR>&lt;!--The large-icon element contains the name of a filecontaining a large (32 x 32) icon image. The filename is a relative path within the application client'sjar file.The image may be either in the JPEG or GIF format.The icon can be used by tools.Used in: iconExample:<BR>&lt;large-icon&gt;employee-service-icon32x32.jpg<BR>&lt;/large-icon&gt;--&gt;<BR>&lt;!ELEMENT large-icon (#PCDATA)&gt;<BR>&lt;!ATTLIST large-icon  id ID  #IMPLIED &gt;<BR>&lt;!--The remote element contains the fully-qualified name of the enterprisebean's remote interface.Used in: ejb-refExample:<BR>&lt;remote&gt;com.wombat.empl.EmployeeService<BR>&lt;/remote&gt;--&gt;<BR>&lt;!ELEMENT remote (#PCDATA)&gt;<BR>&lt;!ATTLIST remote  id ID  #IMPLIED &gt;<BR>&lt;!--The res-auth element specifies whether the application client code signson programmatically to the resource manager, or whether the Containerwill sign on to the resource manager on behalf of the application client. In thelatter case, the Container uses information that is supplied by theDeployer.The value of this element must be one of the two following:<BR>&lt;res-auth&gt;Application<BR>&lt;/res-auth&gt;<BR>&lt;res-auth&gt;Container<BR>&lt;/res-auth&gt;Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-auth (#PCDATA)&gt;<BR>&lt;!ATTLIST res-auth  id ID  #IMPLIED &gt;<BR>&lt;!--The res-ref-name element specifies the name of a resource managerconnection factory reference.  The name is a JNDI name relative to thejava:comp/env context.  The name must be unique within an application client.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST res-ref-name  id ID  #IMPLIED &gt;<BR>&lt;!--The res-sharing-scope element specifies whether connections obtainedthrough the given resource manager connection factory reference can beshared. The value of this element, if specified, must be one of thetwo following:<BR>&lt;res-sharing-scope&gt;Shareable<BR>&lt;/res-sharing-scope&gt;<BR>&lt;res-sharing-scope&gt;Unshareable<BR>&lt;/res-sharing-scope&gt;The default value is Shareable.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-sharing-scope (#PCDATA)&gt;<BR>&lt;!ATTLIST res-sharing-scope  id ID  #IMPLIED &gt;<BR>&lt;!--The res-type element specifies the type of the data source. The typeis specified by the fully qualified Java language class or interfaceexpected to be implemented by the data source.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-type (#PCDATA)&gt;<BR>&lt;!ATTLIST res-type  id ID  #IMPLIED &gt;<BR>&lt;!--The resource-env-ref element contains a declaration of an application client'sreference to an administered object associated with a resourcein the application client's environment.  It consists of an optionaldescription, the resource environment reference name, and anindication of the resource environment reference type expected bythe application client code.Used in: application-clientExample:<BR>&lt;resource-env-ref&gt;    <BR>&lt;resource-env-ref-name&gt;jms/StockQueue<BR>&lt;/resource-env-ref-name&gt;    <BR>&lt;resource-env-ref-type&gt;javax.jms.Queue<BR>&lt;/resource-env-ref-type&gt;<BR>&lt;/resource-env-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-env-ref (description? , resource-env-ref-name , resource-env-ref-type)&gt;<BR>&lt;!ATTLIST resource-env-ref  id ID  #IMPLIED &gt;<BR>&lt;!--The resource-env-ref-name element specifies the name of a resourceenvironment reference; its value is the environment entry name used inthe application client code.  The name is a JNDI name relative to thejava:comp/env context and must be unique within an application client.Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST resource-env-ref-name  id ID  #IMPLIED &gt;<BR>&lt;!--The resource-env-ref-type element specifies the type of a resourceenvironment reference.  It is the fully qualified name of a Javalanguage class or interface.Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-type (#PCDATA)&gt;<BR>&lt;!ATTLIST resource-env-ref-type  id ID  #IMPLIED &gt;<BR>&lt;!--The resource-ref element contains a declaration of an application client'sreference to an external resource. It consists of an optionaldescription, the resource manager connection factory reference name,the indication of the resource manager connection factory typeexpected by the application client code, the type of authentication(Application or Container), and an optional specification of theshareability of connections obtained from the resource (Shareable orUnshareable).Used in: application-clientExample:    <BR>&lt;resource-ref&gt;<BR>&lt;res-ref-name&gt;jdbc/EmployeeAppDB<BR>&lt;/res-ref-name&gt;<BR>&lt;res-type&gt;javax.sql.DataSource<BR>&lt;/res-type&gt;<BR>&lt;res-auth&gt;Container<BR>&lt;/res-auth&gt;<BR>&lt;res-sharing-scope&gt;Shareable<BR>&lt;/res-sharing-scope&gt;    <BR>&lt;/resource-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-ref (description? , res-ref-name , res-type , res-auth , res-sharing-scope?)&gt;<BR>&lt;!ATTLIST resource-ref  id ID  #IMPLIED &gt;<BR>&lt;!--The small-icon element contains the name of a filecontaining a small (16 x 16) icon image. The filename is a relative path within the application client'sjar file.The image may be either in the JPEG or GIF format.The icon can be used by tools.Used in: iconExample:<BR>&lt;small-icon&gt;employee-service-icon16x16.jpg<BR>&lt;/small-icon&gt;--&gt;<BR>&lt;!ELEMENT small-icon (#PCDATA)&gt;<BR>&lt;!ATTLIST small-icon  id ID  #IMPLIED &gt;]]>

	</dtdsource>
	<ElementDecl Name = "application-client">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT application-client (icon? , display-name , description? , env-entry* , ejb-ref* , resource-ref* , resource-env-ref* , callback-handler?)&gt;<BR>&lt;!--The ID mechanism is to allow tools that produce additional deploymentinformation (i.e., information beyond the standard deploymentdescriptor information) to store the non-standard information in aseparate file, and easily refer from these tool-specific files to theinformation in the standard deployment descriptor.Tools are not allowed to add the non-standard information into thestandard deployment descriptor.--&gt;<BR>&lt;!ATTLIST application-client id ID  #IMPLIED&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "icon" Frequency = "Optional"/>
				<Ref Element = "display-name"/>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "env-entry" Frequency = "ZeroOrMore"/>
				<Ref Element = "ejb-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-env-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "callback-handler" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID">
				<DDML:Doc>
The ID mechanism is to allow tools that produce additional deployment
information (i.e., information beyond the standard deployment
descriptor information) to store the non-standard information in a
separate file, and easily refer from these tool-specific files to the
information in the standard deployment descriptor.

Tools are not allowed to add the non-standard information into the
standard deployment descriptor.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "callback-handler">
		<dtdsource><![CDATA[
<BR>&lt;!--The callback-handler element names a class provided by theapplication.  The class must have a no args constructor and mustimplement the javax.security.auth.callback.CallbackHandler interface.The class will be instantiated by the application client container andused by the container to collect authentication information from theuser.Used in: application-client--&gt;<BR>&lt;!ELEMENT callback-handler (#PCDATA)&gt;<BR>&lt;!ATTLIST callback-handler  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The callback-handler element names a class provided by the
application.  The class must have a no args constructor and must
implement the javax.security.auth.callback.CallbackHandler interface.
The class will be instantiated by the application client container and
used by the container to collect authentication information from the
user.

Used in: application-client

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "description">
		<dtdsource><![CDATA[
<BR>&lt;!--The description element is used to provide text describing the parentelement.  The description element should include any information thatthe application client jar file producer wants to provide to the consumer ofthe application client jar file (i.e., to the Deployer). Typically, the toolsused by the application client jar file consumer will display the descriptionwhen processing the parent element that contains the description.Used in: application-client, ejb-ref, env-entry, resource-env-ref,resource-ref--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;<BR>&lt;!ATTLIST description  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The description element is used to provide text describing the parent
element.  The description element should include any information that
the application client jar file producer wants to provide to the consumer of
the application client jar file (i.e., to the Deployer). Typically, the tools
used by the application client jar file consumer will display the description
when processing the parent element that contains the description.

Used in: application-client, ejb-ref, env-entry, resource-env-ref,
resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "display-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The display-name element contains a short name that is intended to bedisplayed by tools.  The display name need not be unique.Used in: application-clientExample:<BR>&lt;display-name&gt;Employee Self Service<BR>&lt;/display-name&gt;--&gt;<BR>&lt;!ELEMENT display-name (#PCDATA)&gt;<BR>&lt;!ATTLIST display-name  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The display-name element contains a short name that is intended to be
displayed by tools.  The display name need not be unique.

Used in: application-client

Example:

&amp;lt;display-name&amp;gt;Employee Self Service&amp;lt;/display-name&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "ejb-link">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-link element is used in the ejb-ref elementto specify that an EJB reference is linked to anenterprise bean.The name in the ejb-link element is composed of apath name specifying the ejb-jar containing the referenced enterprisebean with the ejb-name of the target bean appended and separated fromthe path name by &quot;#&quot;.  The path name is relative to the jar filecontaining the application client that is referencing the enterprise bean.This allows multiple enterprise beans with the same ejb-name to beuniquely identified.Used in: ejb-refExamples:<BR>&lt;ejb-link&gt;EmployeeRecord<BR>&lt;/ejb-link&gt;<BR>&lt;ejb-link&gt;../products/product.jar#ProductEJB<BR>&lt;/ejb-link&gt;--&gt;<BR>&lt;!ELEMENT ejb-link (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-link  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-link element is used in the ejb-ref element
to specify that an EJB reference is linked to an
enterprise bean.

The name in the ejb-link element is composed of a
path name specifying the ejb-jar containing the referenced enterprise
bean with the ejb-name of the target bean appended and separated from
the path name by "#".  The path name is relative to the jar file
containing the application client that is referencing the enterprise bean.
This allows multiple enterprise beans with the same ejb-name to be
uniquely identified.

Used in: ejb-ref

Examples:

	&amp;lt;ejb-link&amp;gt;EmployeeRecord&amp;lt;/ejb-link&amp;gt;

	&amp;lt;ejb-link&amp;gt;../products/product.jar#ProductEJB&amp;lt;/ejb-link&amp;gt;


		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-ref element is used for the declaration of a reference toan enterprise bean's home. The declaration consists of:- an optional description- the EJB reference name used in the code of  the application client that's referencing the enterprise bean- the expected type of the referenced enterprise bean- the expected home and remote interfaces of the referenced  enterprise bean- optional ejb-link information, used to specify the referenced  enterprise beanUsed in: application-client--&gt;<BR>&lt;!ELEMENT ejb-ref (description? , ejb-ref-name , ejb-ref-type , home , remote , ejb-link?)&gt;<BR>&lt;!ATTLIST ejb-ref  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-ref element is used for the declaration of a reference to
an enterprise bean's home. The declaration consists of:

	- an optional description
	- the EJB reference name used in the code of
	  the application client that's referencing the enterprise bean
	- the expected type of the referenced enterprise bean
	- the expected home and remote interfaces of the referenced
	  enterprise bean
	- optional ejb-link information, used to specify the referenced
	  enterprise bean

Used in: application-client

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "ejb-ref-name"/>
				<Ref Element = "ejb-ref-type"/>
				<Ref Element = "home"/>
				<Ref Element = "remote"/>
				<Ref Element = "ejb-link" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-ref-name element contains the name of an EJB reference. TheEJB reference is an entry in the application client's environment and isrelative to the java:comp/env context.  The name must be uniquewithin the application client.It is recommended that name is prefixed with &quot;ejb/&quot;.Used in: ejb-refExample:<BR>&lt;ejb-ref-name&gt;ejb/Payroll<BR>&lt;/ejb-ref-name&gt;--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-ref-name  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-ref-name element contains the name of an EJB reference. The
EJB reference is an entry in the application client's environment and is
relative to the java:comp/env context.  The name must be unique
within the application client.

It is recommended that name is prefixed with "ejb/".

Used in: ejb-ref

Example:

&amp;lt;ejb-ref-name&amp;gt;ejb/Payroll&amp;lt;/ejb-ref-name&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref-type">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-ref-type element contains the expected type of thereferenced enterprise bean.The ejb-ref-type element must be one of the following:<BR>&lt;ejb-ref-type&gt;Entity<BR>&lt;/ejb-ref-type&gt;<BR>&lt;ejb-ref-type&gt;Session<BR>&lt;/ejb-ref-type&gt;Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-type (#PCDATA)&gt;<BR>&lt;!ATTLIST ejb-ref-type  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-ref-type element contains the expected type of the
referenced enterprise bean.

The ejb-ref-type element must be one of the following:

	&amp;lt;ejb-ref-type&amp;gt;Entity&amp;lt;/ejb-ref-type&amp;gt;
	&amp;lt;ejb-ref-type&amp;gt;Session&amp;lt;/ejb-ref-type&amp;gt;

Used in: ejb-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "env-entry">
		<dtdsource><![CDATA[
<BR>&lt;!--The env-entry element contains the declaration of an application client'senvironment entry. The declaration consists of an optionaldescription, the name of the environment entry, and an optionalvalue.  If a value is not specified, one must be suppliedduring deployment.Used in: application-client--&gt;<BR>&lt;!ELEMENT env-entry (description? , env-entry-name , env-entry-type , env-entry-value?)&gt;<BR>&lt;!ATTLIST env-entry  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The env-entry element contains the declaration of an application client's
environment entry. The declaration consists of an optional
description, the name of the environment entry, and an optional
value.  If a value is not specified, one must be supplied
during deployment.

Used in: application-client

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "env-entry-name"/>
				<Ref Element = "env-entry-type"/>
				<Ref Element = "env-entry-value" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "env-entry-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The env-entry-name element contains the name of an application client'senvironment entry.  The name is a JNDI name relative to thejava:comp/env context.  The name must be unique within an application client.Used in: env-entryExample:<BR>&lt;env-entry-name&gt;minAmount<BR>&lt;/env-entry-name&gt;--&gt;<BR>&lt;!ELEMENT env-entry-name (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-name  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The env-entry-name element contains the name of an application client's
environment entry.  The name is a JNDI name relative to the
java:comp/env context.  The name must be unique within an application client.

Used in: env-entry

Example:

&amp;lt;env-entry-name&amp;gt;minAmount&amp;lt;/env-entry-name&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "env-entry-type">
		<dtdsource><![CDATA[
<BR>&lt;!--The env-entry-type element contains the fully-qualified Java type ofthe environment entry value that is expected by the application client'scode.The following are the legal values of env-entry-type:java.lang.Booleanjava.lang.Bytejava.lang.Characterjava.lang.Stringjava.lang.Shortjava.lang.Integerjava.lang.Longjava.lang.Floatjava.lang.DoubleUsed in: env-entryExample:<BR>&lt;env-entry-type&gt;java.lang.Boolean<BR>&lt;/env-entry-type&gt;--&gt;<BR>&lt;!ELEMENT env-entry-type (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-type  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The env-entry-type element contains the fully-qualified Java type of
the environment entry value that is expected by the application client's
code.

The following are the legal values of env-entry-type:

	java.lang.Boolean
	java.lang.Byte
	java.lang.Character
	java.lang.String
	java.lang.Short
	java.lang.Integer
	java.lang.Long
	java.lang.Float
	java.lang.Double


Used in: env-entry

Example:

&amp;lt;env-entry-type&amp;gt;java.lang.Boolean&amp;lt;/env-entry-type&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "env-entry-value">
		<dtdsource><![CDATA[
<BR>&lt;!--The env-entry-value element contains the value of an application client'senvironment entry. The value must be a String that is valid for theconstructor of the specified type that takes a single Stringparameter, or for java.lang.Character, a single character.Used in: env-entryExample:<BR>&lt;env-entry-value&gt;100.00<BR>&lt;/env-entry-value&gt;--&gt;<BR>&lt;!ELEMENT env-entry-value (#PCDATA)&gt;<BR>&lt;!ATTLIST env-entry-value  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The env-entry-value element contains the value of an application client's
environment entry. The value must be a String that is valid for the
constructor of the specified type that takes a single String
parameter, or for java.lang.Character, a single character.

Used in: env-entry

Example:

&amp;lt;env-entry-value&amp;gt;100.00&amp;lt;/env-entry-value&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "home">
		<dtdsource><![CDATA[
<BR>&lt;!--The home element contains the fully-qualified name of the enterprisebean's home interface.Used in: ejb-refExample:<BR>&lt;home&gt;com.aardvark.payroll.PayrollHome<BR>&lt;/home&gt;--&gt;<BR>&lt;!ELEMENT home (#PCDATA)&gt;<BR>&lt;!ATTLIST home  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The home element contains the fully-qualified name of the enterprise
bean's home interface.

Used in: ejb-ref

Example:

&amp;lt;home&amp;gt;com.aardvark.payroll.PayrollHome&amp;lt;/home&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "icon">
		<dtdsource><![CDATA[
<BR>&lt;!--The icon element contains small-icon and large-icon elements thatspecify the file names for small and a large GIF or JPEG icon imagesused to represent the parent element in a GUI tool.Used in: application-client--&gt;<BR>&lt;!ELEMENT icon (small-icon? , large-icon?)&gt;<BR>&lt;!ATTLIST icon  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The icon element contains small-icon and large-icon elements that
specify the file names for small and a large GIF or JPEG icon images
used to represent the parent element in a GUI tool.

Used in: application-client

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "small-icon" Frequency = "Optional"/>
				<Ref Element = "large-icon" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "large-icon">
		<dtdsource><![CDATA[
<BR>&lt;!--The large-icon element contains the name of a filecontaining a large (32 x 32) icon image. The filename is a relative path within the application client'sjar file.The image may be either in the JPEG or GIF format.The icon can be used by tools.Used in: iconExample:<BR>&lt;large-icon&gt;employee-service-icon32x32.jpg<BR>&lt;/large-icon&gt;--&gt;<BR>&lt;!ELEMENT large-icon (#PCDATA)&gt;<BR>&lt;!ATTLIST large-icon  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The large-icon element contains the name of a file
containing a large (32 x 32) icon image. The file
name is a relative path within the application client's
jar file.

The image may be either in the JPEG or GIF format.
The icon can be used by tools.

Used in: icon

Example:

&amp;lt;large-icon&amp;gt;employee-service-icon32x32.jpg&amp;lt;/large-icon&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "remote">
		<dtdsource><![CDATA[
<BR>&lt;!--The remote element contains the fully-qualified name of the enterprisebean's remote interface.Used in: ejb-refExample:<BR>&lt;remote&gt;com.wombat.empl.EmployeeService<BR>&lt;/remote&gt;--&gt;<BR>&lt;!ELEMENT remote (#PCDATA)&gt;<BR>&lt;!ATTLIST remote  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The remote element contains the fully-qualified name of the enterprise
bean's remote interface.

Used in: ejb-ref

Example:

&amp;lt;remote&amp;gt;com.wombat.empl.EmployeeService&amp;lt;/remote&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "res-auth">
		<dtdsource><![CDATA[
<BR>&lt;!--The res-auth element specifies whether the application client code signson programmatically to the resource manager, or whether the Containerwill sign on to the resource manager on behalf of the application client. In thelatter case, the Container uses information that is supplied by theDeployer.The value of this element must be one of the two following:<BR>&lt;res-auth&gt;Application<BR>&lt;/res-auth&gt;<BR>&lt;res-auth&gt;Container<BR>&lt;/res-auth&gt;Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-auth (#PCDATA)&gt;<BR>&lt;!ATTLIST res-auth  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The res-auth element specifies whether the application client code signs
on programmatically to the resource manager, or whether the Container
will sign on to the resource manager on behalf of the application client. In the
latter case, the Container uses information that is supplied by the
Deployer.

The value of this element must be one of the two following:

	&amp;lt;res-auth&amp;gt;Application&amp;lt;/res-auth&amp;gt;
	&amp;lt;res-auth&amp;gt;Container&amp;lt;/res-auth&amp;gt;

Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "res-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The res-ref-name element specifies the name of a resource managerconnection factory reference.  The name is a JNDI name relative to thejava:comp/env context.  The name must be unique within an application client.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST res-ref-name  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The res-ref-name element specifies the name of a resource manager
connection factory reference.  The name is a JNDI name relative to the
java:comp/env context.  The name must be unique within an application client.

Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "res-sharing-scope">
		<dtdsource><![CDATA[
<BR>&lt;!--The res-sharing-scope element specifies whether connections obtainedthrough the given resource manager connection factory reference can beshared. The value of this element, if specified, must be one of thetwo following:<BR>&lt;res-sharing-scope&gt;Shareable<BR>&lt;/res-sharing-scope&gt;<BR>&lt;res-sharing-scope&gt;Unshareable<BR>&lt;/res-sharing-scope&gt;The default value is Shareable.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-sharing-scope (#PCDATA)&gt;<BR>&lt;!ATTLIST res-sharing-scope  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The res-sharing-scope element specifies whether connections obtained
through the given resource manager connection factory reference can be
shared. The value of this element, if specified, must be one of the
two following:

	&amp;lt;res-sharing-scope&amp;gt;Shareable&amp;lt;/res-sharing-scope&amp;gt;
	&amp;lt;res-sharing-scope&amp;gt;Unshareable&amp;lt;/res-sharing-scope&amp;gt;

The default value is Shareable.

Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "res-type">
		<dtdsource><![CDATA[
<BR>&lt;!--The res-type element specifies the type of the data source. The typeis specified by the fully qualified Java language class or interfaceexpected to be implemented by the data source.Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-type (#PCDATA)&gt;<BR>&lt;!ATTLIST res-type  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The res-type element specifies the type of the data source. The type
is specified by the fully qualified Java language class or interface
expected to be implemented by the data source.

Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-env-ref element contains a declaration of an application client'sreference to an administered object associated with a resourcein the application client's environment.  It consists of an optionaldescription, the resource environment reference name, and anindication of the resource environment reference type expected bythe application client code.Used in: application-clientExample:<BR>&lt;resource-env-ref&gt;    <BR>&lt;resource-env-ref-name&gt;jms/StockQueue<BR>&lt;/resource-env-ref-name&gt;    <BR>&lt;resource-env-ref-type&gt;javax.jms.Queue<BR>&lt;/resource-env-ref-type&gt;<BR>&lt;/resource-env-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-env-ref (description? , resource-env-ref-name , resource-env-ref-type)&gt;<BR>&lt;!ATTLIST resource-env-ref  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The resource-env-ref element contains a declaration of an application client's
reference to an administered object associated with a resource
in the application client's environment.  It consists of an optional
description, the resource environment reference name, and an
indication of the resource environment reference type expected by
the application client code.

Used in: application-client

Example:

&amp;lt;resource-env-ref&amp;gt;
    &amp;lt;resource-env-ref-name&amp;gt;jms/StockQueue&amp;lt;/resource-env-ref-name&amp;gt;
    &amp;lt;resource-env-ref-type&amp;gt;javax.jms.Queue&amp;lt;/resource-env-ref-type&amp;gt;
&amp;lt;/resource-env-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "resource-env-ref-name"/>
				<Ref Element = "resource-env-ref-type"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-env-ref-name element specifies the name of a resourceenvironment reference; its value is the environment entry name used inthe application client code.  The name is a JNDI name relative to thejava:comp/env context and must be unique within an application client.Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;<BR>&lt;!ATTLIST resource-env-ref-name  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The resource-env-ref-name element specifies the name of a resource
environment reference; its value is the environment entry name used in
the application client code.  The name is a JNDI name relative to the
java:comp/env context and must be unique within an application client.

Used in: resource-env-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref-type">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-env-ref-type element specifies the type of a resourceenvironment reference.  It is the fully qualified name of a Javalanguage class or interface.Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-type (#PCDATA)&gt;<BR>&lt;!ATTLIST resource-env-ref-type  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The resource-env-ref-type element specifies the type of a resource
environment reference.  It is the fully qualified name of a Java
language class or interface.

Used in: resource-env-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "resource-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--The resource-ref element contains a declaration of an application client'sreference to an external resource. It consists of an optionaldescription, the resource manager connection factory reference name,the indication of the resource manager connection factory typeexpected by the application client code, the type of authentication(Application or Container), and an optional specification of theshareability of connections obtained from the resource (Shareable orUnshareable).Used in: application-clientExample:    <BR>&lt;resource-ref&gt;<BR>&lt;res-ref-name&gt;jdbc/EmployeeAppDB<BR>&lt;/res-ref-name&gt;<BR>&lt;res-type&gt;javax.sql.DataSource<BR>&lt;/res-type&gt;<BR>&lt;res-auth&gt;Container<BR>&lt;/res-auth&gt;<BR>&lt;res-sharing-scope&gt;Shareable<BR>&lt;/res-sharing-scope&gt;    <BR>&lt;/resource-ref&gt;--&gt;<BR>&lt;!ELEMENT resource-ref (description? , res-ref-name , res-type , res-auth , res-sharing-scope?)&gt;<BR>&lt;!ATTLIST resource-ref  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The resource-ref element contains a declaration of an application client's
reference to an external resource. It consists of an optional
description, the resource manager connection factory reference name,
the indication of the resource manager connection factory type
expected by the application client code, the type of authentication
(Application or Container), and an optional specification of the
shareability of connections obtained from the resource (Shareable or
Unshareable).

Used in: application-client

Example:

    &amp;lt;resource-ref&amp;gt;
	&amp;lt;res-ref-name&amp;gt;jdbc/EmployeeAppDB&amp;lt;/res-ref-name&amp;gt;
	&amp;lt;res-type&amp;gt;javax.sql.DataSource&amp;lt;/res-type&amp;gt;
	&amp;lt;res-auth&amp;gt;Container&amp;lt;/res-auth&amp;gt;
	&amp;lt;res-sharing-scope&amp;gt;Shareable&amp;lt;/res-sharing-scope&amp;gt;
    &amp;lt;/resource-ref&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "res-ref-name"/>
				<Ref Element = "res-type"/>
				<Ref Element = "res-auth"/>
				<Ref Element = "res-sharing-scope" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
	</ElementDecl>
	<ElementDecl Name = "small-icon">
		<dtdsource><![CDATA[
<BR>&lt;!--The small-icon element contains the name of a filecontaining a small (16 x 16) icon image. The filename is a relative path within the application client'sjar file.The image may be either in the JPEG or GIF format.The icon can be used by tools.Used in: iconExample:<BR>&lt;small-icon&gt;employee-service-icon16x16.jpg<BR>&lt;/small-icon&gt;--&gt;<BR>&lt;!ELEMENT small-icon (#PCDATA)&gt;<BR>&lt;!ATTLIST small-icon  id ID  #IMPLIED &gt;]]>

		</dtdsource>
		<DDML:Doc>
The small-icon element contains the name of a file
containing a small (16 x 16) icon image. The file
name is a relative path within the application client's
jar file.

The image may be either in the JPEG or GIF format.
The icon can be used by tools.

Used in: icon

Example:

&amp;lt;small-icon&amp;gt;employee-service-icon16x16.jpg&amp;lt;/small-icon&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "id" Type = "ID"/>
		</AttGroup>
		<AttDef Name = "id" Type = "ID">
			<DDML:Doc>
The ID mechanism is to allow tools that produce additional deployment
information (i.e., information beyond the standard deployment
descriptor information) to store the non-standard information in a
separate file, and easily refer from these tool-specific files to the
information in the standard deployment descriptor.

Tools are not allowed to add the non-standard information into the
standard deployment descriptor.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
		<AttDef Name = "id" Type = "ID"/>
	</ElementDecl>
</DocumentDef>