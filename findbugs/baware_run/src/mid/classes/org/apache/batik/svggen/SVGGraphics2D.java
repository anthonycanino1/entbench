package org.apache.batik.svggen;
public class SVGGraphics2D extends org.apache.batik.ext.awt.g2d.AbstractGraphics2D implements java.lang.Cloneable, org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants {
    public static final java.lang.String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected org.apache.batik.svggen.DOMTreeManager domTreeManager;
    protected org.apache.batik.svggen.DOMGroupManager domGroupManager;
    protected org.apache.batik.svggen.SVGGeneratorContext generatorCtx;
    protected org.apache.batik.svggen.SVGShape shapeConverter;
    protected java.awt.Dimension svgCanvasSize;
    protected java.awt.Graphics2D fmg;
    { java.awt.image.BufferedImage bi = new java.awt.image.BufferedImage(
        1,
        1,
        java.awt.image.BufferedImage.
          TYPE_INT_ARGB);
      fmg = bi.createGraphics(); }
    public final java.awt.Dimension getSVGCanvasSize() { return svgCanvasSize;
    }
    public final void setSVGCanvasSize(java.awt.Dimension svgCanvasSize) {
        this.
          svgCanvasSize =
          new java.awt.Dimension(
            svgCanvasSize);
    }
    public final org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext() {
        return generatorCtx;
    }
    public final org.apache.batik.svggen.SVGShape getShapeConverter() {
        return shapeConverter;
    }
    public final org.apache.batik.svggen.DOMTreeManager getDOMTreeManager() {
        return domTreeManager;
    }
    protected final void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager treeMgr) {
        this.
          domTreeManager =
          treeMgr;
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    protected final org.apache.batik.svggen.DOMGroupManager getDOMGroupManager() {
        return domGroupManager;
    }
    protected final void setDOMGroupManager(org.apache.batik.svggen.DOMGroupManager groupMgr) {
        this.
          domGroupManager =
          groupMgr;
    }
    public final org.w3c.dom.Document getDOMFactory() {
        return generatorCtx.
                 domFactory;
    }
    public final org.apache.batik.svggen.ImageHandler getImageHandler() {
        return generatorCtx.
                 imageHandler;
    }
    public final org.apache.batik.svggen.GenericImageHandler getGenericImageHandler() {
        return generatorCtx.
                 genericImageHandler;
    }
    public final org.apache.batik.svggen.ExtensionHandler getExtensionHandler() {
        return generatorCtx.
                 extensionHandler;
    }
    public final void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory) {
        this(
          org.apache.batik.svggen.SVGGeneratorContext.
            createDefault(
              domFactory),
          false);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory,
                         org.apache.batik.svggen.ImageHandler imageHandler,
                         org.apache.batik.svggen.ExtensionHandler extensionHandler,
                         boolean textAsShapes) {
        this(
          buildSVGGeneratorContext(
            domFactory,
            imageHandler,
            extensionHandler),
          textAsShapes);
    }
    public static org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document domFactory,
                                                                                       org.apache.batik.svggen.ImageHandler imageHandler,
                                                                                       org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        org.apache.batik.svggen.SVGGeneratorContext generatorCtx =
          new org.apache.batik.svggen.SVGGeneratorContext(
          domFactory);
        generatorCtx.
          setIDGenerator(
            new org.apache.batik.svggen.SVGIDGenerator(
              ));
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
        generatorCtx.
          setImageHandler(
            imageHandler);
        generatorCtx.
          setStyleHandler(
            new org.apache.batik.svggen.DefaultStyleHandler(
              ));
        generatorCtx.
          setComment(
            "Generated by the Batik Graphics2D SVG Generator");
        generatorCtx.
          setErrorHandler(
            new org.apache.batik.svggen.DefaultErrorHandler(
              ));
        return generatorCtx;
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGeneratorContext generatorCtx,
                         boolean textAsShapes) {
        super(
          textAsShapes);
        if (generatorCtx ==
              null)
            throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_CONTEXT_NULL);
        setGeneratorContext(
          generatorCtx);
    }
    protected void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext generatorCtx) {
        this.
          generatorCtx =
          generatorCtx;
        this.
          gc =
          new org.apache.batik.ext.awt.g2d.GraphicContext(
            new java.awt.geom.AffineTransform(
              ));
        org.apache.batik.svggen.SVGGeneratorContext.GraphicContextDefaults gcDefaults =
          generatorCtx.
          getGraphicContextDefaults(
            );
        if (gcDefaults !=
              null) {
            if (gcDefaults.
                  getPaint(
                    ) !=
                  null) {
                gc.
                  setPaint(
                    gcDefaults.
                      getPaint(
                        ));
            }
            if (gcDefaults.
                  getStroke(
                    ) !=
                  null) {
                gc.
                  setStroke(
                    gcDefaults.
                      getStroke(
                        ));
            }
            if (gcDefaults.
                  getComposite(
                    ) !=
                  null) {
                gc.
                  setComposite(
                    gcDefaults.
                      getComposite(
                        ));
            }
            if (gcDefaults.
                  getClip(
                    ) !=
                  null) {
                gc.
                  setClip(
                    gcDefaults.
                      getClip(
                        ));
            }
            if (gcDefaults.
                  getRenderingHints(
                    ) !=
                  null) {
                gc.
                  setRenderingHints(
                    gcDefaults.
                      getRenderingHints(
                        ));
            }
            if (gcDefaults.
                  getFont(
                    ) !=
                  null) {
                gc.
                  setFont(
                    gcDefaults.
                      getFont(
                        ));
            }
            if (gcDefaults.
                  getBackground(
                    ) !=
                  null) {
                gc.
                  setBackground(
                    gcDefaults.
                      getBackground(
                        ));
            }
        }
        this.
          shapeConverter =
          new org.apache.batik.svggen.SVGShape(
            generatorCtx);
        this.
          domTreeManager =
          new org.apache.batik.svggen.DOMTreeManager(
            gc,
            generatorCtx,
            DEFAULT_MAX_GC_OVERRIDES);
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            gc,
            domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            domGroupManager);
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGraphics2D g) {
        super(
          g);
        this.
          generatorCtx =
          g.
            generatorCtx;
        this.
          gc.
          validateTransformStack(
            );
        this.
          shapeConverter =
          g.
            shapeConverter;
        this.
          domTreeManager =
          g.
            domTreeManager;
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            this.
              gc,
            this.
              domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            this.
              domGroupManager);
    }
    public void stream(java.lang.String svgFileName)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgFileName,
          false);
    }
    public void stream(java.lang.String svgFileName,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        try {
            java.io.OutputStreamWriter writer =
              new java.io.OutputStreamWriter(
              new java.io.FileOutputStream(
                svgFileName),
              DEFAULT_XML_ENCODING);
            stream(
              writer,
              useCss);
            writer.
              flush(
                );
            writer.
              close(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException io) {
            throw io;
        }
        catch (java.io.IOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  e));
        }
    }
    public void stream(java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          writer,
          false);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          escaped);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgRoot,
          writer,
          false,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Node rootParent =
          svgRoot.
          getParentNode(
            );
        org.w3c.dom.Node nextSibling =
          svgRoot.
          getNextSibling(
            );
        try {
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX,
                SVG_NAMESPACE_URI);
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX +
                ":" +
                XLINK_PREFIX,
                XLINK_NAMESPACE_URI);
            org.w3c.dom.DocumentFragment svgDocument =
              svgRoot.
              getOwnerDocument(
                ).
              createDocumentFragment(
                );
            svgDocument.
              appendChild(
                svgRoot);
            if (useCss)
                org.apache.batik.svggen.SVGCSSStyler.
                  style(
                    svgDocument);
            org.apache.batik.svggen.XmlWriter.
              writeXml(
                svgDocument,
                writer,
                escaped);
            writer.
              flush(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                e);
        }
        catch (java.io.IOException io) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  io));
        }
        finally {
            if (rootParent !=
                  null) {
                if (nextSibling ==
                      null) {
                    rootParent.
                      appendChild(
                        svgRoot);
                }
                else {
                    rootParent.
                      insertBefore(
                        svgRoot,
                        nextSibling);
                }
            }
        }
    }
    public java.util.List getDefinitionSet() {
        return domTreeManager.
          getDefinitionSet(
            );
    }
    public org.w3c.dom.Element getTopLevelGroup() {
        return getTopLevelGroup(
                 true);
    }
    public org.w3c.dom.Element getTopLevelGroup(boolean includeDefinitionSet) {
        return domTreeManager.
          getTopLevelGroup(
            includeDefinitionSet);
    }
    public void setTopLevelGroup(org.w3c.dom.Element topLevelGroup) {
        domTreeManager.
          setTopLevelGroup(
            topLevelGroup);
    }
    public org.w3c.dom.Element getRoot() {
        return getRoot(
                 null);
    }
    public org.w3c.dom.Element getRoot(org.w3c.dom.Element svgRoot) {
        svgRoot =
          domTreeManager.
            getRoot(
              svgRoot);
        if (svgCanvasSize !=
              null) {
            svgRoot.
              setAttributeNS(
                null,
                SVG_WIDTH_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      width));
            svgRoot.
              setAttributeNS(
                null,
                SVG_HEIGHT_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      height));
        }
        return svgRoot;
    }
    public java.awt.Graphics create() { return new org.apache.batik.svggen.SVGGraphics2D(
                                          this);
    }
    public void setXORMode(java.awt.Color c1) {
        generatorCtx.
          errorHandler.
          handleError(
            new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_XOR));
    }
    public java.awt.FontMetrics getFontMetrics(java.awt.Font f) {
        return fmg.
          getFontMetrics(
            f);
    }
    public void copyArea(int x, int y, int width,
                         int height,
                         int dx,
                         int dy) {  }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            img.
              getWidth(
                null),
            img.
              getHeight(
                null),
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             int width,
                             int height,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            width,
            height,
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public void dispose() { this.domTreeManager.
                              removeGroupManager(
                                this.
                                  domGroupManager);
    }
    public void draw(java.awt.Shape s) { java.awt.Stroke stroke =
                                           gc.
                                           getStroke(
                                             );
                                         if (stroke instanceof java.awt.BasicStroke) {
                                             org.w3c.dom.Element svgShape =
                                               shapeConverter.
                                               toSVG(
                                                 s);
                                             if (svgShape !=
                                                   null) {
                                                 domGroupManager.
                                                   addElement(
                                                     svgShape,
                                                     org.apache.batik.svggen.DOMGroupManager.
                                                       DRAW);
                                             }
                                         }
                                         else {
                                             java.awt.Shape strokedShape =
                                               stroke.
                                               createStrokedShape(
                                                 s);
                                             fill(
                                               strokedShape);
                                         }
    }
    public boolean drawImage(java.awt.Image img,
                             java.awt.geom.AffineTransform xform,
                             java.awt.image.ImageObserver obs) {
        boolean retVal =
          true;
        if (xform ==
              null) {
            retVal =
              drawImage(
                img,
                0,
                0,
                null);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  setTransform(
                    savTransform);
            }
        return retVal;
    }
    public void drawImage(java.awt.image.BufferedImage img,
                          java.awt.image.BufferedImageOp op,
                          int x,
                          int y) { img = op.
                                           filter(
                                             img,
                                             null);
                                   drawImage(
                                     img,
                                     x,
                                     y,
                                     null);
    }
    public void drawRenderedImage(java.awt.image.RenderedImage img,
                                  java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawRenderableImage(java.awt.image.renderable.RenderableImage img,
                                    java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawString(java.lang.String s,
                           float x,
                           float y) { if (textAsShapes) {
                                          java.awt.font.GlyphVector gv =
                                            getFont(
                                              ).
                                            createGlyphVector(
                                              getFontRenderContext(
                                                ),
                                              s);
                                          drawGlyphVector(
                                            gv,
                                            x,
                                            y);
                                          return;
                                      }
                                      if (generatorCtx.
                                            svgFont) {
                                          domTreeManager.
                                            gcConverter.
                                            getFontConverter(
                                              ).
                                            recordFontUsage(
                                              s,
                                              getFont(
                                                ));
                                      }
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        transformText(
                                          x,
                                          y);
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      text.
                                        appendChild(
                                          getDOMFactory(
                                            ).
                                            createTextNode(
                                              s));
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      if (txtTxf !=
                                            null) {
                                          this.
                                            setTransform(
                                              savTxf);
                                      } }
    private java.awt.geom.AffineTransform transformText(float x,
                                                        float y) {
        java.awt.geom.AffineTransform txtTxf =
          null;
        java.awt.Font font =
          getFont(
            );
        if (font !=
              null) {
            txtTxf =
              font.
                getTransform(
                  );
            if (txtTxf !=
                  null &&
                  !txtTxf.
                  isIdentity(
                    )) {
                java.awt.geom.AffineTransform t =
                  new java.awt.geom.AffineTransform(
                  );
                t.
                  translate(
                    x,
                    y);
                t.
                  concatenate(
                    txtTxf);
                t.
                  translate(
                    -x,
                    -y);
                this.
                  transform(
                    t);
            }
            else {
                txtTxf =
                  null;
            }
        }
        return txtTxf;
    }
    public void drawString(java.text.AttributedCharacterIterator ati,
                           float x,
                           float y) { if (textAsShapes ||
                                            usesUnsupportedAttributes(
                                              ati)) {
                                          java.awt.font.TextLayout layout =
                                            new java.awt.font.TextLayout(
                                            ati,
                                            getFontRenderContext(
                                              ));
                                          layout.
                                            draw(
                                              this,
                                              x,
                                              y);
                                          return;
                                      }
                                      boolean multiSpans =
                                        false;
                                      if (ati.
                                            getRunLimit(
                                              ) <
                                            ati.
                                            getEndIndex(
                                              ))
                                          multiSpans =
                                            true;
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      java.awt.Font baseFont =
                                        getFont(
                                          );
                                      java.awt.Paint basePaint =
                                        getPaint(
                                          );
                                      char ch =
                                        ati.
                                        first(
                                          );
                                      setTextElementFill(
                                        ati);
                                      setTextFontAttributes(
                                        ati,
                                        baseFont);
                                      org.apache.batik.svggen.SVGGraphicContext textGC;
                                      textGC =
                                        domTreeManager.
                                          getGraphicContextConverter(
                                            ).
                                          toSVG(
                                            gc);
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      textGC.
                                        getContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      textGC.
                                        getGroupContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      boolean firstSpan =
                                        true;
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        null;
                                      while (ch !=
                                               java.text.AttributedCharacterIterator.
                                                 DONE) {
                                          org.w3c.dom.Element tspan =
                                            text;
                                          if (multiSpans) {
                                              tspan =
                                                getDOMFactory(
                                                  ).
                                                  createElementNS(
                                                    SVG_NAMESPACE_URI,
                                                    SVG_TSPAN_TAG);
                                              text.
                                                appendChild(
                                                  tspan);
                                          }
                                          setTextElementFill(
                                            ati);
                                          boolean resetTransform =
                                            setTextFontAttributes(
                                              ati,
                                              baseFont);
                                          if (resetTransform ||
                                                firstSpan) {
                                              txtTxf =
                                                transformText(
                                                  x,
                                                  y);
                                              firstSpan =
                                                false;
                                          }
                                          int start =
                                            ati.
                                            getIndex(
                                              );
                                          int end =
                                            ati.
                                            getRunLimit(
                                              ) -
                                            1;
                                          java.lang.StringBuffer buf =
                                            new java.lang.StringBuffer(
                                            end -
                                              start);
                                          buf.
                                            append(
                                              ch);
                                          for (int i =
                                                 start;
                                               i <
                                                 end;
                                               i++) {
                                              ch =
                                                ati.
                                                  next(
                                                    );
                                              buf.
                                                append(
                                                  ch);
                                          }
                                          java.lang.String s =
                                            buf.
                                            toString(
                                              );
                                          if (generatorCtx.
                                                isEmbeddedFontsOn(
                                                  )) {
                                              getDOMTreeManager(
                                                ).
                                                getGraphicContextConverter(
                                                  ).
                                                getFontConverter(
                                                  ).
                                                recordFontUsage(
                                                  s,
                                                  getFont(
                                                    ));
                                          }
                                          org.apache.batik.svggen.SVGGraphicContext elementGC;
                                          elementGC =
                                            domTreeManager.
                                              gcConverter.
                                              toSVG(
                                                gc);
                                          elementGC.
                                            getGroupContext(
                                              ).
                                            put(
                                              SVG_STROKE_ATTRIBUTE,
                                              SVG_NONE_VALUE);
                                          org.apache.batik.svggen.SVGGraphicContext deltaGC;
                                          deltaGC =
                                            org.apache.batik.svggen.DOMGroupManager.
                                              processDeltaGC(
                                                elementGC,
                                                textGC);
                                          setTextElementAttributes(
                                            deltaGC,
                                            ati);
                                          domTreeManager.
                                            getStyleHandler(
                                              ).
                                            setStyle(
                                              tspan,
                                              deltaGC.
                                                getContext(
                                                  ),
                                              domTreeManager.
                                                getGeneratorContext(
                                                  ));
                                          tspan.
                                            appendChild(
                                              getDOMFactory(
                                                ).
                                                createTextNode(
                                                  s));
                                          if ((resetTransform ||
                                                 firstSpan) &&
                                                txtTxf !=
                                                null) {
                                              this.
                                                setTransform(
                                                  savTxf);
                                          }
                                          ch =
                                            ati.
                                              next(
                                                );
                                      }
                                      setFont(
                                        baseFont);
                                      setPaint(
                                        basePaint);
    }
    public void fill(java.awt.Shape s) { org.w3c.dom.Element svgShape =
                                           shapeConverter.
                                           toSVG(
                                             s);
                                         if (svgShape !=
                                               null) {
                                             domGroupManager.
                                               addElement(
                                                 svgShape,
                                                 org.apache.batik.svggen.DOMGroupManager.
                                                   FILL);
                                         }
    }
    private boolean setTextFontAttributes(java.text.AttributedCharacterIterator ati,
                                          java.awt.Font baseFont) {
        boolean resetTransform =
          false;
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FONT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FAMILY) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  WEIGHT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  POSTURE) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  SIZE) !=
              null) {
            java.util.Map m =
              ati.
              getAttributes(
                );
            java.awt.Font f =
              baseFont.
              deriveFont(
                m);
            setFont(
              f);
            resetTransform =
              true;
        }
        return resetTransform;
    }
    private void setTextElementFill(java.text.AttributedCharacterIterator ati) {
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FOREGROUND) !=
              null) {
            java.awt.Color color =
              (java.awt.Color)
                ati.
                getAttribute(
                  java.awt.font.TextAttribute.
                    FOREGROUND);
            setPaint(
              color);
        }
    }
    private void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext tspanGC,
                                          java.text.AttributedCharacterIterator ati) {
        java.lang.String decoration =
          "";
        if (isUnderline(
              ati))
            decoration +=
              CSS_UNDERLINE_VALUE +
              " ";
        if (isStrikeThrough(
              ati))
            decoration +=
              CSS_LINE_THROUGH_VALUE +
              " ";
        int len =
          decoration.
          length(
            );
        if (len !=
              0)
            tspanGC.
              getContext(
                ).
              put(
                CSS_TEXT_DECORATION_PROPERTY,
                decoration.
                  substring(
                    0,
                    len -
                      1));
    }
    private boolean isBold(java.text.AttributedCharacterIterator ati) {
        java.lang.Object weight =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              WEIGHT);
        if (weight ==
              null)
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_REGULAR))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_DEMILIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_EXTRA_LIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_LIGHT))
            return false;
        return true;
    }
    private boolean isItalic(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              POSTURE);
        if (java.awt.font.TextAttribute.
              POSTURE_OBLIQUE.
              equals(
                attr))
            return true;
        return false;
    }
    private boolean isUnderline(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              UNDERLINE);
        if (java.awt.font.TextAttribute.
              UNDERLINE_ON.
              equals(
                attr))
            return true;
        else
            return false;
    }
    private boolean isStrikeThrough(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              STRIKETHROUGH);
        if (java.awt.font.TextAttribute.
              STRIKETHROUGH_ON.
              equals(
                attr))
            return true;
        return false;
    }
    public java.awt.GraphicsConfiguration getDeviceConfiguration() {
        return null;
    }
    protected java.util.Set unsupportedAttributes;
    { unsupportedAttributes = new java.util.HashSet(
                                );
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BACKGROUND);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BIDI_EMBEDDING);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  CHAR_REPLACEMENT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  JUSTIFICATION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  RUN_DIRECTION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SUPERSCRIPT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SWAP_COLORS);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  TRANSFORM);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  WIDTH);
    }
    public void setUnsupportedAttributes(java.util.Set attrs) {
        if (attrs ==
              null)
            unsupportedAttributes =
              null;
        else
            unsupportedAttributes =
              new java.util.HashSet(
                attrs);
    }
    public boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator aci) {
        if (unsupportedAttributes ==
              null)
            return false;
        java.util.Set allAttrs =
          aci.
          getAllAttributeKeys(
            );
        java.util.Iterator iter =
          allAttrs.
          iterator(
            );
        while (iter.
                 hasNext(
                   )) {
            if (unsupportedAttributes.
                  contains(
                    iter.
                      next(
                        ))) {
                return true;
            }
        }
        return false;
    }
    public static final java.lang.String jlc$CompilerVersion$jl7 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl7 =
      1445630120000L;
    public static final java.lang.String jlc$ClassType$jl7 =
      ("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" +
       "pynzuo7jM/Q+/tP+/+wXFobhXQAA");
    public static final java.lang.String jlc$CompilerVersion$jl5 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl5 =
      1445630120000L;
    public static final java.lang.String jlc$ClassType$jl5 =
      ("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" +
       "imnUSzOygAxKWHPWmi7s2UBrVbh2grW5");
    public static final java.lang.String jlc$ClassType$jl5$1 =
      ("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" +
       "qYKDX84wXr0HsZAmL/ezd/Obp+Becd55AmDiNy+3cMsbhDu853rW/WBKmH0H" +
       "f9jYQ/hImsB+7lnphBawjXR4uHsrXFpiFzccVs6B/PT0YBugvnWL/NaLQd7V" +
       "5+GDGVFnDy2WJq/ZLIxKabffZaBX127zvKigU7v5XVvUq16EeK7aPe7grv8V" +
       "8u77861yxnuUk64aO8T93P1XKucKazipIuICJspufnyrosefImvYs3bsMJ0L" +
       "OOT93C2G17JN+ZSxn2fRWIYH+rGbP7bF+9hThLdn0dhhOlo4VP3cbYbX8wXT" +
       "kE4Bnme1WAb4QgC2XZl8842sTL4RwD1zXofparFD1889zfCYNBxLf1DlFON5" +
       "JrYyxpcAtt/cMv7mU8T4PXsY35wm3+Xn7jK8tItdKLTu2oGmn+K87luJ93C+" +
       "KD1YA3yf2XJ+5gY5rz9RcfjOPefenSZv2yz6aytrQ0pXmKuGFri7506uGOwd" +
       "TWJfnS3TxdvPG3WUgQ6+vNXFly9GFydnNnbfkb4ivfirrne37LWl2fjkcM+K" +
       "scMfT5P3bdw3c61XvK6udN/nWTF235HgX90K/tULVdOuafzUHuCfTpOf8HPP" +
       "DTzFO4v4ZCP50A29/h5E/FesxUp/8uT+q36UbPNDWtLPPH7Xbc95nPnD7Idy" +
       "jn/s6nY8d5samObJ18Gf2L/FcRXVyBRxe5be6WRgP+fnnnNG356uKMh2UnkP" +
       "f3aT/xN+7u7T+cGALvs8me8/gVh9lw9carNzMsuv+LlDkCXd/VXnqOUVrhIm" +
       "HURkc1SQfLkpen46hthpKtrY+f0nbSd78une61XAcZGTP7OT3iz7zbijp8sC" +
       "cvs+4o8+3h9+55erH9z8zI9kCkm2xuw2PHfr5heHsoumT6i96MyrHV3rlu4r" +
       "vnbnx25/+Ohpujs3Au/s+IRsL7z2b+p0LMfPfgUn+YXn/Nw3fejxP83eU///" +
       "AH0Iv/XMbwAA");
}
