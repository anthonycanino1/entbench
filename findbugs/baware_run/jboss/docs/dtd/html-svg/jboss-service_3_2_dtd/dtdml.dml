<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "jboss-service_3_2.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR>&lt;?xml encoding='UTF-8' ?&gt;<BR><BR>&lt;!-- A skeleton JBoss MBean service descriptor DTD. This cannot be used ingeneral to validate a jboss-service.xml descriptor do to the fact that the attributeelement allows ANY content.$Id: jboss-service_3_2.dtd,v 1.1.2.7 2003/10/30 13:42:24 ejort Exp $DOCTYPE server    PUBLIC &quot;-//JBoss//DTD MBean Service 3.2//EN&quot;    &quot;http://www.jboss.org/j2ee/dtd/jboss-service_3_2.dtd&quot;--&gt;<BR>&lt;!-- The server element is the root element.--&gt;<BR>&lt;!ELEMENT server (loader-repository? , local-directory* , classpath* , mbean*)&gt;<BR>&lt;!-- The loader-repository specifies the name of the UnifiedLoaderRepository   MBean to use for the ear to provide ear level scoping of classes deployed   in the ear. It is a unique JMX ObjectName string. It may also specify   an arbitrary configuration by including a loader-repository-config element.Examples:   <BR>&lt;loader-repository&gt;jboss.test:loader=cts-cmp2v1-sar.ear<BR>&lt;/loader-repository&gt;   <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;      dot.com:loader=unique-archive-name      <BR>&lt;loader-repository-config configParserClass='dot.com.LoaderParser'&gt;         java2ParentDelegaton=true      <BR>&lt;/loader-repository-config&gt;   <BR>&lt;/loader-repository&gt;--&gt;<BR>&lt;!ELEMENT loader-repository (#PCDATA | loader-repository-config)*&gt;<BR>&lt;!-- The loaderRepositoryClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepository implementation.--&gt;<BR>&lt;!ATTLIST loader-repository loaderRepositoryClass CDATA  #IMPLIED&gt;<BR>&lt;!-- The loader-repository-config element specifies any arbitrary configurationfragment for use in configuring the loader-repository instance. The actualcontent of this element is specific to the loaderRepositoryClass and thecode parsing the element.--&gt;<BR>&lt;!ELEMENT loader-repository-config (#PCDATA)&gt;<BR>&lt;!-- The configParserClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParserimplementation to use to parse the loader-repository-config content.--&gt;<BR>&lt;!ATTLIST loader-repository-config configParserClass CDATA  #IMPLIED&gt;<BR>&lt;!-- A local-directory element specifies that portions of the sar are to be unjard into the datadirectory of the server configuration.--&gt;<BR>&lt;!ELEMENT local-directory EMPTY&gt;<BR>&lt;!-- The optional path attribute gives the prefix of the sar entries that should be copiedinto the data directory. If it is not specified the entire sar contents will be placed intothe data directory.--&gt;<BR>&lt;!ATTLIST local-directory path CDATA  #IMPLIED&gt;<BR>&lt;!-- A classpath element specifies a location which will be included in the servicesdeployment classpath.--&gt;<BR>&lt;!ELEMENT classpath EMPTY&gt;<BR>&lt;!-- The codebase attribute specifies the base URL from which the jars or classesare loaded from. If the codebase is '.' then it is equal to the mbean deployment URL.Otherwise, it is resolved as a path spec relative to the serverHomeURL (e.g., file:/jboss-3.2.0)using the URL ctor URL(serverHomeURL, codebase)Examples:   <BR>&lt;classpath codebase='.' archives='util.jar' /&gt;   <BR>&lt;classpath codebase='http://classloader.dot.com' archives='*' /&gt;   <BR>&lt;classpath codebase=&quot;lib&quot; archives=&quot;*&quot;/&gt;--&gt;<BR>&lt;!ATTLIST classpath codebase CDATA  #REQUIRED&gt;<BR>&lt;!-- The archives attribute specifies either the '*' wildcard to indicate all contents of thecodebase should be included, or a comma seperated list of the jars to include.--&gt;<BR>&lt;!ATTLIST classpath archives CDATA  #IMPLIED&gt;<BR>&lt;!-- The mbean element defines a JBoss MBean service. This includes thembean class, attributes and dependencies.--&gt;<BR>&lt;!ELEMENT mbean (constructor? , xmbean? , attribute* , depends* , depends-list*)&gt;<BR>&lt;!-- The code attributes gives the fully qualified name of the MBeanimplementation class.--&gt;<BR>&lt;!ATTLIST mbean code        CDATA  #REQUIRED&gt;<BR>&lt;!-- The name attribute gives the JMX ObjectName string to use when registeringthe MBean. This must be a unique and valid JMX name.--&gt;<BR>&lt;!ATTLIST mbean name        CDATA  #REQUIRED&gt;<BR>&lt;!-- The xmbean-dd attribute defines the path to the JBoss XMBean descriptor. Thisis an xml document conforming to:<BR>&lt;!DOCTYPE mbean PUBLIC      &quot;-//JBoss//DTD JBOSS XMBEAN 1.0//EN&quot;      &quot;http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd&quot;&gt;If the descriptor is embedded via a nested xmbean element, the xmbean-dd attributemust be given as an empty string.Example:<BR>&lt;mbean code=&quot;org.jboss.test.jmx.xmbean.User&quot;name=&quot;jboss.test:service=xmbean-user&quot;xmbean-dd=&quot;META-INF/org/jboss/test/jmx/xmbean/User.xml&quot; /&gt;--&gt;<BR>&lt;!ATTLIST mbean xmbean-dd   CDATA  #IMPLIED&gt;<BR>&lt;!-- The optional xmbean-code attribute specifies the ModelMBean implementation classto use. This defaults to org.jboss.mx.modelmbean.XMBean.--&gt;<BR>&lt;!ATTLIST mbean xmbean-code CDATA  #IMPLIED&gt;<BR>&lt;!-- The xmbean element specifies a nested JBoss XMBean descriptor fragment. Itssupported content model is the same as the mbean element of the jboss_xmbean_1_0.dtdExample:<BR>&lt;mbean code=&quot;org.jboss.test.jmx.xmbean.User&quot;name=&quot;jboss.test:service=xmbean-user&quot;xmbean-dd=&quot;&quot;&gt;<BR>&lt;xmbean&gt;...<BR>&lt;/xmbean&gt;<BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT xmbean ANY&gt;<BR>&lt;!-- The constructor element defines a non-default constructor to use wheninstantiating the mbean.--&gt;<BR>&lt;!ELEMENT constructor (arg*)&gt;<BR>&lt;!-- The arg element specify the constructor arguments in the order of thector signature. Each arg has a type and value attribute.--&gt;<BR>&lt;!ELEMENT arg EMPTY&gt;<BR>&lt;!-- The type attribute gives the type of the argument as defined in thector signature. If not defined java.lang.String is assumed.--&gt;<BR>&lt;!ATTLIST arg type  CDATA  #IMPLIED&gt;<BR>&lt;!-- The value attribute provides the string representation of the ctorargument. It is converted from a string to type using Java PropertyEditor or actor taking a single string as its argument.--&gt;<BR>&lt;!ATTLIST arg value CDATA  #REQUIRED&gt;<BR>&lt;!-- The attribute element specifies the initial value for a management attribute ofthe enclosing mbean. Typically the value of the attribute element is the stringrepresentation of the attribute, but it can be an arbitrary xml fragment that isparsed by the mbean.--&gt;<BR>&lt;!ELEMENT attribute ANY&gt;<BR>&lt;!-- The required name attribute gives the name of the attribute. This is thename exposed by the mbean to the MBeanServer for the attribute.--&gt;<BR>&lt;!ATTLIST attribute name    CDATA  #REQUIRED&gt;<BR>&lt;!-- The optional replace attribute indicates whether references of the form ${x}in the attribute element content should be replaced with the correspondingSystem.getProperty(x) value.--&gt;<BR>&lt;!ATTLIST attribute replace  (true | false )  &quot;true&quot;&gt;<BR>&lt;!-- The optional trim attribute specifies whether the attribute element content shouldbe trimmed of whitespace.--&gt;<BR>&lt;!ATTLIST attribute trim     (true | false )  &quot;true&quot;&gt;<BR>&lt;!-- The depends element specifies a JMX ObjectName string for a mbeanon which the enclosing mbean depends.Example:   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;yName&quot;&gt;domain:name=y<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;anonName&quot;&gt;         <BR>&lt;mbean code=&quot;nestedBean&quot; name=&quot;domain:name=x.y&quot;&gt;         ...         <BR>&lt;/mbean&gt;      <BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT depends (#PCDATA | mbean)*&gt;<BR>&lt;!-- The optional-attribute-name attribute specifies the attribute namewhich should be populated with the JMX ObjectName of the depends element.This allows an mbean to have access to the name of the mbean on whichit depends.--&gt;<BR>&lt;!ATTLIST depends optional-attribute-name CDATA  #IMPLIED&gt;<BR>&lt;!-- The proxy-type attribute specifies the interface namethat should be exposed on an MBeanProxy pointing at the dependentMBean specified by the JMX ObjectNameThe special value proxy-type=&quot;attribute&quot; will use theclass declared in the MBeanAttributeInfo as the interfacefor MBeanProxy.e.g.   <BR>&lt;mbean code=&quot;org.jboss.example.Helper&quot; name=&quot;domain:name=helper&quot;/&gt;      <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;Helper&quot;               proxy-type=&quot;org.jboss.example.HelperMBean&quot;      &gt;domain:name=helper<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;      <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;Helper&quot;               proxy-type=&quot;attribute&quot;      &gt;domain:name=helper<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ATTLIST depends proxy-type              CDATA  #IMPLIED&gt;<BR>&lt;!-- The depends-list element specifies a series of JMX ObjectNamestrings for a mbeans on which the enclosing mbean depends. This isdone usingExample:   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends-list optional-attribute-name=&quot;myObjectNameList&quot;&gt;         <BR>&lt;depends-list-element&gt;domain:name=y<BR>&lt;/depends-list-element&gt;         <BR>&lt;depends-list-element&gt;domain:name=z<BR>&lt;/depends-list-element&gt;      <BR>&lt;/depends-list&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT depends-list (depends-list-element)+&gt;<BR>&lt;!-- The optional-attribute-name attribute specifies the attribute namewhich should be populated with the JMX ObjectName[] array of the depends-listelements. This allows an mbean to have access to the names of the mbean onwhich it depends.--&gt;<BR>&lt;!ATTLIST depends-list optional-attribute-name CDATA  #IMPLIED&gt;<BR>&lt;!-- The depends-list-element element specifies a JMX ObjectName stringfor a mbean on which the enclosing mbean depends.--&gt;<BR>&lt;!ELEMENT depends-list-element (#PCDATA | mbean)*&gt;]]>

	</dtdsource>
	<ElementDecl Name = "server">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT server (loader-repository? , local-directory* , classpath* , mbean*)&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "loader-repository" Frequency = "Optional"/>
				<Ref Element = "local-directory" Frequency = "ZeroOrMore"/>
				<Ref Element = "classpath" Frequency = "ZeroOrMore"/>
				<Ref Element = "mbean" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "loader-repository">
		<dtdsource><![CDATA[
<BR>&lt;!-- The loader-repository specifies the name of the UnifiedLoaderRepository   MBean to use for the ear to provide ear level scoping of classes deployed   in the ear. It is a unique JMX ObjectName string. It may also specify   an arbitrary configuration by including a loader-repository-config element.Examples:   <BR>&lt;loader-repository&gt;jboss.test:loader=cts-cmp2v1-sar.ear<BR>&lt;/loader-repository&gt;   <BR>&lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&gt;      dot.com:loader=unique-archive-name      <BR>&lt;loader-repository-config configParserClass='dot.com.LoaderParser'&gt;         java2ParentDelegaton=true      <BR>&lt;/loader-repository-config&gt;   <BR>&lt;/loader-repository&gt;--&gt;<BR>&lt;!ELEMENT loader-repository (#PCDATA | loader-repository-config)*&gt;<BR>&lt;!-- The loaderRepositoryClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepository implementation.--&gt;<BR>&lt;!ATTLIST loader-repository loaderRepositoryClass CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The loader-repository specifies the name of the UnifiedLoaderRepository
   MBean to use for the ear to provide ear level scoping of classes deployed
   in the ear. It is a unique JMX ObjectName string. It may also specify
   an arbitrary configuration by including a loader-repository-config element.

Examples:
   &amp;lt;loader-repository&amp;gt;jboss.test:loader=cts-cmp2v1-sar.ear&amp;lt;/loader-repository&amp;gt;

   &amp;lt;loader-repository loaderRepositoryClass='dot.com.LoaderRepository'&amp;gt;
      dot.com:loader=unique-archive-name
      &amp;lt;loader-repository-config configParserClass='dot.com.LoaderParser'&amp;gt;
         java2ParentDelegaton=true
      &amp;lt;/loader-repository-config&amp;gt;
   &amp;lt;/loader-repository&amp;gt;

		</DDML:Doc>
		<Model>
			<Mixed>
				<Ref Element = "loader-repository-config"/>
			</Mixed>
		</Model>
		<AttGroup>
			<AttDef Name = "loaderRepositoryClass">
				<DDML:Doc> The loaderRepositoryClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepository implementation.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "loaderRepositoryClass">
			<DDML:Doc> The loaderRepositoryClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepository implementation.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "loader-repository-config">
		<dtdsource><![CDATA[
<BR>&lt;!-- The loader-repository-config element specifies any arbitrary configurationfragment for use in configuring the loader-repository instance. The actualcontent of this element is specific to the loaderRepositoryClass and thecode parsing the element.--&gt;<BR>&lt;!ELEMENT loader-repository-config (#PCDATA)&gt;<BR>&lt;!-- The configParserClass attribute gives the classname of theorg.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParserimplementation to use to parse the loader-repository-config content.--&gt;<BR>&lt;!ATTLIST loader-repository-config configParserClass CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The loader-repository-config element specifies any arbitrary configuration
fragment for use in configuring the loader-repository instance. The actual
content of this element is specific to the loaderRepositoryClass and the
code parsing the element.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "configParserClass">
				<DDML:Doc> The configParserClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParser
implementation to use to parse the loader-repository-config content.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "configParserClass">
			<DDML:Doc> The configParserClass attribute gives the classname of the
org.jboss.mx.loading.LoaderRepositoryFactory.LoaderRepositoryConfigParser
implementation to use to parse the loader-repository-config content.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "local-directory">
		<dtdsource><![CDATA[
<BR>&lt;!-- A local-directory element specifies that portions of the sar are to be unjard into the datadirectory of the server configuration.--&gt;<BR>&lt;!ELEMENT local-directory EMPTY&gt;<BR>&lt;!-- The optional path attribute gives the prefix of the sar entries that should be copiedinto the data directory. If it is not specified the entire sar contents will be placed intothe data directory.--&gt;<BR>&lt;!ATTLIST local-directory path CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> A local-directory element specifies that portions of the sar are to be unjard into the data
directory of the server configuration.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "path">
				<DDML:Doc> The optional path attribute gives the prefix of the sar entries that should be copied
into the data directory. If it is not specified the entire sar contents will be placed into
the data directory.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "path">
			<DDML:Doc> The optional path attribute gives the prefix of the sar entries that should be copied
into the data directory. If it is not specified the entire sar contents will be placed into
the data directory.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "classpath">
		<dtdsource><![CDATA[
<BR>&lt;!-- A classpath element specifies a location which will be included in the servicesdeployment classpath.--&gt;<BR>&lt;!ELEMENT classpath EMPTY&gt;<BR>&lt;!-- The codebase attribute specifies the base URL from which the jars or classesare loaded from. If the codebase is '.' then it is equal to the mbean deployment URL.Otherwise, it is resolved as a path spec relative to the serverHomeURL (e.g., file:/jboss-3.2.0)using the URL ctor URL(serverHomeURL, codebase)Examples:   <BR>&lt;classpath codebase='.' archives='util.jar' /&gt;   <BR>&lt;classpath codebase='http://classloader.dot.com' archives='*' /&gt;   <BR>&lt;classpath codebase=&quot;lib&quot; archives=&quot;*&quot;/&gt;--&gt;<BR>&lt;!ATTLIST classpath codebase CDATA  #REQUIRED&gt;<BR>&lt;!-- The archives attribute specifies either the '*' wildcard to indicate all contents of thecodebase should be included, or a comma seperated list of the jars to include.--&gt;<BR>&lt;!ATTLIST classpath archives CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> A classpath element specifies a location which will be included in the services
deployment classpath.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "codebase" Required = "Yes">
				<DDML:Doc> The codebase attribute specifies the base URL from which the jars or classes
are loaded from. If the codebase is '.' then it is equal to the mbean deployment URL.
Otherwise, it is resolved as a path spec relative to the serverHomeURL (e.g., file:/jboss-3.2.0)
using the URL ctor URL(serverHomeURL, codebase)

Examples:

   &amp;lt;classpath codebase='.' archives='util.jar' /&amp;gt;
   &amp;lt;classpath codebase='http://classloader.dot.com' archives='*' /&amp;gt;
   &amp;lt;classpath codebase="lib" archives="*"/&amp;gt;

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "archives">
				<DDML:Doc> The archives attribute specifies either the '*' wildcard to indicate all contents of the
codebase should be included, or a comma seperated list of the jars to include.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "codebase" Required = "Yes">
			<DDML:Doc> The codebase attribute specifies the base URL from which the jars or classes
are loaded from. If the codebase is '.' then it is equal to the mbean deployment URL.
Otherwise, it is resolved as a path spec relative to the serverHomeURL (e.g., file:/jboss-3.2.0)
using the URL ctor URL(serverHomeURL, codebase)

Examples:

   &amp;lt;classpath codebase='.' archives='util.jar' /&amp;gt;
   &amp;lt;classpath codebase='http://classloader.dot.com' archives='*' /&amp;gt;
   &amp;lt;classpath codebase="lib" archives="*"/&amp;gt;

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "archives">
			<DDML:Doc> The archives attribute specifies either the '*' wildcard to indicate all contents of the
codebase should be included, or a comma seperated list of the jars to include.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "mbean">
		<dtdsource><![CDATA[
<BR>&lt;!-- The mbean element defines a JBoss MBean service. This includes thembean class, attributes and dependencies.--&gt;<BR>&lt;!ELEMENT mbean (constructor? , xmbean? , attribute* , depends* , depends-list*)&gt;<BR>&lt;!-- The code attributes gives the fully qualified name of the MBeanimplementation class.--&gt;<BR>&lt;!ATTLIST mbean code        CDATA  #REQUIRED&gt;<BR>&lt;!-- The name attribute gives the JMX ObjectName string to use when registeringthe MBean. This must be a unique and valid JMX name.--&gt;<BR>&lt;!ATTLIST mbean name        CDATA  #REQUIRED&gt;<BR>&lt;!-- The xmbean-dd attribute defines the path to the JBoss XMBean descriptor. Thisis an xml document conforming to:<BR>&lt;!DOCTYPE mbean PUBLIC      &quot;-//JBoss//DTD JBOSS XMBEAN 1.0//EN&quot;      &quot;http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd&quot;&gt;If the descriptor is embedded via a nested xmbean element, the xmbean-dd attributemust be given as an empty string.Example:<BR>&lt;mbean code=&quot;org.jboss.test.jmx.xmbean.User&quot;name=&quot;jboss.test:service=xmbean-user&quot;xmbean-dd=&quot;META-INF/org/jboss/test/jmx/xmbean/User.xml&quot; /&gt;--&gt;<BR>&lt;!ATTLIST mbean xmbean-dd   CDATA  #IMPLIED&gt;<BR>&lt;!-- The optional xmbean-code attribute specifies the ModelMBean implementation classto use. This defaults to org.jboss.mx.modelmbean.XMBean.--&gt;<BR>&lt;!ATTLIST mbean xmbean-code CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The mbean element defines a JBoss MBean service. This includes the
mbean class, attributes and dependencies.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "constructor" Frequency = "Optional"/>
				<Ref Element = "xmbean" Frequency = "Optional"/>
				<Ref Element = "attribute" Frequency = "ZeroOrMore"/>
				<Ref Element = "depends" Frequency = "ZeroOrMore"/>
				<Ref Element = "depends-list" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "code" Required = "Yes">
				<DDML:Doc> The code attributes gives the fully qualified name of the MBean
implementation class.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "name" Required = "Yes">
				<DDML:Doc> The name attribute gives the JMX ObjectName string to use when registering
the MBean. This must be a unique and valid JMX name.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "xmbean-dd">
				<DDML:Doc> The xmbean-dd attribute defines the path to the JBoss XMBean descriptor. This
is an xml document conforming to:

&amp;lt;!DOCTYPE mbean PUBLIC
      "-//JBoss//DTD JBOSS XMBEAN 1.0//EN"
      "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd"&amp;gt;

If the descriptor is embedded via a nested xmbean element, the xmbean-dd attribute
must be given as an empty string.

Example:
	&amp;lt;mbean code="org.jboss.test.jmx.xmbean.User"
		name="jboss.test:service=xmbean-user"
		xmbean-dd="META-INF/org/jboss/test/jmx/xmbean/User.xml" /&amp;gt;

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "xmbean-code">
				<DDML:Doc> The optional xmbean-code attribute specifies the ModelMBean implementation class
to use. This defaults to org.jboss.mx.modelmbean.XMBean.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "code" Required = "Yes">
			<DDML:Doc> The code attributes gives the fully qualified name of the MBean
implementation class.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "name" Required = "Yes">
			<DDML:Doc> The name attribute gives the JMX ObjectName string to use when registering
the MBean. This must be a unique and valid JMX name.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "xmbean-dd">
			<DDML:Doc> The xmbean-dd attribute defines the path to the JBoss XMBean descriptor. This
is an xml document conforming to:

&amp;lt;!DOCTYPE mbean PUBLIC
      "-//JBoss//DTD JBOSS XMBEAN 1.0//EN"
      "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd"&amp;gt;

If the descriptor is embedded via a nested xmbean element, the xmbean-dd attribute
must be given as an empty string.

Example:
	&amp;lt;mbean code="org.jboss.test.jmx.xmbean.User"
		name="jboss.test:service=xmbean-user"
		xmbean-dd="META-INF/org/jboss/test/jmx/xmbean/User.xml" /&amp;gt;

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "xmbean-code">
			<DDML:Doc> The optional xmbean-code attribute specifies the ModelMBean implementation class
to use. This defaults to org.jboss.mx.modelmbean.XMBean.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "xmbean">
		<dtdsource><![CDATA[
<BR>&lt;!-- The xmbean element specifies a nested JBoss XMBean descriptor fragment. Itssupported content model is the same as the mbean element of the jboss_xmbean_1_0.dtdExample:<BR>&lt;mbean code=&quot;org.jboss.test.jmx.xmbean.User&quot;name=&quot;jboss.test:service=xmbean-user&quot;xmbean-dd=&quot;&quot;&gt;<BR>&lt;xmbean&gt;...<BR>&lt;/xmbean&gt;<BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT xmbean ANY&gt;]]>

		</dtdsource>
		<DDML:Doc> The xmbean element specifies a nested JBoss XMBean descriptor fragment. Its
supported content model is the same as the mbean element of the jboss_xmbean_1_0.dtd

Example:
	&amp;lt;mbean code="org.jboss.test.jmx.xmbean.User"
		name="jboss.test:service=xmbean-user"
		xmbean-dd=""&amp;gt;
		&amp;lt;xmbean&amp;gt;
			...
		&amp;lt;/xmbean&amp;gt;
	&amp;lt;/mbean&amp;gt;

		</DDML:Doc>
		<Model>
			<Any/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "constructor">
		<dtdsource><![CDATA[
<BR>&lt;!-- The constructor element defines a non-default constructor to use wheninstantiating the mbean.--&gt;<BR>&lt;!ELEMENT constructor (arg*)&gt;]]>

		</dtdsource>
		<DDML:Doc> The constructor element defines a non-default constructor to use when
instantiating the mbean.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "arg" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "arg">
		<dtdsource><![CDATA[
<BR>&lt;!-- The arg element specify the constructor arguments in the order of thector signature. Each arg has a type and value attribute.--&gt;<BR>&lt;!ELEMENT arg EMPTY&gt;<BR>&lt;!-- The type attribute gives the type of the argument as defined in thector signature. If not defined java.lang.String is assumed.--&gt;<BR>&lt;!ATTLIST arg type  CDATA  #IMPLIED&gt;<BR>&lt;!-- The value attribute provides the string representation of the ctorargument. It is converted from a string to type using Java PropertyEditor or actor taking a single string as its argument.--&gt;<BR>&lt;!ATTLIST arg value CDATA  #REQUIRED&gt;]]>

		</dtdsource>
		<DDML:Doc> The arg element specify the constructor arguments in the order of the
ctor signature. Each arg has a type and value attribute.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
		<AttGroup>
			<AttDef Name = "type">
				<DDML:Doc> The type attribute gives the type of the argument as defined in the
ctor signature. If not defined java.lang.String is assumed.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "value" Required = "Yes">
				<DDML:Doc> The value attribute provides the string representation of the ctor
argument. It is converted from a string to type using Java PropertyEditor or a
ctor taking a single string as its argument.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "type">
			<DDML:Doc> The type attribute gives the type of the argument as defined in the
ctor signature. If not defined java.lang.String is assumed.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "value" Required = "Yes">
			<DDML:Doc> The value attribute provides the string representation of the ctor
argument. It is converted from a string to type using Java PropertyEditor or a
ctor taking a single string as its argument.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "attribute">
		<dtdsource><![CDATA[
<BR>&lt;!-- The attribute element specifies the initial value for a management attribute ofthe enclosing mbean. Typically the value of the attribute element is the stringrepresentation of the attribute, but it can be an arbitrary xml fragment that isparsed by the mbean.--&gt;<BR>&lt;!ELEMENT attribute ANY&gt;<BR>&lt;!-- The required name attribute gives the name of the attribute. This is thename exposed by the mbean to the MBeanServer for the attribute.--&gt;<BR>&lt;!ATTLIST attribute name    CDATA  #REQUIRED&gt;<BR>&lt;!-- The optional replace attribute indicates whether references of the form ${x}in the attribute element content should be replaced with the correspondingSystem.getProperty(x) value.--&gt;<BR>&lt;!ATTLIST attribute replace  (true | false )  &quot;true&quot;&gt;<BR>&lt;!-- The optional trim attribute specifies whether the attribute element content shouldbe trimmed of whitespace.--&gt;<BR>&lt;!ATTLIST attribute trim     (true | false )  &quot;true&quot;&gt;]]>

		</dtdsource>
		<DDML:Doc> The attribute element specifies the initial value for a management attribute of
the enclosing mbean. Typically the value of the attribute element is the string
representation of the attribute, but it can be an arbitrary xml fragment that is
parsed by the mbean.

		</DDML:Doc>
		<Model>
			<Any/>
		</Model>
		<AttGroup>
			<AttDef Name = "name" Required = "Yes">
				<DDML:Doc> The required name attribute gives the name of the attribute. This is the
name exposed by the mbean to the MBeanServer for the attribute.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "replace" Type = "Enumeration" AttValue = "true">
				<DDML:Doc> The optional replace attribute indicates whether references of the form ${x}
in the attribute element content should be replaced with the corresponding
System.getProperty(x) value.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "true"/>
					<EnumerationValue Value = "false"/>
				</Enumeration>
			</AttDef>
			<AttDef Name = "trim" Type = "Enumeration" AttValue = "true">
				<DDML:Doc> The optional trim attribute specifies whether the attribute element content should
be trimmed of whitespace.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "true"/>
					<EnumerationValue Value = "false"/>
				</Enumeration>
			</AttDef>
		</AttGroup>
		<AttDef Name = "name" Required = "Yes">
			<DDML:Doc> The required name attribute gives the name of the attribute. This is the
name exposed by the mbean to the MBeanServer for the attribute.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "replace" Type = "Enumeration" AttValue = "true">
			<DDML:Doc> The optional replace attribute indicates whether references of the form ${x}
in the attribute element content should be replaced with the corresponding
System.getProperty(x) value.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "true"/>
				<EnumerationValue Value = "false"/>
			</Enumeration>
		</AttDef>
		<AttDef Name = "trim" Type = "Enumeration" AttValue = "true">
			<DDML:Doc> The optional trim attribute specifies whether the attribute element content should
be trimmed of whitespace.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "true"/>
				<EnumerationValue Value = "false"/>
			</Enumeration>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "depends">
		<dtdsource><![CDATA[
<BR>&lt;!-- The depends element specifies a JMX ObjectName string for a mbeanon which the enclosing mbean depends.Example:   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;yName&quot;&gt;domain:name=y<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;anonName&quot;&gt;         <BR>&lt;mbean code=&quot;nestedBean&quot; name=&quot;domain:name=x.y&quot;&gt;         ...         <BR>&lt;/mbean&gt;      <BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT depends (#PCDATA | mbean)*&gt;<BR>&lt;!-- The optional-attribute-name attribute specifies the attribute namewhich should be populated with the JMX ObjectName of the depends element.This allows an mbean to have access to the name of the mbean on whichit depends.--&gt;<BR>&lt;!ATTLIST depends optional-attribute-name CDATA  #IMPLIED&gt;<BR>&lt;!-- The proxy-type attribute specifies the interface namethat should be exposed on an MBeanProxy pointing at the dependentMBean specified by the JMX ObjectNameThe special value proxy-type=&quot;attribute&quot; will use theclass declared in the MBeanAttributeInfo as the interfacefor MBeanProxy.e.g.   <BR>&lt;mbean code=&quot;org.jboss.example.Helper&quot; name=&quot;domain:name=helper&quot;/&gt;      <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;Helper&quot;               proxy-type=&quot;org.jboss.example.HelperMBean&quot;      &gt;domain:name=helper<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;      <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends optional-attribute-name=&quot;Helper&quot;               proxy-type=&quot;attribute&quot;      &gt;domain:name=helper<BR>&lt;/depends&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ATTLIST depends proxy-type              CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The depends element specifies a JMX ObjectName string for a mbean
on which the enclosing mbean depends.

Example:
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="yName"&amp;gt;domain:name=y&amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;

   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="anonName"&amp;gt;
         &amp;lt;mbean code="nestedBean" name="domain:name=x.y"&amp;gt;
         ...
         &amp;lt;/mbean&amp;gt;
      &amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;

		</DDML:Doc>
		<Model>
			<Mixed>
				<Ref Element = "mbean"/>
			</Mixed>
		</Model>
		<AttGroup>
			<AttDef Name = "optional-attribute-name">
				<DDML:Doc> The optional-attribute-name attribute specifies the attribute name
which should be populated with the JMX ObjectName of the depends element.
This allows an mbean to have access to the name of the mbean on which
it depends.

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "proxy-type">
				<DDML:Doc> The proxy-type attribute specifies the interface name
that should be exposed on an MBeanProxy pointing at the dependent
MBean specified by the JMX ObjectName

The special value proxy-type="attribute" will use the
class declared in the MBeanAttributeInfo as the interface
for MBeanProxy.

e.g.
   &amp;lt;mbean code="org.jboss.example.Helper" name="domain:name=helper"/&amp;gt;
   
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="Helper"
               proxy-type="org.jboss.example.HelperMBean"
      &amp;gt;domain:name=helper&amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;
   
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="Helper"
               proxy-type="attribute"
      &amp;gt;domain:name=helper&amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "optional-attribute-name">
			<DDML:Doc> The optional-attribute-name attribute specifies the attribute name
which should be populated with the JMX ObjectName of the depends element.
This allows an mbean to have access to the name of the mbean on which
it depends.

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "proxy-type">
			<DDML:Doc> The proxy-type attribute specifies the interface name
that should be exposed on an MBeanProxy pointing at the dependent
MBean specified by the JMX ObjectName

The special value proxy-type="attribute" will use the
class declared in the MBeanAttributeInfo as the interface
for MBeanProxy.

e.g.
   &amp;lt;mbean code="org.jboss.example.Helper" name="domain:name=helper"/&amp;gt;
   
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="Helper"
               proxy-type="org.jboss.example.HelperMBean"
      &amp;gt;domain:name=helper&amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;
   
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends optional-attribute-name="Helper"
               proxy-type="attribute"
      &amp;gt;domain:name=helper&amp;lt;/depends&amp;gt;
   &amp;lt;/mbean&amp;gt;

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "depends-list">
		<dtdsource><![CDATA[
<BR>&lt;!-- The depends-list element specifies a series of JMX ObjectNamestrings for a mbeans on which the enclosing mbean depends. This isdone usingExample:   <BR>&lt;mbean code=&quot;myBean&quot; name=&quot;domain:name=x&quot;&gt;      <BR>&lt;depends-list optional-attribute-name=&quot;myObjectNameList&quot;&gt;         <BR>&lt;depends-list-element&gt;domain:name=y<BR>&lt;/depends-list-element&gt;         <BR>&lt;depends-list-element&gt;domain:name=z<BR>&lt;/depends-list-element&gt;      <BR>&lt;/depends-list&gt;   <BR>&lt;/mbean&gt;--&gt;<BR>&lt;!ELEMENT depends-list (depends-list-element)+&gt;<BR>&lt;!-- The optional-attribute-name attribute specifies the attribute namewhich should be populated with the JMX ObjectName[] array of the depends-listelements. This allows an mbean to have access to the names of the mbean onwhich it depends.--&gt;<BR>&lt;!ATTLIST depends-list optional-attribute-name CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc> The depends-list element specifies a series of JMX ObjectName
strings for a mbeans on which the enclosing mbean depends. This is
done using

Example:
   &amp;lt;mbean code="myBean" name="domain:name=x"&amp;gt;
      &amp;lt;depends-list optional-attribute-name="myObjectNameList"&amp;gt;
         &amp;lt;depends-list-element&amp;gt;domain:name=y&amp;lt;/depends-list-element&amp;gt;
         &amp;lt;depends-list-element&amp;gt;domain:name=z&amp;lt;/depends-list-element&amp;gt;
      &amp;lt;/depends-list&amp;gt;
   &amp;lt;/mbean&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq Frequency = "OneOrMore">
				<Ref Element = "depends-list-element"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "optional-attribute-name">
				<DDML:Doc> The optional-attribute-name attribute specifies the attribute name
which should be populated with the JMX ObjectName[] array of the depends-list
elements. This allows an mbean to have access to the names of the mbean on
which it depends.

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "optional-attribute-name">
			<DDML:Doc> The optional-attribute-name attribute specifies the attribute name
which should be populated with the JMX ObjectName[] array of the depends-list
elements. This allows an mbean to have access to the names of the mbean on
which it depends.

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "depends-list-element">
		<dtdsource><![CDATA[
<BR>&lt;!-- The depends-list-element element specifies a JMX ObjectName stringfor a mbean on which the enclosing mbean depends.--&gt;<BR>&lt;!ELEMENT depends-list-element (#PCDATA | mbean)*&gt;]]>

		</dtdsource>
		<DDML:Doc> The depends-list-element element specifies a JMX ObjectName string
for a mbean on which the enclosing mbean depends.

		</DDML:Doc>
		<Model>
			<Mixed>
				<Ref Element = "mbean"/>
			</Mixed>
		</Model>
	</ElementDecl>
</DocumentDef>