<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "jboss_3_0.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR>&lt;?xml encoding='UTF-8' ?&gt;<BR><BR>&lt;!--This is the XML DTD for the JBoss 3.0 EJB deployment descriptor.The DOCTYPE is:  <BR>&lt;!DOCTYPE jboss PUBLIC      &quot;-//JBoss//DTD JBOSS 3.0//EN&quot;      &quot;http://www.jboss.org/j2ee/dtd/jboss_3_0.dtd&quot;&gt;$Id: jboss_3_0.dtd,v 1.8.2.3 2003/06/20 05:39:01 ejort Exp $$Revision: 1.8.2.3 $Overview of the architecture of jboss.xml<BR>&lt;jboss&gt;  <BR>&lt;enforce-ejb-restrictions /&gt;  <BR>&lt;security-domain /&gt;  <BR>&lt;unauthenticated-principal /&gt;  <BR>&lt;enterprise-beans&gt;    <BR>&lt;entity&gt;      <BR>&lt;ejb-name /&gt;      <BR>&lt;jndi-name /&gt;      <BR>&lt;local-jndi-name /&gt;      <BR>&lt;read-only&gt;       <BR>&lt;home-invoker&gt;      <BR>&lt;bean-invoker&gt;      <BR>&lt;configuration-name&gt;      <BR>&lt;security-proxy&gt;      <BR>&lt;ejb-ref&gt;      <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name /&gt;        <BR>&lt;resource-name /&gt;      <BR>&lt;/resource-ref&gt;      <BR>&lt;resource-env-ref&gt;      <BR>&lt;clustered /&gt;      <BR>&lt;cluster-config&gt;    <BR>&lt;/entity&gt;    <BR>&lt;session&gt;      <BR>&lt;ejb-name /&gt;      <BR>&lt;jndi-name /&gt;      <BR>&lt;local-jndi-name /&gt;      <BR>&lt;home-invoker&gt;      <BR>&lt;bean-invoker&gt;      <BR>&lt;configuration-name&gt;      <BR>&lt;security-proxy&gt;      <BR>&lt;ejb-ref&gt;      <BR>&lt;resource-ref&gt;        <BR>&lt;res-ref-name /&gt;        <BR>&lt;resource-name /&gt;      <BR>&lt;/resource-ref&gt;      <BR>&lt;resource-env-ref&gt;      <BR>&lt;clustered /&gt;      <BR>&lt;cluster-config&gt;    <BR>&lt;/session&gt;    <BR>&lt;message-driven&gt;      <BR>&lt;ejb-name&gt;      <BR>&lt;destination-jndi-name&gt;      <BR>&lt;mdb-user&gt;      <BR>&lt;mdb-passwd&gt;      <BR>&lt;mdb-client-id&gt;      <BR>&lt;mdb-subscription-id&gt;      <BR>&lt;configuration-name&gt;      <BR>&lt;security-proxy&gt;      <BR>&lt;ejb-ref&gt;      <BR>&lt;resource-ref&gt;      <BR>&lt;resource-env-ref&gt;    <BR>&lt;/message-driven&gt;  <BR>&lt;/enterprise-beans&gt;  <BR>&lt;resource-managers&gt;    <BR>&lt;resource-manager&gt;      <BR>&lt;res-name /&gt;      <BR>&lt;res-jndi-name /&gt;    <BR>&lt;/resource-manager&gt;    <BR>&lt;resource-manager&gt;      <BR>&lt;res-name /&gt;      <BR>&lt;res-url /&gt;    <BR>&lt;/resource-manager&gt;  <BR>&lt;/resource-managers&gt;  <BR>&lt;container-configurations&gt;    <BR>&lt;container-configuration&gt;      <BR>&lt;container-name /&gt;      <BR>&lt;container-invoker /&gt;      <BR>&lt;container-interceptors /&gt;      <BR>&lt;client-interceptors /&gt;      <BR>&lt;instance-pool /&gt;      <BR>&lt;instance-cache /&gt;      <BR>&lt;persistence-manager /&gt;      <BR>&lt;transaction-manager /&gt;      <BR>&lt;web-class-loader /&gt;      <BR>&lt;locking-policy /&gt;      <BR>&lt;container-invoker-conf /&gt;      <BR>&lt;container-cache-conf /&gt;      <BR>&lt;container-pool-conf /&gt;      <BR>&lt;commit-option /&gt;      <BR>&lt;optiond-refresh-rate /&gt;      <BR>&lt;security-domain/&gt;    <BR>&lt;/container-configuration&gt;  <BR>&lt;/container-configurations&gt;<BR>&lt;/jboss&gt;--&gt;<BR>&lt;!--  The jboss element is the root element of the jboss.xml file. It  contains all the information used by jboss but not described in the  ejb-jar.xml file. All of it is optional.    1- the application assembler can define custom container configurations  for the beans. Standard configurations are provided in standardjboss.xml  2- the deployer can override the jndi names under which the beans are  deployed  3- the deployer can specify runtime jndi names for resource managers.--&gt;<BR>&lt;!ELEMENT jboss (enforce-ejb-restrictions? , security-domain? , unauthenticated-principal? , enterprise-beans? , resource-managers? , container-configurations?)&gt;<BR>&lt;!--  The enforce-ejb-restrictions element tells the container to enforce ejb1.1 restrictions  It must be one of the following :    <BR>&lt;enforce-ejb-restrictions&gt;true<BR>&lt;/enforce-ejb-restrictions&gt;    <BR>&lt;enforce-ejb-restrictions&gt;false<BR>&lt;/enforce-ejb-restrictions&gt;  Used in: jboss--&gt;<BR>&lt;!ELEMENT enforce-ejb-restrictions (#PCDATA)&gt;<BR>&lt;!--   The security-domain element specifies the JNDI name of the security  manager that implements the EJBSecurityManager and RealmMapping for  the domain. When specified at the jboss level it specifies the security  domain for all j2ee components in the deployment unit.  One can override the global security-domain at the container  level using the security-domain element at the container-configuration  level.  Used in: jboss, container-configuration--&gt;<BR>&lt;!ELEMENT security-domain (#PCDATA)&gt;<BR>&lt;!--   The unauthenticated-principal element specifies the name of the principal  that will be returned by the EJBContext.getCallerPrincipal() method if there  is no authenticated user. This Principal has no roles or privaledges to call  any other beans.--&gt;<BR>&lt;!ELEMENT unauthenticated-principal (#PCDATA)&gt;<BR>&lt;!--  The enterprise-beans element contains additional information about  the beans. These informations, such as jndi names, resource managers and  container configurations, are specific to jboss and not described in  ejb-jar.xml.  jboss will provide a standard behaviour if no enterprise-beans element  is found, see container-configurations, jndi-name and resource-managers  for defaults.  Used in: jboss--&gt;<BR>&lt;!ELEMENT enterprise-beans (session | entity | message-driven)+&gt;<BR>&lt;!--  The entity element holds information specific to jboss and not declared  in ejb-jar.xml about an entity bean, such as jndi name, container  configuration, and resource managers. (see tags for details)  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.  Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT entity (ejb-name , jndi-name? , local-jndi-name? , read-only? , home-invoker? , bean-invoker? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , clustered? , cluster-config? , method-attributes? , depends*)&gt;<BR>&lt;!--  The session element holds information specific to jboss and not declared  in ejb-jar.xml about a session bean, such as jndi name, container  configuration, and resource managers. (see tags for details)  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.  Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT session (ejb-name , jndi-name? , local-jndi-name? , home-invoker? , bean-invoker? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , clustered? , cluster-config? , method-attributes? , depends*)&gt;<BR>&lt;!--  The message-driven element holds information specific to jboss and not declared  in ejb-jar.xml about a message-driven bean, such as container  configuration and resources.  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.    Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT message-driven (ejb-name , destination-jndi-name , mdb-user? , mdb-passwd? , mdb-client-id? , mdb-subscription-id? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , depends*)&gt;<BR>&lt;!--  The ejb-name element gives the name of the bean, it must correspond to  an ejb-name element in ejb-jar.xml    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT ejb-name (#PCDATA)&gt;<BR>&lt;!--   The jndi-name element gives the actual jndi name under which   the bean will be deployed when used in the entity, session and   message-driven elements. If it is not provided jboss will assume   &quot;jndi-name&quot; = &quot;ejb-name&quot;     When used in the ejb-ref, resource-ref, resource-env-ref elements   this specifies the jndi name to which the reference should link.     Used in: entity, session and message-driven     ejb-ref, resource-ref, resource-env-ref --&gt;<BR>&lt;!ELEMENT jndi-name (#PCDATA)&gt;<BR>&lt;!--   The JNDI name under with the local home interface should be bound    Used in: entity and session --&gt;<BR>&lt;!ELEMENT local-jndi-name (#PCDATA)&gt;<BR>&lt;!--  The read-only element flags an entity bean as read only.  The bean will never be ejbStored. Defaults to false.  It must be one of the following :    <BR>&lt;read-only&gt;true<BR>&lt;/read-only&gt;    <BR>&lt;read-only&gt;false<BR>&lt;/read-only&gt;  Used in: entity, method-attributes--&gt;<BR>&lt;!ELEMENT read-only (#PCDATA)&gt;<BR>&lt;!--  The home-invoker and bean-invoker elements define the Invoker MBean to use  for Home Proxies and Bean Proxies. When specified at the container configuration  level this specifies the default invoker for all beans using the container  configuration.  Used in: container-configuration, entity and session--&gt;<BR>&lt;!ELEMENT home-invoker (#PCDATA)&gt;<BR>&lt;!ELEMENT bean-invoker (#PCDATA)&gt;<BR>&lt;!--  The configuration-name element gives the name of the container  configuration for this bean. It must match one of the container-name  tags in the container-configurations section, or one of the standard  configurations. If no element is provided, jboss will automatically use the  right standard configuration, see container-configurations.    Note: unlike earlier releases, this element may not be specified as an   empty element to achieve the same effect as not specifying the element.  Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT configuration-name (#PCDATA)&gt;<BR>&lt;!-- The depends element gives a JMX ObjectName of a service on which thecontainer or ejb depends.--&gt;<BR>&lt;!ELEMENT depends (#PCDATA)&gt;<BR>&lt;!ELEMENT destination-jndi-name (#PCDATA)&gt;<BR>&lt;!ELEMENT mdb-user (#PCDATA)&gt;<BR>&lt;!ELEMENT mdb-passwd (#PCDATA)&gt;<BR>&lt;!ELEMENT mdb-client-id (#PCDATA)&gt;<BR>&lt;!ELEMENT mdb-subscription-id (#PCDATA)&gt;<BR>&lt;!-- The security-proxy gives the class name of the security proxy implementation.  This may be an instance of org.jboss.security.SecurityProxy, or an  just an object that implements methods in the home or remote interface  of an EJB without implementating any common interface.      Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT security-proxy (#PCDATA)&gt;<BR>&lt;!--  The ejb-ref element is used to give the jndi-name of an external  ejb reference. In the case of an external ejb reference, you don't  provide a ejb-link element in ejb-jar.xml, but you provide a jndi-name  in jboss.xml    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT ejb-ref (ejb-ref-name , jndi-name)&gt;<BR>&lt;!--  The ejb-ref-name element is the name of the ejb reference as given in  ejb-jar.xml.    Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;<BR>&lt;!--  The resource-env-ref element gives a mapping between the &quot;code name&quot;  of a env resource (res-ref-name, provided by the Bean Developer) and  its deployed JNDI name.    Used in: session, entity, message-driven--&gt;<BR>&lt;!ELEMENT resource-env-ref (resource-env-ref-name , jndi-name)&gt;<BR>&lt;!--  The resource-env-ref-name element gives the &quot;code name&quot; of a resource. It is  provided by the Bean Developer.    Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;<BR>&lt;!--  The clustered element indicates if this bean will run in a cluster of JBoss instances.  It is provided by the deployer. If not, jboss will assume clustered = False  Possible values: &quot;True&quot;, &quot;False&quot; (default)    Used in: entity and session--&gt;<BR>&lt;!ELEMENT clustered (#PCDATA)&gt;<BR>&lt;!--  The cluster-config element allows to specify cluster specific settings.  WARNING: session-state-manager-jndi-name is only for SFSB.    Used in: session, entity--&gt;<BR>&lt;!ELEMENT cluster-config (partition-name? , home-load-balance-policy? , bean-load-balance-policy? , session-state-manager-jndi-name?)&gt;<BR>&lt;!--  The partition-name element indicates the name of the HAPartition to be used  by the container to exchange clustering information. This is a name and *not*  a JNDI name. Given name will be prefixed by &quot;/HASessionState/&quot; by the container to get  the actual JNDI name of the HAPartition. If not, jboss will assume partition-name = &quot;DefaultPartition&quot;.    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT partition-name (#PCDATA)&gt;<BR>&lt;!--  The home-load-balance-policy element indicates the java class name to be used  to load balance calls in the home proxy.  If not, jboss will assume home-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;.    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT home-load-balance-policy (#PCDATA)&gt;<BR>&lt;!--  The bean-load-balance-policy element indicates the java class name to be used  to load balance calls in the bean proxy.  If not, jboss will assume :    - for EB and SFSB : bean-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;    - for SLSB        : bean-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT bean-load-balance-policy (#PCDATA)&gt;<BR>&lt;!--  The session-state-manager-jndi-name element indicates the name of the HASessionState to be used  by the container as a backend for state session management in the cluster.  This *is* a JNDI name (not like the partition-name element).  If not, jboss will assume partition-name = &quot;/HASessionState/Default&quot;.    Used in: session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT session-state-manager-jndi-name (#PCDATA)&gt;<BR>&lt;!-- The method-attributes element allows for the specification of non-standardattributes for the named method(s).Used in: session and entity--&gt;<BR>&lt;!ELEMENT method-attributes (method-name , read-only?)&gt;<BR>&lt;!-- Specifies a method name or method name patternUsed in: session and entity--&gt;<BR>&lt;!ELEMENT method-name (#PCDATA)&gt;<BR>&lt;!--  The resource-ref element gives a mapping between the &quot;code name&quot;  of a resource (res-ref-name, provided by the Bean Developer) and  its &quot;xml name&quot; (resource-name, provided by the Application Assembler).  If no resource-ref is provided, jboss will assume that  &quot;xml-name&quot; = &quot;code name&quot;    See resource-managers.    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT resource-ref (res-ref-name , (resource-name | jndi-name | res-url))&gt;<BR>&lt;!--  The res-ref-name element gives the &quot;code name&quot; of a resource. It is  provided by the Bean Developer. See resource-managers for the actual  configuration of the resource.    Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;<BR>&lt;!--  The resource-name element gives the &quot;xml name&quot; of the resource. It is  provided by the Application Assembler. See resource-managers for the  actual configuration of the resource.    Used in: resource-ref--&gt;<BR>&lt;!ELEMENT resource-name (#PCDATA)&gt;<BR>&lt;!--  The resource-managers element is used to declare resource managers.    A resource has 3 names:  - the &quot;code name&quot; is the name used in the code of the bean, supplied by    the Bean Developer in the resource-ref section of the ejb-jar.xml file    - the &quot;xml name&quot; is an intermediary name used by the Application Assembler    to identify resources in the XML file.    - the &quot;runtime jndi name&quot; is the actual jndi-name or url of the deployed    resource, it is supplied by the Deployer.    The mapping between the &quot;code name&quot; and the &quot;xml name&quot; is given  in the resource-ref section for the bean. If not, jboss will assume that  &quot;xml name&quot; = &quot;code name&quot;.    The mapping between the &quot;xml name&quot; and the &quot;runtime jndi name&quot; is given in  a resource-manager section. If not, and if the datasource is of type  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the jndi  tree.    Used in: jboss--&gt;<BR>&lt;!ELEMENT resource-managers (resource-manager*)&gt;<BR>&lt;!--  The resource-manager element is used to provide a mapping between the  &quot;xml name&quot; of a resource (res-name) and its &quot;runtime jndi name&quot;  (res-jndi-name or res-url according to the type of the resource).  If it is not provided, and if the type of the resource is  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the  jndi tree.    See resource-managers.    Used in: resource-managers--&gt;<BR>&lt;!ELEMENT resource-manager (res-name , (res-jndi-name | res-url))&gt;<BR>&lt;!--  The res-name element gives the &quot;xml name&quot; of a resource, it is provided  by the Application Assembler. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-name (#PCDATA)&gt;<BR>&lt;!--  The res-jndi-name element is the &quot;deployed jndi name&quot; of a resource, it  is provided by the Deployer. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-jndi-name (#PCDATA)&gt;<BR>&lt;!--  The res-url element is the &quot;runtime jndi name&quot; as a url of the resource.  It is provided by the Deployer. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-url (#PCDATA)&gt;<BR>&lt;!--  The container-configurations element declares the different possible  container configurations that the beans can use. standardjboss.xml  provides 15 standard configurations with the following container-names:    - Standard CMP 2.x EntityBean    - Standard CMP EntityBean    - Clustered CMP 2.x EntityBean    - Clustered CMP EntityBean    - IIOP CMP 2.x EntityBean    - IIOP CMP EntityBean    - jdk 1.2.2 CMP EntityBean    - Standard Stateless SessionBean    - Clustered Stateless SessionBean    - IIOP Stateless SessionBean    - jdk 1.2.2 Stateless SessionBean    - Standard Stateful SessionBean    - Clustered Stateful SessionBean    - IIOP Stateful SessionBean    - jdk 1.2.2 Stateful SessionBean    - Standard BMP EntityBean    - Clustered BMP EntityBean    - IIOP BMP EntityBean    - jdk 1.2.2 BMP EntityBean    - Standard message Driven Bean    The standard configurations will automatically be used if no custom  configuration is specified.  The jdk 1.2.2 configurations are defined for backwards compatability.    The application assembler can define advanced custom configurations here.    Used in: jboss--&gt;<BR>&lt;!ELEMENT container-configurations (container-configuration*)&gt;<BR>&lt;!--  The container-configuration element describes a configuration for the  container.  The different plugins to use are declared here, as well as their  configurations. The configuration-class attribute is no longer used.    Used in: container-configurations--&gt;<BR>&lt;!ELEMENT container-configuration (container-name , call-logging? , container-invoker? , home-invoker? , bean-invoker? , container-interceptors? , client-interceptors? , instance-pool? , instance-cache? , persistence-manager? , transaction-manager? , web-class-loader? , locking-policy? , container-invoker-conf? , container-cache-conf? , container-pool-conf? , commit-option? , optiond-refresh-rate? , security-domain? , cluster-config?)&gt;<BR>&lt;!-- The extends attribute gives the container-name value of the configuration the container-configurationis extending. This allows one to specify an extension configuration without having to reiterate all ofthe other duplicate configuration info.        <BR>&lt;container-configuration extends=&quot;Standard Stateful SessionBean&quot;&gt;            <BR>&lt;container-name&gt;Secure Stateless SessionBean<BR>&lt;/container-name&gt;            <BR>&lt;security-domain&gt;java:/jaas/other<BR>&lt;/security-domain&gt;        <BR>&lt;/container-configuration&gt;--&gt;<BR>&lt;!ATTLIST container-configuration extends CDATA  #IMPLIED&gt;<BR>&lt;!--  The container-name element gives the name of the configuration being  defined. Beans may refer to this name in their configuration-name tag.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-name (#PCDATA)&gt;<BR>&lt;!--  The call-logging element tells if the container must log every method  invocation for this bean or not. Its value must be trus or false.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT call-logging (#PCDATA)&gt;<BR>&lt;!--  The container-invoker element gives the class name of the container  invoker jboss must use for in this configuration. This class must  implement the org.jboss.ejb.ContainerInvoker interface. The default is  org.jboss.proxy.ejb.ProxyFactory for entity and session beans and   org.jboss.ejb.plugins.jms.JMSContainerInvoker for message driven beans.  Containers supporting clustering use org.jboss.proxy.ejb.ProxyFactoryHA.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-invoker (#PCDATA)&gt;<BR>&lt;!--   The container-interceptors element gives the chain of Interceptors  (instances of org.jboss.ejb.Interceptor) that are associated with the container.  The declared order of the interceptor elements corresponds to the order of the  interceptor chain.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-interceptors (interceptor+)&gt;<BR>&lt;!-- The client-interceptors defines the home and bean client side interceptor chain  Used in: container-configuration--&gt;<BR>&lt;!ELEMENT client-interceptors (home , bean)&gt;<BR>&lt;!--The home element gives the chain of interceptors(instances of org.jboss.proxy.Interceptor) that are associated with the homeproxy and operate in the client VM. The declared order of the interceptorelements corresponds to the order of the interceptor chain.  Used in: client-interceptors--&gt;<BR>&lt;!ELEMENT home (interceptor+)&gt;<BR>&lt;!--The bean element gives the chain of interceptors(instances of org.jboss.proxy.Interceptor) that are associated with the remoteproxy and operate in the client VM. The declared order of the interceptorelements corresponds to the order of the interceptor chain.  Used in: client-interceptors--&gt;<BR>&lt;!ELEMENT bean (interceptor+)&gt;<BR>&lt;!--   The interceptor element specifies an instance of org.jboss.ejb.Interceptor  that is to be added to the container interceptor stack.    Used in: container-interceptors--&gt;<BR>&lt;!ELEMENT interceptor (#PCDATA)&gt;<BR>&lt;!--   The transaction attribute is used to indicate what type of container its  interceptor applies to. It is an enumerated value that can take on one of: Bean,  Container or Both. A value of Bean indicates that the interceptor should only be  added to a container for bean-managed transaction.  A value of Container indicates that the interceptor should only be added to a  container for container-managed transactions.  A value of Both indicates that the interceptor should be added to all  containers. This is the default value if the transaction attribute is not  explictlygiven.--&gt;<BR>&lt;!ATTLIST interceptor transaction     (Bean | Container | Both )  &quot;Both&quot;&gt;<BR>&lt;!--   The metricsEnabled attributes is used to indicate if the interceptor  should only be included when the org.jboss.ejb.ContainerFactory metricsEnabled  flag is set to true. The allowed values are true and false with false being the  default if metricsEnabled is not explicitly given.--&gt;<BR>&lt;!ATTLIST interceptor metricsEnabled  (true | false )  &quot;false&quot;&gt;<BR>&lt;!--  The instance-pool element gives the class name of the instance pool  jboss must use for in this configuration. This class must implement  the org.jboss.ejb.InstancePool interface. The defaults are:  - org.jboss.ejb.plugins.EntityInstancePool for entity beans  - org.jboss.ejb.plugins.StatelessSessionInstancePool for stateless  session beans.  - no pool is used for stateful session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT instance-pool (#PCDATA)&gt;<BR>&lt;!--  The instance-cache element gives the class name of the instance cache  jboss must use for in this configuration. This class must implement  the org.jboss.ejb.InstanceCache interface. The defaults are:  - org.jboss.ejb.plugins.NoPassivationEntityInstanceCache for entity beans  - org.jboss.ejb.plugins.NoPassivationStatefulSessionInstanceCache for  stateful session beans.  - no cache is used for stateless session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT instance-cache (#PCDATA)&gt;<BR>&lt;!--  The persistence-manager element gives the class name of the persistence  manager / persistence store jboss must use for in this configuration.  This class must implement:  - org.jboss.ejb.EntityPersistenceStore for CMP Entity Beans (default is  org.jboss.ejb.plugins.jaws.JAWSPersistenceManager)  - org.jboss.ejb.EntityPersistenceManager for BMP entity beans (default  is org.jboss.ejb.plugins.BMPPersistenceManager)  - org.jboss.ejb.StatefulSessionPersistenceManager for stateless session  beans.  - no persistence-manager is used for stateless session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT persistence-manager (#PCDATA)&gt;<BR>&lt;!--  The locking-policy element gives the class name of the EJB lock  implementation JBoss must use for in this configuration. This class must  implement  the org.jboss.ejb.BeanLock interface. The default is  org.jboss.ejb.plugins.lock.QueuedPessimisticEJBLock.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT locking-policy (#PCDATA)&gt;<BR>&lt;!--  The transaction-manager element gives the class name of the transaction  manager jboss must use for in this configuration. This class must implement  the javax.transaction.TransactionManager interface. The default is  org.jboss.tm.TxManager.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT transaction-manager (#PCDATA)&gt;<BR>&lt;!--  The web-class-loader element gives the class name of the web classloader  jboss must use for in this configuration. This class must be a subclass  of org.jboss.web.WebClassLoader. The default is org.jboss.web.WebClassLoader.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT web-class-loader (#PCDATA)&gt;<BR>&lt;!--  The container-invoker-conf element holds configuration data for the  container invoker.  jboss does not read directly the subtree for this element: instead,  it is passed to the container invoker instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    The Optimized tag described here only relates to the default container  invokers, ProxyFactory, ProxyFactoryHA and JMSContainerInvoker.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-invoker-conf (JMSProviderAdapterJNDI? , ServerSessionPoolFactoryJNDI? , MaximumSize? , MaxMessages? , MDBConfig?)&gt;<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT JMSProviderAdapterJNDI (#PCDATA)&gt;<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT ServerSessionPoolFactoryJNDI (#PCDATA)&gt;<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT MaxMessages (#PCDATA)&gt;<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT MDBConfig (ReconnectIntervalSec , DLQConfig?)&gt;<BR>&lt;!--  Used in: MDBConfig--&gt;<BR>&lt;!ELEMENT ReconnectIntervalSec (#PCDATA)&gt;<BR>&lt;!--  Used in: MDBConfig--&gt;<BR>&lt;!ELEMENT DLQConfig (DestinationQueue , MaxTimesRedelivered , TimeToLive)&gt;<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT DestinationQueue (#PCDATA)&gt;<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT MaxTimesRedelivered (#PCDATA)&gt;<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT TimeToLive (#PCDATA)&gt;<BR>&lt;!--  The container-cache-conf element holds dynamic configuration data  for the instance cache.  jboss does not read directly the subtree for this element: instead,  it is passed to the instance cache instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-cache-conf (cache-policy? , cache-policy-conf?)&gt;<BR>&lt;!--  The implementation class for the cache policy, which controls  when instances will be passivated, etc.    Used in: container-cache-conf--&gt;<BR>&lt;!ELEMENT cache-policy (#PCDATA)&gt;<BR>&lt;!--  The configuration settings for the selected cache policy.  This  is currently only valid for the LRU cache.  When the cache is the LRU one for the stateful container, the elements  remover-period and max-bean-life specifies the period of the remover  task that removes stateful beans (that normally have been passivated)  that have age greater than the specified max-bean-life element.  Used in: container-cache-conf (when cache-policy is the LRU cache)--&gt;<BR>&lt;!ELEMENT cache-policy-conf (min-capacity , max-capacity , remover-period? , max-bean-life? , overager-period , max-bean-age , resizer-period , max-cache-miss-period , min-cache-miss-period , cache-load-factor)&gt;<BR>&lt;!--  The minimum capacity of this cache--&gt;<BR>&lt;!ELEMENT min-capacity (#PCDATA)&gt;<BR>&lt;!--  The maximum capacity of this cache--&gt;<BR>&lt;!ELEMENT max-capacity (#PCDATA)&gt;<BR>&lt;!--  The period of the overager's runs--&gt;<BR>&lt;!ELEMENT overager-period (#PCDATA)&gt;<BR>&lt;!--  The period of the remover's runs--&gt;<BR>&lt;!ELEMENT remover-period (#PCDATA)&gt;<BR>&lt;!--  The max-bean-life specifies the period of the remover  task that removes stateful beans (that normally have been passivated)  that have age greater than the specified max-bean-life element.--&gt;<BR>&lt;!ELEMENT max-bean-life (#PCDATA)&gt;<BR>&lt;!--  The period of the resizer's runs--&gt;<BR>&lt;!ELEMENT resizer-period (#PCDATA)&gt;<BR>&lt;!--  The age after which a bean is automatically passivated--&gt;<BR>&lt;!ELEMENT max-bean-age (#PCDATA)&gt;<BR>&lt;!--  Shrink cache capacity if there is a cache miss every or more  this member's value--&gt;<BR>&lt;!ELEMENT max-cache-miss-period (#PCDATA)&gt;<BR>&lt;!--  Enlarge cache capacity if there is a cache miss every or less  this member's value--&gt;<BR>&lt;!ELEMENT min-cache-miss-period (#PCDATA)&gt;<BR>&lt;!--  The resizer will always try to keep the cache capacity so that  the cache is this member's value loaded of cached objects--&gt;<BR>&lt;!ELEMENT cache-load-factor (#PCDATA)&gt;<BR>&lt;!--  The container-pool-conf element holds configuration data for the  instance pool.  jboss does not read directly the subtree for this element: instead,  it is passed to the instance pool instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    The default instance pools, EntityInstancePool and  StatelessSessionInstancePool, both accept the following configuration.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-pool-conf (MaximumSize , feeder-policy , feeder-policy-conf)&gt;<BR>&lt;!--  The capacity of the Pool.  The pool feeder will feed the pool with new  instances, the pool size being limited by this value.  For pools where  reclaim is possible, the pool will also be feed when the instance is  free to be reused.  This is not an hard limit, if instances are needed when the pool is at  its MaximumSize, new instances will be created following the demand.    Used in: container-pool-conf--&gt;<BR>&lt;!ELEMENT MaximumSize (#PCDATA)&gt;<BR>&lt;!--  This element is only valid if the instance pool is a subclass of  AbstractInstancePool.    The feeder-policy element gives the Class that implements InstancePoolFeeder  and is responsible to feed the pool with new instances of bean.  If not present, no thread are started and the pool will have a size of 1.    TimedInstancePoolFeeder is the first implementation available.    Used in: container-pool-conf for AbstractInstancePool subclasses--&gt;<BR>&lt;!ELEMENT feeder-policy (#PCDATA)&gt;<BR>&lt;!--  This element describes properties that the InstancePoolFeeder implementation  will read to configure itself (XmlLoadable).    Note: the 3 attributes are hardcoded here for TimedInstancePoolFeeder.    Used in: container-pool-conf for InstancePoolFeeder implementations--&gt;<BR>&lt;!ELEMENT feeder-policy-conf (increment , period)&gt;<BR>&lt;!--  The pool feeder will feed the pool with this number of new instances at  a regular period.    Used in: feeder-policy-conf--&gt;<BR>&lt;!ELEMENT increment (#PCDATA)&gt;<BR>&lt;!--  The interval of time (in milliseconds) the pool feeder look if the pool  has come to its maximum size (capacity) and if not, will feed it with  a particular number of new instances (increment).    Used in: feeder-policy-conf--&gt;<BR>&lt;!ELEMENT period (#PCDATA)&gt;<BR>&lt;!--  This option is only used for entity container configurations.    The commit-option element tells the container which option to use for transactions.  Its value must be A, B C, or D.    - option A: the entiry instance has exclusive access to the database. The instance  stays ready after a transaction.  - option B: the entity instance does not have exclusive access to the database.  The state is loaded before the next transaction.  - option C: same as B, except the container does not keep the instance after commit:  a passivate is immediately performed after the commit.    - option D: a lazy update. default is every 30 secs.               can be updated with <BR>&lt;optiond-refresh-rate&gt;    See ejb1.1 specification for details (p118).    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT commit-option (#PCDATA)&gt;<BR>&lt;!--  This element is used to specify the refresh rate of commit option d--&gt;<BR>&lt;!ELEMENT optiond-refresh-rate (#PCDATA)&gt;]]>

	</dtdsource>
	<ElementDecl Name = "jboss">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT jboss (enforce-ejb-restrictions? , security-domain? , unauthenticated-principal? , enterprise-beans? , resource-managers? , container-configurations?)&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "enforce-ejb-restrictions" Frequency = "Optional"/>
				<Ref Element = "security-domain" Frequency = "Optional"/>
				<Ref Element = "unauthenticated-principal" Frequency = "Optional"/>
				<Ref Element = "enterprise-beans" Frequency = "Optional"/>
				<Ref Element = "resource-managers" Frequency = "Optional"/>
				<Ref Element = "container-configurations" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "enforce-ejb-restrictions">
		<dtdsource><![CDATA[
<BR>&lt;!--  The enforce-ejb-restrictions element tells the container to enforce ejb1.1 restrictions  It must be one of the following :    <BR>&lt;enforce-ejb-restrictions&gt;true<BR>&lt;/enforce-ejb-restrictions&gt;    <BR>&lt;enforce-ejb-restrictions&gt;false<BR>&lt;/enforce-ejb-restrictions&gt;  Used in: jboss--&gt;<BR>&lt;!ELEMENT enforce-ejb-restrictions (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The enforce-ejb-restrictions element tells the container to enforce ejb1.1 restrictions
  It must be one of the following :
    &amp;lt;enforce-ejb-restrictions&amp;gt;true&amp;lt;/enforce-ejb-restrictions&amp;gt;
    &amp;lt;enforce-ejb-restrictions&amp;gt;false&amp;lt;/enforce-ejb-restrictions&amp;gt;

  Used in: jboss

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "security-domain">
		<dtdsource><![CDATA[
<BR>&lt;!--   The security-domain element specifies the JNDI name of the security  manager that implements the EJBSecurityManager and RealmMapping for  the domain. When specified at the jboss level it specifies the security  domain for all j2ee components in the deployment unit.  One can override the global security-domain at the container  level using the security-domain element at the container-configuration  level.  Used in: jboss, container-configuration--&gt;<BR>&lt;!ELEMENT security-domain (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The security-domain element specifies the JNDI name of the security
  manager that implements the EJBSecurityManager and RealmMapping for
  the domain. When specified at the jboss level it specifies the security
  domain for all j2ee components in the deployment unit.
  One can override the global security-domain at the container
  level using the security-domain element at the container-configuration
  level.

  Used in: jboss, container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "unauthenticated-principal">
		<dtdsource><![CDATA[
<BR>&lt;!--   The unauthenticated-principal element specifies the name of the principal  that will be returned by the EJBContext.getCallerPrincipal() method if there  is no authenticated user. This Principal has no roles or privaledges to call  any other beans.--&gt;<BR>&lt;!ELEMENT unauthenticated-principal (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The unauthenticated-principal element specifies the name of the principal
  that will be returned by the EJBContext.getCallerPrincipal() method if there
  is no authenticated user. This Principal has no roles or privaledges to call
  any other beans.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "enterprise-beans">
		<dtdsource><![CDATA[
<BR>&lt;!--  The enterprise-beans element contains additional information about  the beans. These informations, such as jndi names, resource managers and  container configurations, are specific to jboss and not described in  ejb-jar.xml.  jboss will provide a standard behaviour if no enterprise-beans element  is found, see container-configurations, jndi-name and resource-managers  for defaults.  Used in: jboss--&gt;<BR>&lt;!ELEMENT enterprise-beans (session | entity | message-driven)+&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The enterprise-beans element contains additional information about
  the beans. These informations, such as jndi names, resource managers and
  container configurations, are specific to jboss and not described in
  ejb-jar.xml.

  jboss will provide a standard behaviour if no enterprise-beans element
  is found, see container-configurations, jndi-name and resource-managers
  for defaults.

  Used in: jboss

		</DDML:Doc>
		<Model>
			<Choice Frequency = "OneOrMore">
				<Ref Element = "session"/>
				<Ref Element = "entity"/>
				<Ref Element = "message-driven"/>
			</Choice>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "entity">
		<dtdsource><![CDATA[
<BR>&lt;!--  The entity element holds information specific to jboss and not declared  in ejb-jar.xml about an entity bean, such as jndi name, container  configuration, and resource managers. (see tags for details)  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.  Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT entity (ejb-name , jndi-name? , local-jndi-name? , read-only? , home-invoker? , bean-invoker? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , clustered? , cluster-config? , method-attributes? , depends*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The entity element holds information specific to jboss and not declared
  in ejb-jar.xml about an entity bean, such as jndi name, container
  configuration, and resource managers. (see tags for details)
  The bean should already be declared in ejb-jar.xml, with the same
  ejb-name.

  Used in: enterprise-beans

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-name"/>
				<Ref Element = "jndi-name" Frequency = "Optional"/>
				<Ref Element = "local-jndi-name" Frequency = "Optional"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "home-invoker" Frequency = "Optional"/>
				<Ref Element = "bean-invoker" Frequency = "Optional"/>
				<Ref Element = "configuration-name" Frequency = "Optional"/>
				<Ref Element = "security-proxy" Frequency = "Optional"/>
				<Ref Element = "ejb-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-env-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "clustered" Frequency = "Optional"/>
				<Ref Element = "cluster-config" Frequency = "Optional"/>
				<Ref Element = "method-attributes" Frequency = "Optional"/>
				<Ref Element = "depends" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "session">
		<dtdsource><![CDATA[
<BR>&lt;!--  The session element holds information specific to jboss and not declared  in ejb-jar.xml about a session bean, such as jndi name, container  configuration, and resource managers. (see tags for details)  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.  Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT session (ejb-name , jndi-name? , local-jndi-name? , home-invoker? , bean-invoker? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , clustered? , cluster-config? , method-attributes? , depends*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The session element holds information specific to jboss and not declared
  in ejb-jar.xml about a session bean, such as jndi name, container
  configuration, and resource managers. (see tags for details)
  The bean should already be declared in ejb-jar.xml, with the same
  ejb-name.

  Used in: enterprise-beans

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-name"/>
				<Ref Element = "jndi-name" Frequency = "Optional"/>
				<Ref Element = "local-jndi-name" Frequency = "Optional"/>
				<Ref Element = "home-invoker" Frequency = "Optional"/>
				<Ref Element = "bean-invoker" Frequency = "Optional"/>
				<Ref Element = "configuration-name" Frequency = "Optional"/>
				<Ref Element = "security-proxy" Frequency = "Optional"/>
				<Ref Element = "ejb-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-env-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "clustered" Frequency = "Optional"/>
				<Ref Element = "cluster-config" Frequency = "Optional"/>
				<Ref Element = "method-attributes" Frequency = "Optional"/>
				<Ref Element = "depends" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "message-driven">
		<dtdsource><![CDATA[
<BR>&lt;!--  The message-driven element holds information specific to jboss and not declared  in ejb-jar.xml about a message-driven bean, such as container  configuration and resources.  The bean should already be declared in ejb-jar.xml, with the same  ejb-name.    Used in: enterprise-beans--&gt;<BR>&lt;!ELEMENT message-driven (ejb-name , destination-jndi-name , mdb-user? , mdb-passwd? , mdb-client-id? , mdb-subscription-id? , configuration-name? , security-proxy? , ejb-ref* , resource-ref* , resource-env-ref* , depends*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The message-driven element holds information specific to jboss and not declared
  in ejb-jar.xml about a message-driven bean, such as container
  configuration and resources.
  The bean should already be declared in ejb-jar.xml, with the same
  ejb-name.
  
  Used in: enterprise-beans

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-name"/>
				<Ref Element = "destination-jndi-name"/>
				<Ref Element = "mdb-user" Frequency = "Optional"/>
				<Ref Element = "mdb-passwd" Frequency = "Optional"/>
				<Ref Element = "mdb-client-id" Frequency = "Optional"/>
				<Ref Element = "mdb-subscription-id" Frequency = "Optional"/>
				<Ref Element = "configuration-name" Frequency = "Optional"/>
				<Ref Element = "security-proxy" Frequency = "Optional"/>
				<Ref Element = "ejb-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "resource-env-ref" Frequency = "ZeroOrMore"/>
				<Ref Element = "depends" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The ejb-name element gives the name of the bean, it must correspond to  an ejb-name element in ejb-jar.xml    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT ejb-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The ejb-name element gives the name of the bean, it must correspond to
  an ejb-name element in ejb-jar.xml
  
  Used in: entity, session, and message-driven

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!--   The jndi-name element gives the actual jndi name under which   the bean will be deployed when used in the entity, session and   message-driven elements. If it is not provided jboss will assume   &quot;jndi-name&quot; = &quot;ejb-name&quot;     When used in the ejb-ref, resource-ref, resource-env-ref elements   this specifies the jndi name to which the reference should link.     Used in: entity, session and message-driven     ejb-ref, resource-ref, resource-env-ref --&gt;<BR>&lt;!ELEMENT jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The jndi-name element gives the actual jndi name under which 
  the bean will be deployed when used in the entity, session and 
  message-driven elements. If it is not provided jboss will assume 
  "jndi-name" = "ejb-name" 
  
  When used in the ejb-ref, resource-ref, resource-env-ref elements 
  this specifies the jndi name to which the reference should link. 
  
  Used in: entity, session and message-driven 
    ejb-ref, resource-ref, resource-env-ref 

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "local-jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!--   The JNDI name under with the local home interface should be bound    Used in: entity and session --&gt;<BR>&lt;!ELEMENT local-jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The JNDI name under with the local home interface should be bound
  
  Used in: entity and session 

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "read-only">
		<dtdsource><![CDATA[
<BR>&lt;!--  The read-only element flags an entity bean as read only.  The bean will never be ejbStored. Defaults to false.  It must be one of the following :    <BR>&lt;read-only&gt;true<BR>&lt;/read-only&gt;    <BR>&lt;read-only&gt;false<BR>&lt;/read-only&gt;  Used in: entity, method-attributes--&gt;<BR>&lt;!ELEMENT read-only (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The read-only element flags an entity bean as read only.
  The bean will never be ejbStored. Defaults to false.
  It must be one of the following :
    &amp;lt;read-only&amp;gt;true&amp;lt;/read-only&amp;gt;
    &amp;lt;read-only&amp;gt;false&amp;lt;/read-only&amp;gt;

  Used in: entity, method-attributes

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "home-invoker">
		<dtdsource><![CDATA[
<BR>&lt;!--  The home-invoker and bean-invoker elements define the Invoker MBean to use  for Home Proxies and Bean Proxies. When specified at the container configuration  level this specifies the default invoker for all beans using the container  configuration.  Used in: container-configuration, entity and session--&gt;<BR>&lt;!ELEMENT home-invoker (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The home-invoker and bean-invoker elements define the Invoker MBean to use
  for Home Proxies and Bean Proxies. When specified at the container configuration
  level this specifies the default invoker for all beans using the container
  configuration.

  Used in: container-configuration, entity and session

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "bean-invoker">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT bean-invoker (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "configuration-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The configuration-name element gives the name of the container  configuration for this bean. It must match one of the container-name  tags in the container-configurations section, or one of the standard  configurations. If no element is provided, jboss will automatically use the  right standard configuration, see container-configurations.    Note: unlike earlier releases, this element may not be specified as an   empty element to achieve the same effect as not specifying the element.  Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT configuration-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The configuration-name element gives the name of the container
  configuration for this bean. It must match one of the container-name
  tags in the container-configurations section, or one of the standard
  configurations. If no element is provided, jboss will automatically use the
  right standard configuration, see container-configurations.
  
  Note: unlike earlier releases, this element may not be specified as an
   empty element to achieve the same effect as not specifying the element.

  Used in: entity, session, and message-driven

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "depends">
		<dtdsource><![CDATA[
<BR>&lt;!-- The depends element gives a JMX ObjectName of a service on which thecontainer or ejb depends.--&gt;<BR>&lt;!ELEMENT depends (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The depends element gives a JMX ObjectName of a service on which the
container or ejb depends.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "destination-jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT destination-jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mdb-user">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT mdb-user (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mdb-passwd">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT mdb-passwd (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mdb-client-id">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT mdb-client-id (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mdb-subscription-id">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT mdb-subscription-id (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "security-proxy">
		<dtdsource><![CDATA[
<BR>&lt;!-- The security-proxy gives the class name of the security proxy implementation.  This may be an instance of org.jboss.security.SecurityProxy, or an  just an object that implements methods in the home or remote interface  of an EJB without implementating any common interface.      Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT security-proxy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> The security-proxy gives the class name of the security proxy implementation.
  This may be an instance of org.jboss.security.SecurityProxy, or an
  just an object that implements methods in the home or remote interface
  of an EJB without implementating any common interface.

      Used in: entity, session, and message-driven

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--  The ejb-ref element is used to give the jndi-name of an external  ejb reference. In the case of an external ejb reference, you don't  provide a ejb-link element in ejb-jar.xml, but you provide a jndi-name  in jboss.xml    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT ejb-ref (ejb-ref-name , jndi-name)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The ejb-ref element is used to give the jndi-name of an external
  ejb reference. In the case of an external ejb reference, you don't
  provide a ejb-link element in ejb-jar.xml, but you provide a jndi-name
  in jboss.xml
  
  Used in: entity, session, and message-driven

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-ref-name"/>
				<Ref Element = "jndi-name"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The ejb-ref-name element is the name of the ejb reference as given in  ejb-jar.xml.    Used in: ejb-ref--&gt;<BR>&lt;!ELEMENT ejb-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The ejb-ref-name element is the name of the ejb reference as given in
  ejb-jar.xml.
  
  Used in: ejb-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-env-ref element gives a mapping between the &quot;code name&quot;  of a env resource (res-ref-name, provided by the Bean Developer) and  its deployed JNDI name.    Used in: session, entity, message-driven--&gt;<BR>&lt;!ELEMENT resource-env-ref (resource-env-ref-name , jndi-name)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-env-ref element gives a mapping between the "code name"
  of a env resource (res-ref-name, provided by the Bean Developer) and
  its deployed JNDI name.
  
  Used in: session, entity, message-driven

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "resource-env-ref-name"/>
				<Ref Element = "jndi-name"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-env-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-env-ref-name element gives the &quot;code name&quot; of a resource. It is  provided by the Bean Developer.    Used in: resource-env-ref--&gt;<BR>&lt;!ELEMENT resource-env-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-env-ref-name element gives the "code name" of a resource. It is
  provided by the Bean Developer.
  
  Used in: resource-env-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "clustered">
		<dtdsource><![CDATA[
<BR>&lt;!--  The clustered element indicates if this bean will run in a cluster of JBoss instances.  It is provided by the deployer. If not, jboss will assume clustered = False  Possible values: &quot;True&quot;, &quot;False&quot; (default)    Used in: entity and session--&gt;<BR>&lt;!ELEMENT clustered (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The clustered element indicates if this bean will run in a cluster of JBoss instances.
  It is provided by the deployer. If not, jboss will assume clustered = False
  Possible values: "True", "False" (default)
  
  Used in: entity and session

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "cluster-config">
		<dtdsource><![CDATA[
<BR>&lt;!--  The cluster-config element allows to specify cluster specific settings.  WARNING: session-state-manager-jndi-name is only for SFSB.    Used in: session, entity--&gt;<BR>&lt;!ELEMENT cluster-config (partition-name? , home-load-balance-policy? , bean-load-balance-policy? , session-state-manager-jndi-name?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The cluster-config element allows to specify cluster specific settings.
  WARNING: session-state-manager-jndi-name is only for SFSB.
  
  Used in: session, entity

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "partition-name" Frequency = "Optional"/>
				<Ref Element = "home-load-balance-policy" Frequency = "Optional"/>
				<Ref Element = "bean-load-balance-policy" Frequency = "Optional"/>
				<Ref Element = "session-state-manager-jndi-name" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "partition-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The partition-name element indicates the name of the HAPartition to be used  by the container to exchange clustering information. This is a name and *not*  a JNDI name. Given name will be prefixed by &quot;/HASessionState/&quot; by the container to get  the actual JNDI name of the HAPartition. If not, jboss will assume partition-name = &quot;DefaultPartition&quot;.    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT partition-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The partition-name element indicates the name of the HAPartition to be used
  by the container to exchange clustering information. This is a name and *not*
  a JNDI name. Given name will be prefixed by "/HASessionState/" by the container to get
  the actual JNDI name of the HAPartition. If not, jboss will assume partition-name = "DefaultPartition".
  
  Used in: entity and session (in clustered-config element)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "home-load-balance-policy">
		<dtdsource><![CDATA[
<BR>&lt;!--  The home-load-balance-policy element indicates the java class name to be used  to load balance calls in the home proxy.  If not, jboss will assume home-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;.    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT home-load-balance-policy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The home-load-balance-policy element indicates the java class name to be used
  to load balance calls in the home proxy.
  If not, jboss will assume home-load-balance-policy = "org.jboss.ha.framework.interfaces.RoundRobin".
  
  Used in: entity and session (in clustered-config element)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "bean-load-balance-policy">
		<dtdsource><![CDATA[
<BR>&lt;!--  The bean-load-balance-policy element indicates the java class name to be used  to load balance calls in the bean proxy.  If not, jboss will assume :    - for EB and SFSB : bean-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;    - for SLSB        : bean-load-balance-policy = &quot;org.jboss.ha.framework.interfaces.RoundRobin&quot;    Used in: entity and session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT bean-load-balance-policy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The bean-load-balance-policy element indicates the java class name to be used
  to load balance calls in the bean proxy.
  If not, jboss will assume :
    - for EB and SFSB : bean-load-balance-policy = "org.jboss.ha.framework.interfaces.RoundRobin"
    - for SLSB        : bean-load-balance-policy = "org.jboss.ha.framework.interfaces.RoundRobin"
  
  Used in: entity and session (in clustered-config element)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "session-state-manager-jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The session-state-manager-jndi-name element indicates the name of the HASessionState to be used  by the container as a backend for state session management in the cluster.  This *is* a JNDI name (not like the partition-name element).  If not, jboss will assume partition-name = &quot;/HASessionState/Default&quot;.    Used in: session (in clustered-config element)--&gt;<BR>&lt;!ELEMENT session-state-manager-jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The session-state-manager-jndi-name element indicates the name of the HASessionState to be used
  by the container as a backend for state session management in the cluster.
  This *is* a JNDI name (not like the partition-name element).
  If not, jboss will assume partition-name = "/HASessionState/Default".
  
  Used in: session (in clustered-config element)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "method-attributes">
		<dtdsource><![CDATA[
<BR>&lt;!-- The method-attributes element allows for the specification of non-standardattributes for the named method(s).Used in: session and entity--&gt;<BR>&lt;!ELEMENT method-attributes (method-name , read-only?)&gt;]]>

		</dtdsource>
		<DDML:Doc> The method-attributes element allows for the specification of non-standard
attributes for the named method(s).

Used in: session and entity

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "method-name"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "method-name">
		<dtdsource><![CDATA[
<BR>&lt;!-- Specifies a method name or method name patternUsed in: session and entity--&gt;<BR>&lt;!ELEMENT method-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc> Specifies a method name or method name pattern

Used in: session and entity

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-ref">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-ref element gives a mapping between the &quot;code name&quot;  of a resource (res-ref-name, provided by the Bean Developer) and  its &quot;xml name&quot; (resource-name, provided by the Application Assembler).  If no resource-ref is provided, jboss will assume that  &quot;xml-name&quot; = &quot;code name&quot;    See resource-managers.    Used in: entity, session, and message-driven--&gt;<BR>&lt;!ELEMENT resource-ref (res-ref-name , (resource-name | jndi-name | res-url))&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-ref element gives a mapping between the "code name"
  of a resource (res-ref-name, provided by the Bean Developer) and
  its "xml name" (resource-name, provided by the Application Assembler).
  If no resource-ref is provided, jboss will assume that
  "xml-name" = "code name"
  
  See resource-managers.
  
  Used in: entity, session, and message-driven

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "res-ref-name"/>
				<Choice>
					<Ref Element = "resource-name"/>
					<Ref Element = "jndi-name"/>
					<Ref Element = "res-url"/>
				</Choice>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-ref-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The res-ref-name element gives the &quot;code name&quot; of a resource. It is  provided by the Bean Developer. See resource-managers for the actual  configuration of the resource.    Used in: resource-ref--&gt;<BR>&lt;!ELEMENT res-ref-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The res-ref-name element gives the "code name" of a resource. It is
  provided by the Bean Developer. See resource-managers for the actual
  configuration of the resource.
  
  Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-name element gives the &quot;xml name&quot; of the resource. It is  provided by the Application Assembler. See resource-managers for the  actual configuration of the resource.    Used in: resource-ref--&gt;<BR>&lt;!ELEMENT resource-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-name element gives the "xml name" of the resource. It is
  provided by the Application Assembler. See resource-managers for the
  actual configuration of the resource.
  
  Used in: resource-ref

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-managers">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-managers element is used to declare resource managers.    A resource has 3 names:  - the &quot;code name&quot; is the name used in the code of the bean, supplied by    the Bean Developer in the resource-ref section of the ejb-jar.xml file    - the &quot;xml name&quot; is an intermediary name used by the Application Assembler    to identify resources in the XML file.    - the &quot;runtime jndi name&quot; is the actual jndi-name or url of the deployed    resource, it is supplied by the Deployer.    The mapping between the &quot;code name&quot; and the &quot;xml name&quot; is given  in the resource-ref section for the bean. If not, jboss will assume that  &quot;xml name&quot; = &quot;code name&quot;.    The mapping between the &quot;xml name&quot; and the &quot;runtime jndi name&quot; is given in  a resource-manager section. If not, and if the datasource is of type  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the jndi  tree.    Used in: jboss--&gt;<BR>&lt;!ELEMENT resource-managers (resource-manager*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-managers element is used to declare resource managers.
  
  A resource has 3 names:
  - the "code name" is the name used in the code of the bean, supplied by
    the Bean Developer in the resource-ref section of the ejb-jar.xml file
  
  - the "xml name" is an intermediary name used by the Application Assembler
    to identify resources in the XML file.
  
  - the "runtime jndi name" is the actual jndi-name or url of the deployed
    resource, it is supplied by the Deployer.
  
  The mapping between the "code name" and the "xml name" is given
  in the resource-ref section for the bean. If not, jboss will assume that
  "xml name" = "code name".
  
  The mapping between the "xml name" and the "runtime jndi name" is given in
  a resource-manager section. If not, and if the datasource is of type
  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the jndi
  tree.
  
  Used in: jboss

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "resource-manager" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resource-manager">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resource-manager element is used to provide a mapping between the  &quot;xml name&quot; of a resource (res-name) and its &quot;runtime jndi name&quot;  (res-jndi-name or res-url according to the type of the resource).  If it is not provided, and if the type of the resource is  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the  jndi tree.    See resource-managers.    Used in: resource-managers--&gt;<BR>&lt;!ELEMENT resource-manager (res-name , (res-jndi-name | res-url))&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resource-manager element is used to provide a mapping between the
  "xml name" of a resource (res-name) and its "runtime jndi name"
  (res-jndi-name or res-url according to the type of the resource).
  If it is not provided, and if the type of the resource is
  javax.sql.DataSource, jboss will look for a javax.sql.DataSource in the
  jndi tree.
  
  See resource-managers.
  
  Used in: resource-managers

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "res-name"/>
				<Choice>
					<Ref Element = "res-jndi-name"/>
					<Ref Element = "res-url"/>
				</Choice>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The res-name element gives the &quot;xml name&quot; of a resource, it is provided  by the Application Assembler. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The res-name element gives the "xml name" of a resource, it is provided
  by the Application Assembler. See resource-managers.
  
  Used in: resource-manager

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-jndi-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The res-jndi-name element is the &quot;deployed jndi name&quot; of a resource, it  is provided by the Deployer. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-jndi-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The res-jndi-name element is the "deployed jndi name" of a resource, it
  is provided by the Deployer. See resource-managers.
  
  Used in: resource-manager

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "res-url">
		<dtdsource><![CDATA[
<BR>&lt;!--  The res-url element is the &quot;runtime jndi name&quot; as a url of the resource.  It is provided by the Deployer. See resource-managers.    Used in: resource-manager--&gt;<BR>&lt;!ELEMENT res-url (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The res-url element is the "runtime jndi name" as a url of the resource.
  It is provided by the Deployer. See resource-managers.
  
  Used in: resource-manager

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-configurations">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-configurations element declares the different possible  container configurations that the beans can use. standardjboss.xml  provides 15 standard configurations with the following container-names:    - Standard CMP 2.x EntityBean    - Standard CMP EntityBean    - Clustered CMP 2.x EntityBean    - Clustered CMP EntityBean    - IIOP CMP 2.x EntityBean    - IIOP CMP EntityBean    - jdk 1.2.2 CMP EntityBean    - Standard Stateless SessionBean    - Clustered Stateless SessionBean    - IIOP Stateless SessionBean    - jdk 1.2.2 Stateless SessionBean    - Standard Stateful SessionBean    - Clustered Stateful SessionBean    - IIOP Stateful SessionBean    - jdk 1.2.2 Stateful SessionBean    - Standard BMP EntityBean    - Clustered BMP EntityBean    - IIOP BMP EntityBean    - jdk 1.2.2 BMP EntityBean    - Standard message Driven Bean    The standard configurations will automatically be used if no custom  configuration is specified.  The jdk 1.2.2 configurations are defined for backwards compatability.    The application assembler can define advanced custom configurations here.    Used in: jboss--&gt;<BR>&lt;!ELEMENT container-configurations (container-configuration*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-configurations element declares the different possible
  container configurations that the beans can use. standardjboss.xml
  provides 15 standard configurations with the following container-names:
    - Standard CMP 2.x EntityBean
    - Standard CMP EntityBean
    - Clustered CMP 2.x EntityBean
    - Clustered CMP EntityBean
    - IIOP CMP 2.x EntityBean
    - IIOP CMP EntityBean
    - jdk 1.2.2 CMP EntityBean
    - Standard Stateless SessionBean
    - Clustered Stateless SessionBean
    - IIOP Stateless SessionBean
    - jdk 1.2.2 Stateless SessionBean
    - Standard Stateful SessionBean
    - Clustered Stateful SessionBean
    - IIOP Stateful SessionBean
    - jdk 1.2.2 Stateful SessionBean
    - Standard BMP EntityBean
    - Clustered BMP EntityBean
    - IIOP BMP EntityBean
    - jdk 1.2.2 BMP EntityBean
    - Standard message Driven Bean
  
  The standard configurations will automatically be used if no custom
  configuration is specified.

  The jdk 1.2.2 configurations are defined for backwards compatability.
  
  The application assembler can define advanced custom configurations here.
  
  Used in: jboss

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "container-configuration" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-configuration">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-configuration element describes a configuration for the  container.  The different plugins to use are declared here, as well as their  configurations. The configuration-class attribute is no longer used.    Used in: container-configurations--&gt;<BR>&lt;!ELEMENT container-configuration (container-name , call-logging? , container-invoker? , home-invoker? , bean-invoker? , container-interceptors? , client-interceptors? , instance-pool? , instance-cache? , persistence-manager? , transaction-manager? , web-class-loader? , locking-policy? , container-invoker-conf? , container-cache-conf? , container-pool-conf? , commit-option? , optiond-refresh-rate? , security-domain? , cluster-config?)&gt;<BR>&lt;!-- The extends attribute gives the container-name value of the configuration the container-configurationis extending. This allows one to specify an extension configuration without having to reiterate all ofthe other duplicate configuration info.        <BR>&lt;container-configuration extends=&quot;Standard Stateful SessionBean&quot;&gt;            <BR>&lt;container-name&gt;Secure Stateless SessionBean<BR>&lt;/container-name&gt;            <BR>&lt;security-domain&gt;java:/jaas/other<BR>&lt;/security-domain&gt;        <BR>&lt;/container-configuration&gt;--&gt;<BR>&lt;!ATTLIST container-configuration extends CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-configuration element describes a configuration for the
  container.
  The different plugins to use are declared here, as well as their
  configurations. The configuration-class attribute is no longer used.
  
  Used in: container-configurations

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "container-name"/>
				<Ref Element = "call-logging" Frequency = "Optional"/>
				<Ref Element = "container-invoker" Frequency = "Optional"/>
				<Ref Element = "home-invoker" Frequency = "Optional"/>
				<Ref Element = "bean-invoker" Frequency = "Optional"/>
				<Ref Element = "container-interceptors" Frequency = "Optional"/>
				<Ref Element = "client-interceptors" Frequency = "Optional"/>
				<Ref Element = "instance-pool" Frequency = "Optional"/>
				<Ref Element = "instance-cache" Frequency = "Optional"/>
				<Ref Element = "persistence-manager" Frequency = "Optional"/>
				<Ref Element = "transaction-manager" Frequency = "Optional"/>
				<Ref Element = "web-class-loader" Frequency = "Optional"/>
				<Ref Element = "locking-policy" Frequency = "Optional"/>
				<Ref Element = "container-invoker-conf" Frequency = "Optional"/>
				<Ref Element = "container-cache-conf" Frequency = "Optional"/>
				<Ref Element = "container-pool-conf" Frequency = "Optional"/>
				<Ref Element = "commit-option" Frequency = "Optional"/>
				<Ref Element = "optiond-refresh-rate" Frequency = "Optional"/>
				<Ref Element = "security-domain" Frequency = "Optional"/>
				<Ref Element = "cluster-config" Frequency = "Optional"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "extends">
				<DDML:Doc> The extends attribute gives the container-name value of the configuration the container-configuration
is extending. This allows one to specify an extension configuration without having to reiterate all of
the other duplicate configuration info.

        &amp;lt;container-configuration extends="Standard Stateful SessionBean"&amp;gt;
            &amp;lt;container-name&amp;gt;Secure Stateless SessionBean&amp;lt;/container-name&amp;gt;
            &amp;lt;security-domain&amp;gt;java:/jaas/other&amp;lt;/security-domain&amp;gt;
        &amp;lt;/container-configuration&amp;gt;


				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "extends">
			<DDML:Doc> The extends attribute gives the container-name value of the configuration the container-configuration
is extending. This allows one to specify an extension configuration without having to reiterate all of
the other duplicate configuration info.

        &amp;lt;container-configuration extends="Standard Stateful SessionBean"&amp;gt;
            &amp;lt;container-name&amp;gt;Secure Stateless SessionBean&amp;lt;/container-name&amp;gt;
            &amp;lt;security-domain&amp;gt;java:/jaas/other&amp;lt;/security-domain&amp;gt;
        &amp;lt;/container-configuration&amp;gt;


			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "container-name">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-name element gives the name of the configuration being  defined. Beans may refer to this name in their configuration-name tag.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-name element gives the name of the configuration being
  defined. Beans may refer to this name in their configuration-name tag.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "call-logging">
		<dtdsource><![CDATA[
<BR>&lt;!--  The call-logging element tells if the container must log every method  invocation for this bean or not. Its value must be trus or false.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT call-logging (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The call-logging element tells if the container must log every method
  invocation for this bean or not. Its value must be trus or false.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-invoker">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-invoker element gives the class name of the container  invoker jboss must use for in this configuration. This class must  implement the org.jboss.ejb.ContainerInvoker interface. The default is  org.jboss.proxy.ejb.ProxyFactory for entity and session beans and   org.jboss.ejb.plugins.jms.JMSContainerInvoker for message driven beans.  Containers supporting clustering use org.jboss.proxy.ejb.ProxyFactoryHA.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-invoker (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-invoker element gives the class name of the container
  invoker jboss must use for in this configuration. This class must
  implement the org.jboss.ejb.ContainerInvoker interface. The default is
  org.jboss.proxy.ejb.ProxyFactory for entity and session beans and 
  org.jboss.ejb.plugins.jms.JMSContainerInvoker for message driven beans.
  Containers supporting clustering use org.jboss.proxy.ejb.ProxyFactoryHA.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-interceptors">
		<dtdsource><![CDATA[
<BR>&lt;!--   The container-interceptors element gives the chain of Interceptors  (instances of org.jboss.ejb.Interceptor) that are associated with the container.  The declared order of the interceptor elements corresponds to the order of the  interceptor chain.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-interceptors (interceptor+)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The container-interceptors element gives the chain of Interceptors
  (instances of org.jboss.ejb.Interceptor) that are associated with the container.
  The declared order of the interceptor elements corresponds to the order of the
  interceptor chain.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "interceptor" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "client-interceptors">
		<dtdsource><![CDATA[
<BR>&lt;!-- The client-interceptors defines the home and bean client side interceptor chain  Used in: container-configuration--&gt;<BR>&lt;!ELEMENT client-interceptors (home , bean)&gt;]]>

		</dtdsource>
		<DDML:Doc> 
The client-interceptors defines the home and bean client side interceptor chain

  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "home"/>
				<Ref Element = "bean"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "home">
		<dtdsource><![CDATA[
<BR>&lt;!--The home element gives the chain of interceptors(instances of org.jboss.proxy.Interceptor) that are associated with the homeproxy and operate in the client VM. The declared order of the interceptorelements corresponds to the order of the interceptor chain.  Used in: client-interceptors--&gt;<BR>&lt;!ELEMENT home (interceptor+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The home element gives the chain of interceptors
(instances of org.jboss.proxy.Interceptor) that are associated with the home
proxy and operate in the client VM. The declared order of the interceptor
elements corresponds to the order of the interceptor chain.

  Used in: client-interceptors

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "interceptor" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "bean">
		<dtdsource><![CDATA[
<BR>&lt;!--The bean element gives the chain of interceptors(instances of org.jboss.proxy.Interceptor) that are associated with the remoteproxy and operate in the client VM. The declared order of the interceptorelements corresponds to the order of the interceptor chain.  Used in: client-interceptors--&gt;<BR>&lt;!ELEMENT bean (interceptor+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The bean element gives the chain of interceptors
(instances of org.jboss.proxy.Interceptor) that are associated with the remote
proxy and operate in the client VM. The declared order of the interceptor
elements corresponds to the order of the interceptor chain.

  Used in: client-interceptors

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "interceptor" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "interceptor">
		<dtdsource><![CDATA[
<BR>&lt;!--   The interceptor element specifies an instance of org.jboss.ejb.Interceptor  that is to be added to the container interceptor stack.    Used in: container-interceptors--&gt;<BR>&lt;!ELEMENT interceptor (#PCDATA)&gt;<BR>&lt;!--   The transaction attribute is used to indicate what type of container its  interceptor applies to. It is an enumerated value that can take on one of: Bean,  Container or Both. A value of Bean indicates that the interceptor should only be  added to a container for bean-managed transaction.  A value of Container indicates that the interceptor should only be added to a  container for container-managed transactions.  A value of Both indicates that the interceptor should be added to all  containers. This is the default value if the transaction attribute is not  explictlygiven.--&gt;<BR>&lt;!ATTLIST interceptor transaction     (Bean | Container | Both )  &quot;Both&quot;&gt;<BR>&lt;!--   The metricsEnabled attributes is used to indicate if the interceptor  should only be included when the org.jboss.ejb.ContainerFactory metricsEnabled  flag is set to true. The allowed values are true and false with false being the  default if metricsEnabled is not explicitly given.--&gt;<BR>&lt;!ATTLIST interceptor metricsEnabled  (true | false )  &quot;false&quot;&gt;]]>

		</dtdsource>
		<DDML:Doc> 
  The interceptor element specifies an instance of org.jboss.ejb.Interceptor
  that is to be added to the container interceptor stack.
  
  Used in: container-interceptors

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "transaction" Type = "Enumeration" AttValue = "Both">
				<DDML:Doc> 
  The transaction attribute is used to indicate what type of container its
  interceptor applies to. It is an enumerated value that can take on one of: Bean,
  Container or Both. A value of Bean indicates that the interceptor should only be
  added to a container for bean-managed transaction.
  A value of Container indicates that the interceptor should only be added to a
  container for container-managed transactions.
  A value of Both indicates that the interceptor should be added to all
  containers. This is the default value if the transaction attribute is not
  explictlygiven.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "Bean"/>
					<EnumerationValue Value = "Container"/>
					<EnumerationValue Value = "Both"/>
				</Enumeration>
			</AttDef>
			<AttDef Name = "metricsEnabled" Type = "Enumeration" AttValue = "false">
				<DDML:Doc> 
  The metricsEnabled attributes is used to indicate if the interceptor
  should only be included when the org.jboss.ejb.ContainerFactory metricsEnabled
  flag is set to true. The allowed values are true and false with false being the
  default if metricsEnabled is not explicitly given.

				</DDML:Doc>
				<Enumeration>
					<EnumerationValue Value = "true"/>
					<EnumerationValue Value = "false"/>
				</Enumeration>
			</AttDef>
		</AttGroup>
		<AttDef Name = "transaction" Type = "Enumeration" AttValue = "Both">
			<DDML:Doc> 
  The transaction attribute is used to indicate what type of container its
  interceptor applies to. It is an enumerated value that can take on one of: Bean,
  Container or Both. A value of Bean indicates that the interceptor should only be
  added to a container for bean-managed transaction.
  A value of Container indicates that the interceptor should only be added to a
  container for container-managed transactions.
  A value of Both indicates that the interceptor should be added to all
  containers. This is the default value if the transaction attribute is not
  explictlygiven.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "Bean"/>
				<EnumerationValue Value = "Container"/>
				<EnumerationValue Value = "Both"/>
			</Enumeration>
		</AttDef>
		<AttDef Name = "metricsEnabled" Type = "Enumeration" AttValue = "false">
			<DDML:Doc> 
  The metricsEnabled attributes is used to indicate if the interceptor
  should only be included when the org.jboss.ejb.ContainerFactory metricsEnabled
  flag is set to true. The allowed values are true and false with false being the
  default if metricsEnabled is not explicitly given.

			</DDML:Doc>
			<Enumeration>
				<EnumerationValue Value = "true"/>
				<EnumerationValue Value = "false"/>
			</Enumeration>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "instance-pool">
		<dtdsource><![CDATA[
<BR>&lt;!--  The instance-pool element gives the class name of the instance pool  jboss must use for in this configuration. This class must implement  the org.jboss.ejb.InstancePool interface. The defaults are:  - org.jboss.ejb.plugins.EntityInstancePool for entity beans  - org.jboss.ejb.plugins.StatelessSessionInstancePool for stateless  session beans.  - no pool is used for stateful session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT instance-pool (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The instance-pool element gives the class name of the instance pool
  jboss must use for in this configuration. This class must implement
  the org.jboss.ejb.InstancePool interface. The defaults are:
  - org.jboss.ejb.plugins.EntityInstancePool for entity beans
  - org.jboss.ejb.plugins.StatelessSessionInstancePool for stateless
  session beans.
  - no pool is used for stateful session beans
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "instance-cache">
		<dtdsource><![CDATA[
<BR>&lt;!--  The instance-cache element gives the class name of the instance cache  jboss must use for in this configuration. This class must implement  the org.jboss.ejb.InstanceCache interface. The defaults are:  - org.jboss.ejb.plugins.NoPassivationEntityInstanceCache for entity beans  - org.jboss.ejb.plugins.NoPassivationStatefulSessionInstanceCache for  stateful session beans.  - no cache is used for stateless session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT instance-cache (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The instance-cache element gives the class name of the instance cache
  jboss must use for in this configuration. This class must implement
  the org.jboss.ejb.InstanceCache interface. The defaults are:
  - org.jboss.ejb.plugins.NoPassivationEntityInstanceCache for entity beans
  - org.jboss.ejb.plugins.NoPassivationStatefulSessionInstanceCache for
  stateful session beans.
  - no cache is used for stateless session beans
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "persistence-manager">
		<dtdsource><![CDATA[
<BR>&lt;!--  The persistence-manager element gives the class name of the persistence  manager / persistence store jboss must use for in this configuration.  This class must implement:  - org.jboss.ejb.EntityPersistenceStore for CMP Entity Beans (default is  org.jboss.ejb.plugins.jaws.JAWSPersistenceManager)  - org.jboss.ejb.EntityPersistenceManager for BMP entity beans (default  is org.jboss.ejb.plugins.BMPPersistenceManager)  - org.jboss.ejb.StatefulSessionPersistenceManager for stateless session  beans.  - no persistence-manager is used for stateless session beans    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT persistence-manager (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The persistence-manager element gives the class name of the persistence
  manager / persistence store jboss must use for in this configuration.
  This class must implement:
  - org.jboss.ejb.EntityPersistenceStore for CMP Entity Beans (default is
  org.jboss.ejb.plugins.jaws.JAWSPersistenceManager)
  - org.jboss.ejb.EntityPersistenceManager for BMP entity beans (default
  is org.jboss.ejb.plugins.BMPPersistenceManager)
  - org.jboss.ejb.StatefulSessionPersistenceManager for stateless session
  beans.
  - no persistence-manager is used for stateless session beans
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "locking-policy">
		<dtdsource><![CDATA[
<BR>&lt;!--  The locking-policy element gives the class name of the EJB lock  implementation JBoss must use for in this configuration. This class must  implement  the org.jboss.ejb.BeanLock interface. The default is  org.jboss.ejb.plugins.lock.QueuedPessimisticEJBLock.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT locking-policy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The locking-policy element gives the class name of the EJB lock
  implementation JBoss must use for in this configuration. This class must
  implement  the org.jboss.ejb.BeanLock interface. The default is
  org.jboss.ejb.plugins.lock.QueuedPessimisticEJBLock.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "transaction-manager">
		<dtdsource><![CDATA[
<BR>&lt;!--  The transaction-manager element gives the class name of the transaction  manager jboss must use for in this configuration. This class must implement  the javax.transaction.TransactionManager interface. The default is  org.jboss.tm.TxManager.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT transaction-manager (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The transaction-manager element gives the class name of the transaction
  manager jboss must use for in this configuration. This class must implement
  the javax.transaction.TransactionManager interface. The default is
  org.jboss.tm.TxManager.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "web-class-loader">
		<dtdsource><![CDATA[
<BR>&lt;!--  The web-class-loader element gives the class name of the web classloader  jboss must use for in this configuration. This class must be a subclass  of org.jboss.web.WebClassLoader. The default is org.jboss.web.WebClassLoader.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT web-class-loader (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The web-class-loader element gives the class name of the web classloader
  jboss must use for in this configuration. This class must be a subclass
  of org.jboss.web.WebClassLoader. The default is org.jboss.web.WebClassLoader.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-invoker-conf">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-invoker-conf element holds configuration data for the  container invoker.  jboss does not read directly the subtree for this element: instead,  it is passed to the container invoker instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    The Optimized tag described here only relates to the default container  invokers, ProxyFactory, ProxyFactoryHA and JMSContainerInvoker.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-invoker-conf (JMSProviderAdapterJNDI? , ServerSessionPoolFactoryJNDI? , MaximumSize? , MaxMessages? , MDBConfig?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-invoker-conf element holds configuration data for the
  container invoker.
  jboss does not read directly the subtree for this element: instead,
  it is passed to the container invoker instance (if it implements
  org.jboss.metadata.XmlLoadable) for it to load its parameters.
  
  The Optimized tag described here only relates to the default container
  invokers, ProxyFactory, ProxyFactoryHA and JMSContainerInvoker.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "JMSProviderAdapterJNDI" Frequency = "Optional"/>
				<Ref Element = "ServerSessionPoolFactoryJNDI" Frequency = "Optional"/>
				<Ref Element = "MaximumSize" Frequency = "Optional"/>
				<Ref Element = "MaxMessages" Frequency = "Optional"/>
				<Ref Element = "MDBConfig" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "JMSProviderAdapterJNDI">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT JMSProviderAdapterJNDI (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: container-invoker-conf for JMSContainerInvoker

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ServerSessionPoolFactoryJNDI">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT ServerSessionPoolFactoryJNDI (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: container-invoker-conf for JMSContainerInvoker

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "MaxMessages">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT MaxMessages (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: container-invoker-conf for JMSContainerInvoker

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "MDBConfig">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: container-invoker-conf for JMSContainerInvoker--&gt;<BR>&lt;!ELEMENT MDBConfig (ReconnectIntervalSec , DLQConfig?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: container-invoker-conf for JMSContainerInvoker

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ReconnectIntervalSec"/>
				<Ref Element = "DLQConfig" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ReconnectIntervalSec">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: MDBConfig--&gt;<BR>&lt;!ELEMENT ReconnectIntervalSec (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: MDBConfig

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "DLQConfig">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: MDBConfig--&gt;<BR>&lt;!ELEMENT DLQConfig (DestinationQueue , MaxTimesRedelivered , TimeToLive)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: MDBConfig

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "DestinationQueue"/>
				<Ref Element = "MaxTimesRedelivered"/>
				<Ref Element = "TimeToLive"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "DestinationQueue">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT DestinationQueue (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: DLQConfig

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "MaxTimesRedelivered">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT MaxTimesRedelivered (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: DLQConfig

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "TimeToLive">
		<dtdsource><![CDATA[
<BR>&lt;!--  Used in: DLQConfig--&gt;<BR>&lt;!ELEMENT TimeToLive (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Used in: DLQConfig

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-cache-conf">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-cache-conf element holds dynamic configuration data  for the instance cache.  jboss does not read directly the subtree for this element: instead,  it is passed to the instance cache instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-cache-conf (cache-policy? , cache-policy-conf?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-cache-conf element holds dynamic configuration data
  for the instance cache.
  jboss does not read directly the subtree for this element: instead,
  it is passed to the instance cache instance (if it implements
  org.jboss.metadata.XmlLoadable) for it to load its parameters.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "cache-policy" Frequency = "Optional"/>
				<Ref Element = "cache-policy-conf" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "cache-policy">
		<dtdsource><![CDATA[
<BR>&lt;!--  The implementation class for the cache policy, which controls  when instances will be passivated, etc.    Used in: container-cache-conf--&gt;<BR>&lt;!ELEMENT cache-policy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The implementation class for the cache policy, which controls
  when instances will be passivated, etc.
  
  Used in: container-cache-conf

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "cache-policy-conf">
		<dtdsource><![CDATA[
<BR>&lt;!--  The configuration settings for the selected cache policy.  This  is currently only valid for the LRU cache.  When the cache is the LRU one for the stateful container, the elements  remover-period and max-bean-life specifies the period of the remover  task that removes stateful beans (that normally have been passivated)  that have age greater than the specified max-bean-life element.  Used in: container-cache-conf (when cache-policy is the LRU cache)--&gt;<BR>&lt;!ELEMENT cache-policy-conf (min-capacity , max-capacity , remover-period? , max-bean-life? , overager-period , max-bean-age , resizer-period , max-cache-miss-period , min-cache-miss-period , cache-load-factor)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The configuration settings for the selected cache policy.  This
  is currently only valid for the LRU cache.
  When the cache is the LRU one for the stateful container, the elements
  remover-period and max-bean-life specifies the period of the remover
  task that removes stateful beans (that normally have been passivated)
  that have age greater than the specified max-bean-life element.

  Used in: container-cache-conf (when cache-policy is the LRU cache)

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "min-capacity"/>
				<Ref Element = "max-capacity"/>
				<Ref Element = "remover-period" Frequency = "Optional"/>
				<Ref Element = "max-bean-life" Frequency = "Optional"/>
				<Ref Element = "overager-period"/>
				<Ref Element = "max-bean-age"/>
				<Ref Element = "resizer-period"/>
				<Ref Element = "max-cache-miss-period"/>
				<Ref Element = "min-cache-miss-period"/>
				<Ref Element = "cache-load-factor"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "min-capacity">
		<dtdsource><![CDATA[
<BR>&lt;!--  The minimum capacity of this cache--&gt;<BR>&lt;!ELEMENT min-capacity (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The minimum capacity of this cache

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "max-capacity">
		<dtdsource><![CDATA[
<BR>&lt;!--  The maximum capacity of this cache--&gt;<BR>&lt;!ELEMENT max-capacity (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The maximum capacity of this cache

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "overager-period">
		<dtdsource><![CDATA[
<BR>&lt;!--  The period of the overager's runs--&gt;<BR>&lt;!ELEMENT overager-period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The period of the overager's runs

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "remover-period">
		<dtdsource><![CDATA[
<BR>&lt;!--  The period of the remover's runs--&gt;<BR>&lt;!ELEMENT remover-period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The period of the remover's runs

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "max-bean-life">
		<dtdsource><![CDATA[
<BR>&lt;!--  The max-bean-life specifies the period of the remover  task that removes stateful beans (that normally have been passivated)  that have age greater than the specified max-bean-life element.--&gt;<BR>&lt;!ELEMENT max-bean-life (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The max-bean-life specifies the period of the remover
  task that removes stateful beans (that normally have been passivated)
  that have age greater than the specified max-bean-life element.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "resizer-period">
		<dtdsource><![CDATA[
<BR>&lt;!--  The period of the resizer's runs--&gt;<BR>&lt;!ELEMENT resizer-period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The period of the resizer's runs

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "max-bean-age">
		<dtdsource><![CDATA[
<BR>&lt;!--  The age after which a bean is automatically passivated--&gt;<BR>&lt;!ELEMENT max-bean-age (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The age after which a bean is automatically passivated

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "max-cache-miss-period">
		<dtdsource><![CDATA[
<BR>&lt;!--  Shrink cache capacity if there is a cache miss every or more  this member's value--&gt;<BR>&lt;!ELEMENT max-cache-miss-period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Shrink cache capacity if there is a cache miss every or more
  this member's value

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "min-cache-miss-period">
		<dtdsource><![CDATA[
<BR>&lt;!--  Enlarge cache capacity if there is a cache miss every or less  this member's value--&gt;<BR>&lt;!ELEMENT min-cache-miss-period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Enlarge cache capacity if there is a cache miss every or less
  this member's value

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "cache-load-factor">
		<dtdsource><![CDATA[
<BR>&lt;!--  The resizer will always try to keep the cache capacity so that  the cache is this member's value loaded of cached objects--&gt;<BR>&lt;!ELEMENT cache-load-factor (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The resizer will always try to keep the cache capacity so that
  the cache is this member's value loaded of cached objects

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "container-pool-conf">
		<dtdsource><![CDATA[
<BR>&lt;!--  The container-pool-conf element holds configuration data for the  instance pool.  jboss does not read directly the subtree for this element: instead,  it is passed to the instance pool instance (if it implements  org.jboss.metadata.XmlLoadable) for it to load its parameters.    The default instance pools, EntityInstancePool and  StatelessSessionInstancePool, both accept the following configuration.    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT container-pool-conf (MaximumSize , feeder-policy , feeder-policy-conf)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The container-pool-conf element holds configuration data for the
  instance pool.
  jboss does not read directly the subtree for this element: instead,
  it is passed to the instance pool instance (if it implements
  org.jboss.metadata.XmlLoadable) for it to load its parameters.
  
  The default instance pools, EntityInstancePool and
  StatelessSessionInstancePool, both accept the following configuration.
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "MaximumSize"/>
				<Ref Element = "feeder-policy"/>
				<Ref Element = "feeder-policy-conf"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "MaximumSize">
		<dtdsource><![CDATA[
<BR>&lt;!--  The capacity of the Pool.  The pool feeder will feed the pool with new  instances, the pool size being limited by this value.  For pools where  reclaim is possible, the pool will also be feed when the instance is  free to be reused.  This is not an hard limit, if instances are needed when the pool is at  its MaximumSize, new instances will be created following the demand.    Used in: container-pool-conf--&gt;<BR>&lt;!ELEMENT MaximumSize (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The capacity of the Pool.  The pool feeder will feed the pool with new
  instances, the pool size being limited by this value.  For pools where
  reclaim is possible, the pool will also be feed when the instance is
  free to be reused.
  This is not an hard limit, if instances are needed when the pool is at
  its MaximumSize, new instances will be created following the demand.
  
  Used in: container-pool-conf

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "feeder-policy">
		<dtdsource><![CDATA[
<BR>&lt;!--  This element is only valid if the instance pool is a subclass of  AbstractInstancePool.    The feeder-policy element gives the Class that implements InstancePoolFeeder  and is responsible to feed the pool with new instances of bean.  If not present, no thread are started and the pool will have a size of 1.    TimedInstancePoolFeeder is the first implementation available.    Used in: container-pool-conf for AbstractInstancePool subclasses--&gt;<BR>&lt;!ELEMENT feeder-policy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  This element is only valid if the instance pool is a subclass of
  AbstractInstancePool.
  
  The feeder-policy element gives the Class that implements InstancePoolFeeder
  and is responsible to feed the pool with new instances of bean.
  If not present, no thread are started and the pool will have a size of 1.
  
  TimedInstancePoolFeeder is the first implementation available.
  
  Used in: container-pool-conf for AbstractInstancePool subclasses

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "feeder-policy-conf">
		<dtdsource><![CDATA[
<BR>&lt;!--  This element describes properties that the InstancePoolFeeder implementation  will read to configure itself (XmlLoadable).    Note: the 3 attributes are hardcoded here for TimedInstancePoolFeeder.    Used in: container-pool-conf for InstancePoolFeeder implementations--&gt;<BR>&lt;!ELEMENT feeder-policy-conf (increment , period)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  This element describes properties that the InstancePoolFeeder implementation
  will read to configure itself (XmlLoadable).
  
  Note: the 3 attributes are hardcoded here for TimedInstancePoolFeeder.
  
  Used in: container-pool-conf for InstancePoolFeeder implementations

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "increment"/>
				<Ref Element = "period"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "increment">
		<dtdsource><![CDATA[
<BR>&lt;!--  The pool feeder will feed the pool with this number of new instances at  a regular period.    Used in: feeder-policy-conf--&gt;<BR>&lt;!ELEMENT increment (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The pool feeder will feed the pool with this number of new instances at
  a regular period.
  
  Used in: feeder-policy-conf

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "period">
		<dtdsource><![CDATA[
<BR>&lt;!--  The interval of time (in milliseconds) the pool feeder look if the pool  has come to its maximum size (capacity) and if not, will feed it with  a particular number of new instances (increment).    Used in: feeder-policy-conf--&gt;<BR>&lt;!ELEMENT period (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The interval of time (in milliseconds) the pool feeder look if the pool
  has come to its maximum size (capacity) and if not, will feed it with
  a particular number of new instances (increment).
  
  Used in: feeder-policy-conf

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "commit-option">
		<dtdsource><![CDATA[
<BR>&lt;!--  This option is only used for entity container configurations.    The commit-option element tells the container which option to use for transactions.  Its value must be A, B C, or D.    - option A: the entiry instance has exclusive access to the database. The instance  stays ready after a transaction.  - option B: the entity instance does not have exclusive access to the database.  The state is loaded before the next transaction.  - option C: same as B, except the container does not keep the instance after commit:  a passivate is immediately performed after the commit.    - option D: a lazy update. default is every 30 secs.               can be updated with <BR>&lt;optiond-refresh-rate&gt;    See ejb1.1 specification for details (p118).    Used in: container-configuration--&gt;<BR>&lt;!ELEMENT commit-option (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  This option is only used for entity container configurations.
  
  The commit-option element tells the container which option to use for transactions.
  Its value must be A, B C, or D.
  
  - option A: the entiry instance has exclusive access to the database. The instance
  stays ready after a transaction.
  - option B: the entity instance does not have exclusive access to the database.
  The state is loaded before the next transaction.
  - option C: same as B, except the container does not keep the instance after commit:
  a passivate is immediately performed after the commit.
  
  - option D: a lazy update. default is every 30 secs.
               can be updated with &amp;lt;optiond-refresh-rate&amp;gt;
  
  See ejb1.1 specification for details (p118).
  
  Used in: container-configuration

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "optiond-refresh-rate">
		<dtdsource><![CDATA[
<BR>&lt;!--  This element is used to specify the refresh rate of commit option d--&gt;<BR>&lt;!ELEMENT optiond-refresh-rate (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  This element is used to specify the refresh rate of commit option d

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
</DocumentDef>