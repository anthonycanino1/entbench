<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. DDML version 1.0-->
<DocumentDef name = "jbosscmp-jdbc_3_2.dtd"
	 xmlns = "http://www.purl.org/NET/ddml/v1"
	 xmlns:DDML = "http://www.purl.org/NET/ddml/v1" Version = "1.0">
	<dtdsource><![CDATA[
<BR>&lt;?xml encoding='UTF-8' ?&gt;<BR><BR>&lt;!--This is the XML DTD for the jbosscmp-jdbc deployment descriptor.  <BR>&lt;!DOCTYPE jbosscmp-jdbc PUBLIC      &quot;-//JBoss//DTD JBOSSCMP-JDBC 3.2//EN&quot;      &quot;http://www.jboss.org/j2ee/dtd/jbosscmp-jdbc_3_2.dtd&quot;&gt;--&gt;<BR>&lt;!--The root element of JBossCMP-JDBC configuration files.--&gt;<BR>&lt;!ELEMENT jbosscmp-jdbc (defaults? , enterprise-beans? , relationships? , dependent-value-classes? , type-mappings? , entity-commands? , user-type-mappings? , reserved-words?)&gt;<BR>&lt;!--The optional defaults elements contains the default values forentities, and relationships.--&gt;<BR>&lt;!ELEMENT defaults ((datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , read-only? , read-time-out? , row-locking? , pk-constraint? , fk-constraint? , preferred-relation-mapping? , read-ahead? , list-cache-max? , fetch-size? , unknown-pk? , entity-command?)&gt;<BR>&lt;!--The optional datasource element contains the jndi-name used to lookupthe datasource.  All database connections used by an entity or relation table are obtained from the datasource.--&gt;<BR>&lt;!ELEMENT datasource (#PCDATA)&gt;<BR>&lt;!--The optional datasource-mapping element contains the name of the type mappingthat will be used for this datasource.--&gt;<BR>&lt;!ELEMENT datasource-mapping (#PCDATA)&gt;<BR>&lt;!--Should the persistence manager attempt to create tables if they arenot present?The create-table element must be one of the two following:         <BR>&lt;create-table&gt;true<BR>&lt;/create-table&gt;         <BR>&lt;create-table&gt;false<BR>&lt;/create-table&gt;--&gt;<BR>&lt;!ELEMENT create-table (#PCDATA)&gt;<BR>&lt;!--Should the persistence manager attempt to remove tables during shutdown?The remove-table element must be one of the two following:         <BR>&lt;remove-table&gt;true<BR>&lt;/remove-table&gt;         <BR>&lt;remove-table&gt;false<BR>&lt;/remove-table&gt;--&gt;<BR>&lt;!ELEMENT remove-table (#PCDATA)&gt;<BR>&lt;!--Execute arbitrary SQL code directly after the database table is created.This command is only executed if create-table is true and the tabledid not previously exist.--&gt;<BR>&lt;!ELEMENT post-table-create (sql-statement+)&gt;<BR>&lt;!--The SQL Statement to be executed. Note that this is not translatedinto database specific SQL, but passed literally to the database.--&gt;<BR>&lt;!ELEMENT sql-statement (#PCDATA)&gt;<BR>&lt;!--Is the entity or cmp-field read-only?The read-only element must be one of the two following:         <BR>&lt;read-only&gt;true<BR>&lt;/read-only&gt;         <BR>&lt;read-only&gt;false<BR>&lt;/read-only&gt;--&gt;<BR>&lt;!ELEMENT read-only (#PCDATA)&gt;<BR>&lt;!--Specifies the ammount of time that a read-only field is consideredvalid (milliseconds).--&gt;<BR>&lt;!ELEMENT read-time-out (#PCDATA)&gt;<BR>&lt;!--Should select statements the SELECT ... FOR UPDATE syntax?The row-locking element must be one of the two following:         <BR>&lt;row-locking&gt;true<BR>&lt;/row-locking&gt;         <BR>&lt;row-locking&gt;false<BR>&lt;/row-locking&gt;--&gt;<BR>&lt;!ELEMENT row-locking (#PCDATA)&gt;<BR>&lt;!--Should a foreign key constraint be added for this relationship role?The fk-constraint element must be one of the two following:         <BR>&lt;fk-constraint&gt;true<BR>&lt;/fk-constraint&gt;         <BR>&lt;fk-constraint&gt;false<BR>&lt;/fk-constraint&gt;--&gt;<BR>&lt;!ELEMENT fk-constraint (#PCDATA)&gt;<BR>&lt;!--Should a primary key constraint be added when creating tables?The pk-constraint element must be one of the two following:         <BR>&lt;pk-constraint&gt;true<BR>&lt;/pk-constraint&gt;         <BR>&lt;pk-constraint&gt;false<BR>&lt;/pk-constraint&gt;--&gt;<BR>&lt;!ELEMENT pk-constraint (#PCDATA)&gt;<BR>&lt;!--Specifies the preferred mapping style for relationships.The preferred-relation-mapping element must be one of the two following:   <BR>&lt;preferred-relation-mapping&gt;foreign-key<BR>&lt;/preferred-relation-mapping&gt;   <BR>&lt;preferred-relation-mapping&gt;relation-table<BR>&lt;/preferred-relation-mapping&gt;--&gt;<BR>&lt;!ELEMENT preferred-relation-mapping (#PCDATA)&gt;<BR>&lt;!--Specifies the read ahead strategy.         <BR>&lt;read-ahead&gt;            <BR>&lt;strategy&gt;on-load<BR>&lt;/strategy&gt;            <BR>&lt;deep-read-ahead/&gt;            <BR>&lt;page-size&gt;255<BR>&lt;/page-size&gt;            <BR>&lt;eager-load-group&gt;*<BR>&lt;/eager-load-group&gt;         <BR>&lt;/read-ahead&gt;--&gt;<BR>&lt;!ELEMENT read-ahead (strategy , deep-read-ahead? , page-size? , eager-load-group?)&gt;<BR>&lt;!--Specifies the strategy used to read-ahead data in queries.The strategy element must be one of the two following:         <BR>&lt;strategy&gt;none<BR>&lt;/strategy&gt;         <BR>&lt;strategy&gt;on-load<BR>&lt;/strategy&gt;         <BR>&lt;strategy&gt;on-find<BR>&lt;/strategy&gt;--&gt;<BR>&lt;!ELEMENT strategy (#PCDATA)&gt;<BR>&lt;!--If present relationship will be added to an on-find query and prefetched.--&gt;<BR>&lt;!ELEMENT deep-read-ahead EMPTY&gt;<BR>&lt;!--Specifies the number of entities that will be read in a singleread-ahead load query.--&gt;<BR>&lt;!ELEMENT page-size (#PCDATA)&gt;<BR>&lt;!--Specifies the number of simultaneous queries that can be tracked bythe cache for an entity.--&gt;<BR>&lt;!ELEMENT list-cache-max (#PCDATA)&gt;<BR>&lt;!--Specifies the number of entities to read in one round-trip tothe underlying datastore.--&gt;<BR>&lt;!ELEMENT fetch-size (#PCDATA)&gt;<BR>&lt;!--The enterprise-beans element contains the entity elements that willbe configured.--&gt;<BR>&lt;!ELEMENT enterprise-beans (entity+)&gt;<BR>&lt;!--The entity element contains the configuration of an entity--&gt;<BR>&lt;!ELEMENT entity (ejb-name , (datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , read-only? , read-time-out? , row-locking? , pk-constraint? , read-ahead? , list-cache-max? , fetch-size? , table-name? , cmp-field* , load-groups? , eager-load-group? , lazy-load-groups? , query* , unknown-pk? , entity-command? , optimistic-locking? , audit?)&gt;<BR>&lt;!--Name of the entity being configured.  This must match an entity declaredin the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-name (#PCDATA)&gt;<BR>&lt;!--This is the name of the table that will hold data for this entity.Each entity instance will be stored in one row of this table.--&gt;<BR>&lt;!ELEMENT table-name (#PCDATA)&gt;<BR>&lt;!--The cmp-field element contains the configuration of a cmp-field.--&gt;<BR>&lt;!ELEMENT cmp-field (field-name , read-only? , read-time-out? , column-name? , not-null? , ((jdbc-type , sql-type) | (property+))? , auto-increment? , dbindex? , check-dirty-after-get? , state-factory?)&gt;<BR>&lt;!--Name of the cmp-field being configured.  This must match a cmp-fielddeclared for this entity in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT field-name (#PCDATA)&gt;<BR>&lt;!--The name of the column that will hold the data for this field.--&gt;<BR>&lt;!ELEMENT column-name (#PCDATA)&gt;<BR>&lt;!--If present the field will not allow a field value.--&gt;<BR>&lt;!ELEMENT not-null EMPTY&gt;<BR>&lt;!--If present, the server will try to create an index on the columnin the database called <BR>&lt;fieldname&gt;_index--&gt;<BR>&lt;!ELEMENT dbindex EMPTY&gt;<BR>&lt;!--This is the JDBC type that is used when setting parameters in a JDBCPreparedStatement or loading data from a JDBC ResultSet for thiscmp-field. The valid types are defined in java.sql.Types.--&gt;<BR>&lt;!ELEMENT jdbc-type (#PCDATA)&gt;<BR>&lt;!--This is the SQL type that is used in create table statements forthis field. Valid sql-types are only limited by your database vendor.--&gt;<BR>&lt;!ELEMENT sql-type (#PCDATA)&gt;<BR>&lt;!--The property element contains the configuration of a dependentvalue class property of a cmp-field that is the type of a dependentvalue class.--&gt;<BR>&lt;!ELEMENT property (property-name , column-name? , not-null? , (jdbc-type , sql-type)?)&gt;<BR>&lt;!--Name of the property being configured. In a dependent-value-classelement this must match a JavaBean property of the class. In acmp-field element this must match a flattened propety of thedependent-value-class field type.--&gt;<BR>&lt;!ELEMENT property-name (#PCDATA)&gt;<BR>&lt;!--Can be true or false.If true, the field will be checked for dirty state at synchronization time.By default, all fields except for the fields of primitive and their wrapper typesare checked for dirty state after get.--&gt;<BR>&lt;!ELEMENT check-dirty-after-get (#PCDATA)&gt;<BR>&lt;!--Fully qualified class name of the implementation of org.jboss.ejb.plugins.cmp.jdbc.CMPFieldStateFactory.--&gt;<BR>&lt;!ELEMENT state-factory (#PCDATA)&gt;<BR>&lt;!--Contains the named load groups.--&gt;<BR>&lt;!ELEMENT load-groups (load-group+)&gt;<BR>&lt;!--A named group of fields that will be loaded together.--&gt;<BR>&lt;!ELEMENT load-group (description? , load-group-name , field-name+)&gt;<BR>&lt;!--Contains the name of a load group.--&gt;<BR>&lt;!ELEMENT load-group-name (#PCDATA)&gt;<BR>&lt;!--Contains the name of the load group that will eager loaded for this entity.--&gt;<BR>&lt;!ELEMENT eager-load-group (#PCDATA)&gt;<BR>&lt;!--Contains the names of the groups that will be lazy loaded together.--&gt;<BR>&lt;!ELEMENT lazy-load-groups (load-group-name+)&gt;<BR>&lt;!--Descriptive text.--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;<BR>&lt;!--The query element contains the configuration of a query.--&gt;<BR>&lt;!ELEMENT query (description? , query-method , (jboss-ql | dynamic-ql | declared-sql)? , read-ahead?)&gt;<BR>&lt;!--The query method that being configured.  This must match aquery-method declared for this entity in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT query-method (method-name , method-params)&gt;<BR>&lt;!--The name of the query method that is being configured.--&gt;<BR>&lt;!ELEMENT method-name (#PCDATA)&gt;<BR>&lt;!--The method-parameters contains the parameters of the method that isbeing configured. Method parameters must be in the same order as themethod and have the same type.--&gt;<BR>&lt;!ELEMENT method-params (method-param*)&gt;<BR>&lt;!--The java class of one parameter for a query.An example follows:   <BR>&lt;method-param&gt;java.lang.String<BR>&lt;/method-param&gt;--&gt;<BR>&lt;!ELEMENT method-param (#PCDATA)&gt;<BR>&lt;!--JBossQL query.  JBossQL is a superset of EJB-QL.--&gt;<BR>&lt;!ELEMENT jboss-ql (#PCDATA)&gt;<BR>&lt;!--Dynamic JBossQL query.  The JBossQL is passed to the query and compiledon the fly.--&gt;<BR>&lt;!ELEMENT dynamic-ql EMPTY&gt;<BR>&lt;!--Explicitly declared sql fragments.--&gt;<BR>&lt;!ELEMENT declared-sql (select? , from? , where? , order? , other?)&gt;<BR>&lt;!--Delcares what is to be selected.  A finder may only have the distinct element.--&gt;<BR>&lt;!ELEMENT select (distinct? , (ejb-name , field-name?)? , alias? , additional-columns?)&gt;<BR>&lt;!--Delared additional SQl to append to the generated from clause.Example:  <BR>&lt;from&gt;, FullAddressEJB as a<BR>&lt;/from&gt;--&gt;<BR>&lt;!ELEMENT from (#PCDATA)&gt;<BR>&lt;!--If the empty distinct element is present, the SELECT DISTINCTsyntax will be used. This syntax is used by default for ejbSelectmethods that return a java.util.Set.--&gt;<BR>&lt;!ELEMENT distinct EMPTY&gt;<BR>&lt;!--Declares the where clause for the query.Example: <BR>&lt;where&gt;TITLE={0} OR ARTIST={0} OR TYPE={0} OR NOTES={0}<BR>&lt;/where&gt;--&gt;<BR>&lt;!ELEMENT where (#PCDATA)&gt;<BR>&lt;!--Declares the order clause for the query.Example: <BR>&lt;order&gt;TITLE<BR>&lt;/order&gt;--&gt;<BR>&lt;!ELEMENT order (#PCDATA)&gt;<BR>&lt;!--Declares the other sql that is appended to the end of a query.Example: <BR>&lt;other&gt;LIMIT 100 OFFSET 200<BR>&lt;/other&gt;--&gt;<BR>&lt;!ELEMENT other (#PCDATA)&gt;<BR>&lt;!--Declare the alias to use for the main select table.Example: <BR>&lt;alias&gt;my_table<BR>&lt;/alias&gt;--&gt;<BR>&lt;!ELEMENT alias (#PCDATA)&gt;<BR>&lt;!--Declares other columns to be selected to satisfy orderingby arbitrary columns with ejbFinders or to facilitate aggregatefunctions in ejbSelects.Example: <BR>&lt;additional-columns&gt;, join-table1.column1,            join-table2.column2<BR>&lt;/additional-columns&gt;--&gt;<BR>&lt;!ELEMENT additional-columns (#PCDATA)&gt;<BR>&lt;!--The relationships element contains the ejb-relation elements that willbe configured.--&gt;<BR>&lt;!ELEMENT relationships (ejb-relation+)&gt;<BR>&lt;!--The ejb-relation element contains the configuration of anejb-relation.--&gt;<BR>&lt;!ELEMENT ejb-relation (ejb-relation-name , read-only? , read-time-out? , (foreign-key-mapping | relation-table-mapping)? , (ejb-relationship-role , ejb-relationship-role)?)&gt;<BR>&lt;!--Name of the ejb-relation being configured.  This must match anejb-relation declared in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-relation-name (#PCDATA)&gt;<BR>&lt;!--Specifies that the ejb-relation should be mapped with foreign-keys.This mapping is not available for many-to-many relationships.--&gt;<BR>&lt;!ELEMENT foreign-key-mapping EMPTY&gt;<BR>&lt;!--Specifies that the ejb-relation should be mapped with a relation-table.--&gt;<BR>&lt;!ELEMENT relation-table-mapping (table-name? , (datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , row-locking? , pk-constraint?)&gt;<BR>&lt;!--The ejb-rejationship-role element contains the configuration of anejb-relationship-role.--&gt;<BR>&lt;!ELEMENT ejb-relationship-role (ejb-relationship-role-name , fk-constraint? , key-fields? , read-ahead? , batch-cascade-delete?)&gt;<BR>&lt;!--The batch-cascade-delete element specifies that, this side of the relationshipshould be batch deleted with one SQL statement of the formDELETE FROM <BR>&lt;related-table&gt; WHERE <BR>&lt;foreign-key&gt; = ?The presense of cascade-delete element in ejb-jar.xml for the matchingejb-relationship-role is mandatory.--&gt;<BR>&lt;!ELEMENT batch-cascade-delete EMPTY&gt;<BR>&lt;!--Name of the ejb-relationship-role being configured.  This must matchan ejb-relationship-role declared for this ejb-relation in theejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-relationship-role-name (#PCDATA)&gt;<BR>&lt;!--Contains the key fields. The interperation of the key fields dependson the mapping style of the relationship.--&gt;<BR>&lt;!ELEMENT key-fields (key-field*)&gt;<BR>&lt;!--The key-field element declared the configuration of a key field.The field-name element must match the field-name of one of theprimary key fields of the this entity.--&gt;<BR>&lt;!ELEMENT key-field (field-name , ((column-name , (jdbc-type , sql-type)?) | (property*)) , dbindex?)&gt;<BR>&lt;!--Contains the known dependent value classes.--&gt;<BR>&lt;!ELEMENT dependent-value-classes (dependent-value-class*)&gt;<BR>&lt;!--The dependent-value-class element contains the configuration of adependent value class.--&gt;<BR>&lt;!ELEMENT dependent-value-class (description? , class , property+)&gt;<BR>&lt;!--Name of the java class to which the dependent value class configurationapplies.--&gt;<BR>&lt;!ELEMENT class (#PCDATA)&gt;<BR>&lt;!--The type-mappings element contains the java to sql mappings.--&gt;<BR>&lt;!ELEMENT type-mappings (type-mapping+)&gt;<BR>&lt;!--The type-mapping element contains a named java to sql mapping.This includes both type mapping and function mapping.--&gt;<BR>&lt;!ELEMENT type-mapping (name , row-locking-template , pk-constraint-template , fk-constraint-template , auto-increment-template? , alias-header-prefix , alias-header-suffix , alias-max-length , subquery-supported , true-mapping , false-mapping , function-mapping* , mapping+)&gt;<BR>&lt;!--Name of the type-mapping.--&gt;<BR>&lt;!ELEMENT name (#PCDATA)&gt;<BR>&lt;!--This is the template used to create a row lock on the selected rows. Thearguments supplied are as follows:1. Select clause2. From clasue; the order of the tables is currently not guarenteed3. Where clauseIf row locking is not supported in select statement this element should beempty. The most common form of row locking is select for update as in theexample that follows:SELECT ?1 FROM ?2 WHERE ?3 FOR UPDATE--&gt;<BR>&lt;!ELEMENT row-locking-template (#PCDATA)&gt;<BR>&lt;!--This is the template used to create a primary key constraint in the createtable statement. The arguments supplied are as follows:1. Primary key constraint name; which is always pk_{table-name}2. Comma sepperated list of primary key column namesIf a primary key constraint clause is not supported in a create table statementthis element should be empty. The most common form of a primary key constraintfollows:CONSTRAINT ?1 PRIMARY KEY (?2)--&gt;<BR>&lt;!ELEMENT pk-constraint-template (#PCDATA)&gt;<BR>&lt;!--This is the template used to create a foreign key constraint in sepperatestatement. The arguments supplied are as follows:1. Table name2. Foreign key constraint name; which is always fk_{table-name}_{cmr-field-name}3. Comma sepperated list of foreign key column names4. References table name5. Comma sepperated list of the referenced primary key column namesIf the datasource does not support foreign key constraints this element shouldbe empty. The most common form of a foreign key constraint follows:ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)--&gt;<BR>&lt;!ELEMENT fk-constraint-template (#PCDATA)&gt;<BR>&lt;!--This element is used to define auto-increment template for a column--&gt;<BR>&lt;!ELEMENT auto-increment-template (#PCDATA)&gt;<BR>&lt;!--An alias header is prepended to a generated table alias by the EJB-QL compilerto prevent name collisions. An alias header is constructed as folows:alias-header-prefix + int_counter + alias-header-suffix--&gt;<BR>&lt;!ELEMENT alias-header-prefix (#PCDATA)&gt;<BR>&lt;!ELEMENT alias-header-suffix (#PCDATA)&gt;<BR>&lt;!ELEMENT alias-max-length (#PCDATA)&gt;<BR>&lt;!--Does this type-mapping support subqueries. Some EJB-QL opperators are mappedto exists subqueries.  If subquery is false the EJB-QL compiler will use aleft join and is null.The subquery-supported element must be one of the two following:         <BR>&lt;create-table&gt;true<BR>&lt;/create-table&gt;         <BR>&lt;create-table&gt;false<BR>&lt;/create-table&gt;--&gt;<BR>&lt;!ELEMENT subquery-supported (#PCDATA)&gt;<BR>&lt;!--The true and false mappings are the mappings for true and false in EJB-QLqueries.--&gt;<BR>&lt;!ELEMENT true-mapping (#PCDATA)&gt;<BR>&lt;!ELEMENT false-mapping (#PCDATA)&gt;<BR>&lt;!--Specifies the mapping from a java type to a jdbc and a sql type.--&gt;<BR>&lt;!ELEMENT mapping (java-type , jdbc-type , sql-type)&gt;<BR>&lt;!--Specifies the java class type to be mapped.--&gt;<BR>&lt;!ELEMENT java-type (#PCDATA)&gt;<BR>&lt;!--Specifies the mapping from an EJB-QL function to a sql function.--&gt;<BR>&lt;!ELEMENT function-mapping (function-name , function-sql)&gt;<BR>&lt;!--The name of the function to be mapped.--&gt;<BR>&lt;!ELEMENT function-name (#PCDATA)&gt;<BR>&lt;!--The sql to which the function is mapped.  The sql can containparameters specified with a question mark followed by the base oneparameter number.  For example, function mapping for concat in Oraclefollows:<BR>&lt;function-mapping&gt;   <BR>&lt;function-name&gt;concat<BR>&lt;/function-name&gt;   <BR>&lt;function-sql&gt;(?1 || ?2)<BR>&lt;/function-sql&gt;<BR>&lt;/function-mapping&gt;--&gt;<BR>&lt;!ELEMENT function-sql (#PCDATA)&gt;<BR>&lt;!--Unknown primary key configuration--&gt;<BR>&lt;!ELEMENT unknown-pk (key-generator-factory? , unknown-pk-class , field-name? , read-only? , read-time-out? , column-name? , (jdbc-type , sql-type)? , auto-increment?)&gt;<BR>&lt;!--The unknown primary key class.--&gt;<BR>&lt;!ELEMENT unknown-pk-class (#PCDATA)&gt;<BR>&lt;!--If present the field will auto-incremented by the database--&gt;<BR>&lt;!ELEMENT auto-increment EMPTY&gt;<BR>&lt;!--This element declares available for entity commands--&gt;<BR>&lt;!ELEMENT entity-commands (entity-command*)&gt;<BR>&lt;!--This element represents an entity command--&gt;<BR>&lt;!ELEMENT entity-command (attribute*)&gt;<BR>&lt;!--This attribute specifies the command name--&gt;<BR>&lt;!ATTLIST entity-command name  CDATA  #REQUIRED&gt;<BR>&lt;!--This attribute specifies the command class--&gt;<BR>&lt;!ATTLIST entity-command class CDATA  #IMPLIED&gt;<BR>&lt;!--The attribute for create-method.--&gt;<BR>&lt;!ELEMENT attribute (#PCDATA)&gt;<BR>&lt;!--The name of the attribute--&gt;<BR>&lt;!ATTLIST attribute name CDATA  #REQUIRED&gt;<BR>&lt;!--Optimistic locking configuration--&gt;<BR>&lt;!ELEMENT optimistic-locking (group-name | modified-strategy | read-strategy | ((version-column | timestamp-column | (key-generator-factory , field-type)) , field-name? , column-name? , (jdbc-type , sql-type)?))&gt;<BR>&lt;!--Optimistic locking field group name.This name must match one of the entity's load-group-name.The fields in this group will be used for optimistic locking.--&gt;<BR>&lt;!ELEMENT group-name (#PCDATA)&gt;<BR>&lt;!--Optimistic locking modified strategy.This means the fields that were modified during transactionwill be used for optimistic locking--&gt;<BR>&lt;!ELEMENT modified-strategy EMPTY&gt;<BR>&lt;!--Optimistic locking read strategy.This strategy implies that the fields that were read/changedin the transaction will be used for optimistic locking--&gt;<BR>&lt;!ELEMENT read-strategy EMPTY&gt;<BR>&lt;!--Optimistic locking version column strategy.Setting this element will add to entity bean additional version fieldof type java.lang.Long that will be used for optimistic locking.Each update of the entity will increase the value of this field.--&gt;<BR>&lt;!ELEMENT version-column EMPTY&gt;<BR>&lt;!--Optimistic locking timestamp column strategy.Setting this element will add to entity bean additional field of typejava.util.Date that will be used for optimistic locking.Each update of the entity will set the value of this field to the currenttime.--&gt;<BR>&lt;!ELEMENT timestamp-column EMPTY&gt;<BR>&lt;!--Optimistic locking field type.The type for locking field in optimistic locking.--&gt;<BR>&lt;!ELEMENT field-type (#PCDATA)&gt;<BR>&lt;!--Key generator factory JNDI name.This element specifies the JNDI name of key generator factory that isused to obtain key generator for locking column used in optimistic locking.--&gt;<BR>&lt;!ELEMENT key-generator-factory (#PCDATA)&gt;<BR>&lt;!--Audit fields, choose the audit fieldsThe created by and updated by require a caller principalThe fields can also be cmp fields, use the same field-name--&gt;<BR>&lt;!ELEMENT audit (created-by? , created-time? , updated-by? , updated-time?)&gt;<BR>&lt;!--Created by principal, default is audit_created_by--&gt;<BR>&lt;!ELEMENT created-by (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;<BR>&lt;!--Created time, default is audit_created_time--&gt;<BR>&lt;!ELEMENT created-time (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;<BR>&lt;!--Updated by principal, default is audit_updated_by--&gt;<BR>&lt;!ELEMENT updated-by (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;<BR>&lt;!--Updated time, default is audit_updated_time--&gt;<BR>&lt;!ELEMENT updated-time (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;<BR>&lt;!--  Container for user-type-mapping elements--&gt;<BR>&lt;!ELEMENT user-type-mappings (user-type-mapping+)&gt;<BR>&lt;!--  Defines a mapping of a user type to a column providing a mapper class.  Mapper is like a mediator: when storing, it takes an instance of the user  type and translates it to a column value; when loading, it takes a column  value and translates it to an instance of the user type.--&gt;<BR>&lt;!ELEMENT user-type-mapping (java-type , mapped-type , mapper)&gt;<BR>&lt;!--  The type a java-type in user-type-mapping is mapped to.--&gt;<BR>&lt;!ELEMENT mapped-type (#PCDATA)&gt;<BR>&lt;!--  Mapper class for user-type-mapping.--&gt;<BR>&lt;!ELEMENT mapper (#PCDATA)&gt;<BR>&lt;!--  Provide reserved words that should be escaped when generating tables--&gt;<BR>&lt;!ELEMENT reserved-words (word+)&gt;<BR>&lt;!ELEMENT word (#PCDATA)&gt;]]>

	</dtdsource>
	<ElementDecl Name = "jbosscmp-jdbc">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT jbosscmp-jdbc (defaults? , enterprise-beans? , relationships? , dependent-value-classes? , type-mappings? , entity-commands? , user-type-mappings? , reserved-words?)&gt;]]>

		</dtdsource>
		<Model>
			<Seq>
				<Ref Element = "defaults" Frequency = "Optional"/>
				<Ref Element = "enterprise-beans" Frequency = "Optional"/>
				<Ref Element = "relationships" Frequency = "Optional"/>
				<Ref Element = "dependent-value-classes" Frequency = "Optional"/>
				<Ref Element = "type-mappings" Frequency = "Optional"/>
				<Ref Element = "entity-commands" Frequency = "Optional"/>
				<Ref Element = "user-type-mappings" Frequency = "Optional"/>
				<Ref Element = "reserved-words" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "defaults">
		<dtdsource><![CDATA[
<BR>&lt;!--The optional defaults elements contains the default values forentities, and relationships.--&gt;<BR>&lt;!ELEMENT defaults ((datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , read-only? , read-time-out? , row-locking? , pk-constraint? , fk-constraint? , preferred-relation-mapping? , read-ahead? , list-cache-max? , fetch-size? , unknown-pk? , entity-command?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The optional defaults elements contains the default values for
entities, and relationships.

		</DDML:Doc>
		<Model>
			<Seq>
				<Seq Frequency = "Optional">
					<Ref Element = "datasource"/>
					<Ref Element = "datasource-mapping"/>
				</Seq>
				<Ref Element = "create-table" Frequency = "Optional"/>
				<Ref Element = "remove-table" Frequency = "Optional"/>
				<Ref Element = "post-table-create" Frequency = "Optional"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "read-time-out" Frequency = "Optional"/>
				<Ref Element = "row-locking" Frequency = "Optional"/>
				<Ref Element = "pk-constraint" Frequency = "Optional"/>
				<Ref Element = "fk-constraint" Frequency = "Optional"/>
				<Ref Element = "preferred-relation-mapping" Frequency = "Optional"/>
				<Ref Element = "read-ahead" Frequency = "Optional"/>
				<Ref Element = "list-cache-max" Frequency = "Optional"/>
				<Ref Element = "fetch-size" Frequency = "Optional"/>
				<Ref Element = "unknown-pk" Frequency = "Optional"/>
				<Ref Element = "entity-command" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "datasource">
		<dtdsource><![CDATA[
<BR>&lt;!--The optional datasource element contains the jndi-name used to lookupthe datasource.  All database connections used by an entity or relation table are obtained from the datasource.--&gt;<BR>&lt;!ELEMENT datasource (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The optional datasource element contains the jndi-name used to lookup
the datasource.  All database connections used by an entity or relation table are obtained from the datasource.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "datasource-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--The optional datasource-mapping element contains the name of the type mappingthat will be used for this datasource.--&gt;<BR>&lt;!ELEMENT datasource-mapping (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The optional datasource-mapping element contains the name of the type mapping
that will be used for this datasource.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "create-table">
		<dtdsource><![CDATA[
<BR>&lt;!--Should the persistence manager attempt to create tables if they arenot present?The create-table element must be one of the two following:         <BR>&lt;create-table&gt;true<BR>&lt;/create-table&gt;         <BR>&lt;create-table&gt;false<BR>&lt;/create-table&gt;--&gt;<BR>&lt;!ELEMENT create-table (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Should the persistence manager attempt to create tables if they are
not present?

The create-table element must be one of the two following:
         &amp;lt;create-table&amp;gt;true&amp;lt;/create-table&amp;gt;
         &amp;lt;create-table&amp;gt;false&amp;lt;/create-table&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "remove-table">
		<dtdsource><![CDATA[
<BR>&lt;!--Should the persistence manager attempt to remove tables during shutdown?The remove-table element must be one of the two following:         <BR>&lt;remove-table&gt;true<BR>&lt;/remove-table&gt;         <BR>&lt;remove-table&gt;false<BR>&lt;/remove-table&gt;--&gt;<BR>&lt;!ELEMENT remove-table (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Should the persistence manager attempt to remove tables during shutdown?

The remove-table element must be one of the two following:
         &amp;lt;remove-table&amp;gt;true&amp;lt;/remove-table&amp;gt;
         &amp;lt;remove-table&amp;gt;false&amp;lt;/remove-table&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "post-table-create">
		<dtdsource><![CDATA[
<BR>&lt;!--Execute arbitrary SQL code directly after the database table is created.This command is only executed if create-table is true and the tabledid not previously exist.--&gt;<BR>&lt;!ELEMENT post-table-create (sql-statement+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Execute arbitrary SQL code directly after the database table is created.
This command is only executed if create-table is true and the table
did not previously exist.	

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "sql-statement" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "sql-statement">
		<dtdsource><![CDATA[
<BR>&lt;!--The SQL Statement to be executed. Note that this is not translatedinto database specific SQL, but passed literally to the database.--&gt;<BR>&lt;!ELEMENT sql-statement (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The SQL Statement to be executed. Note that this is not translated
into database specific SQL, but passed literally to the database.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "read-only">
		<dtdsource><![CDATA[
<BR>&lt;!--Is the entity or cmp-field read-only?The read-only element must be one of the two following:         <BR>&lt;read-only&gt;true<BR>&lt;/read-only&gt;         <BR>&lt;read-only&gt;false<BR>&lt;/read-only&gt;--&gt;<BR>&lt;!ELEMENT read-only (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Is the entity or cmp-field read-only?

The read-only element must be one of the two following:
         &amp;lt;read-only&amp;gt;true&amp;lt;/read-only&amp;gt;
         &amp;lt;read-only&amp;gt;false&amp;lt;/read-only&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "read-time-out">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the ammount of time that a read-only field is consideredvalid (milliseconds).--&gt;<BR>&lt;!ELEMENT read-time-out (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the ammount of time that a read-only field is considered
valid (milliseconds).

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "row-locking">
		<dtdsource><![CDATA[
<BR>&lt;!--Should select statements the SELECT ... FOR UPDATE syntax?The row-locking element must be one of the two following:         <BR>&lt;row-locking&gt;true<BR>&lt;/row-locking&gt;         <BR>&lt;row-locking&gt;false<BR>&lt;/row-locking&gt;--&gt;<BR>&lt;!ELEMENT row-locking (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Should select statements the SELECT ... FOR UPDATE syntax?

The row-locking element must be one of the two following:
         &amp;lt;row-locking&amp;gt;true&amp;lt;/row-locking&amp;gt;
         &amp;lt;row-locking&amp;gt;false&amp;lt;/row-locking&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "fk-constraint">
		<dtdsource><![CDATA[
<BR>&lt;!--Should a foreign key constraint be added for this relationship role?The fk-constraint element must be one of the two following:         <BR>&lt;fk-constraint&gt;true<BR>&lt;/fk-constraint&gt;         <BR>&lt;fk-constraint&gt;false<BR>&lt;/fk-constraint&gt;--&gt;<BR>&lt;!ELEMENT fk-constraint (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Should a foreign key constraint be added for this relationship role?

The fk-constraint element must be one of the two following:
         &amp;lt;fk-constraint&amp;gt;true&amp;lt;/fk-constraint&amp;gt;
         &amp;lt;fk-constraint&amp;gt;false&amp;lt;/fk-constraint&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "pk-constraint">
		<dtdsource><![CDATA[
<BR>&lt;!--Should a primary key constraint be added when creating tables?The pk-constraint element must be one of the two following:         <BR>&lt;pk-constraint&gt;true<BR>&lt;/pk-constraint&gt;         <BR>&lt;pk-constraint&gt;false<BR>&lt;/pk-constraint&gt;--&gt;<BR>&lt;!ELEMENT pk-constraint (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Should a primary key constraint be added when creating tables?

The pk-constraint element must be one of the two following:
         &amp;lt;pk-constraint&amp;gt;true&amp;lt;/pk-constraint&amp;gt;
         &amp;lt;pk-constraint&amp;gt;false&amp;lt;/pk-constraint&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "preferred-relation-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the preferred mapping style for relationships.The preferred-relation-mapping element must be one of the two following:   <BR>&lt;preferred-relation-mapping&gt;foreign-key<BR>&lt;/preferred-relation-mapping&gt;   <BR>&lt;preferred-relation-mapping&gt;relation-table<BR>&lt;/preferred-relation-mapping&gt;--&gt;<BR>&lt;!ELEMENT preferred-relation-mapping (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the preferred mapping style for relationships.

The preferred-relation-mapping element must be one of the two following:
   &amp;lt;preferred-relation-mapping&amp;gt;foreign-key&amp;lt;/preferred-relation-mapping&amp;gt;
   &amp;lt;preferred-relation-mapping&amp;gt;relation-table&amp;lt;/preferred-relation-mapping&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "read-ahead">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the read ahead strategy.         <BR>&lt;read-ahead&gt;            <BR>&lt;strategy&gt;on-load<BR>&lt;/strategy&gt;            <BR>&lt;deep-read-ahead/&gt;            <BR>&lt;page-size&gt;255<BR>&lt;/page-size&gt;            <BR>&lt;eager-load-group&gt;*<BR>&lt;/eager-load-group&gt;         <BR>&lt;/read-ahead&gt;--&gt;<BR>&lt;!ELEMENT read-ahead (strategy , deep-read-ahead? , page-size? , eager-load-group?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the read ahead strategy.

         &amp;lt;read-ahead&amp;gt;
            &amp;lt;strategy&amp;gt;on-load&amp;lt;/strategy&amp;gt;
            &amp;lt;deep-read-ahead/&amp;gt;
            &amp;lt;page-size&amp;gt;255&amp;lt;/page-size&amp;gt;
            &amp;lt;eager-load-group&amp;gt;*&amp;lt;/eager-load-group&amp;gt;
         &amp;lt;/read-ahead&amp;gt;

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "strategy"/>
				<Ref Element = "deep-read-ahead" Frequency = "Optional"/>
				<Ref Element = "page-size" Frequency = "Optional"/>
				<Ref Element = "eager-load-group" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "strategy">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the strategy used to read-ahead data in queries.The strategy element must be one of the two following:         <BR>&lt;strategy&gt;none<BR>&lt;/strategy&gt;         <BR>&lt;strategy&gt;on-load<BR>&lt;/strategy&gt;         <BR>&lt;strategy&gt;on-find<BR>&lt;/strategy&gt;--&gt;<BR>&lt;!ELEMENT strategy (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the strategy used to read-ahead data in queries.

The strategy element must be one of the two following:
         &amp;lt;strategy&amp;gt;none&amp;lt;/strategy&amp;gt;
         &amp;lt;strategy&amp;gt;on-load&amp;lt;/strategy&amp;gt;
         &amp;lt;strategy&amp;gt;on-find&amp;lt;/strategy&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "deep-read-ahead">
		<dtdsource><![CDATA[
<BR>&lt;!--If present relationship will be added to an on-find query and prefetched.--&gt;<BR>&lt;!ELEMENT deep-read-ahead EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
If present relationship will be added to an on-find query and prefetched.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "page-size">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the number of entities that will be read in a singleread-ahead load query.--&gt;<BR>&lt;!ELEMENT page-size (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the number of entities that will be read in a single
read-ahead load query.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "list-cache-max">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the number of simultaneous queries that can be tracked bythe cache for an entity.--&gt;<BR>&lt;!ELEMENT list-cache-max (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the number of simultaneous queries that can be tracked by
the cache for an entity.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "fetch-size">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the number of entities to read in one round-trip tothe underlying datastore.--&gt;<BR>&lt;!ELEMENT fetch-size (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the number of entities to read in one round-trip to
the underlying datastore.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "enterprise-beans">
		<dtdsource><![CDATA[
<BR>&lt;!--The enterprise-beans element contains the entity elements that willbe configured.--&gt;<BR>&lt;!ELEMENT enterprise-beans (entity+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The enterprise-beans element contains the entity elements that will
be configured.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "entity" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "entity">
		<dtdsource><![CDATA[
<BR>&lt;!--The entity element contains the configuration of an entity--&gt;<BR>&lt;!ELEMENT entity (ejb-name , (datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , read-only? , read-time-out? , row-locking? , pk-constraint? , read-ahead? , list-cache-max? , fetch-size? , table-name? , cmp-field* , load-groups? , eager-load-group? , lazy-load-groups? , query* , unknown-pk? , entity-command? , optimistic-locking? , audit?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The entity element contains the configuration of an entity

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-name"/>
				<Seq Frequency = "Optional">
					<Ref Element = "datasource"/>
					<Ref Element = "datasource-mapping"/>
				</Seq>
				<Ref Element = "create-table" Frequency = "Optional"/>
				<Ref Element = "remove-table" Frequency = "Optional"/>
				<Ref Element = "post-table-create" Frequency = "Optional"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "read-time-out" Frequency = "Optional"/>
				<Ref Element = "row-locking" Frequency = "Optional"/>
				<Ref Element = "pk-constraint" Frequency = "Optional"/>
				<Ref Element = "read-ahead" Frequency = "Optional"/>
				<Ref Element = "list-cache-max" Frequency = "Optional"/>
				<Ref Element = "fetch-size" Frequency = "Optional"/>
				<Ref Element = "table-name" Frequency = "Optional"/>
				<Ref Element = "cmp-field" Frequency = "ZeroOrMore"/>
				<Ref Element = "load-groups" Frequency = "Optional"/>
				<Ref Element = "eager-load-group" Frequency = "Optional"/>
				<Ref Element = "lazy-load-groups" Frequency = "Optional"/>
				<Ref Element = "query" Frequency = "ZeroOrMore"/>
				<Ref Element = "unknown-pk" Frequency = "Optional"/>
				<Ref Element = "entity-command" Frequency = "Optional"/>
				<Ref Element = "optimistic-locking" Frequency = "Optional"/>
				<Ref Element = "audit" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the entity being configured.  This must match an entity declaredin the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the entity being configured.  This must match an entity declared
in the ejb-jar.xml file.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "table-name">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the name of the table that will hold data for this entity.Each entity instance will be stored in one row of this table.--&gt;<BR>&lt;!ELEMENT table-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the name of the table that will hold data for this entity.
Each entity instance will be stored in one row of this table.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "cmp-field">
		<dtdsource><![CDATA[
<BR>&lt;!--The cmp-field element contains the configuration of a cmp-field.--&gt;<BR>&lt;!ELEMENT cmp-field (field-name , read-only? , read-time-out? , column-name? , not-null? , ((jdbc-type , sql-type) | (property+))? , auto-increment? , dbindex? , check-dirty-after-get? , state-factory?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The cmp-field element contains the configuration of a cmp-field.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "read-time-out" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Ref Element = "not-null" Frequency = "Optional"/>
				<Choice Frequency = "Optional">
					<Seq>
						<Ref Element = "jdbc-type"/>
						<Ref Element = "sql-type"/>
					</Seq>
					<Seq>
						<Ref Element = "property" Frequency = "OneOrMore"/>
					</Seq>
				</Choice>
				<Ref Element = "auto-increment" Frequency = "Optional"/>
				<Ref Element = "dbindex" Frequency = "Optional"/>
				<Ref Element = "check-dirty-after-get" Frequency = "Optional"/>
				<Ref Element = "state-factory" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "field-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the cmp-field being configured.  This must match a cmp-fielddeclared for this entity in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT field-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the cmp-field being configured.  This must match a cmp-field
declared for this entity in the ejb-jar.xml file.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "column-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The name of the column that will hold the data for this field.--&gt;<BR>&lt;!ELEMENT column-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The name of the column that will hold the data for this field.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "not-null">
		<dtdsource><![CDATA[
<BR>&lt;!--If present the field will not allow a field value.--&gt;<BR>&lt;!ELEMENT not-null EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
If present the field will not allow a field value.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "dbindex">
		<dtdsource><![CDATA[
<BR>&lt;!--If present, the server will try to create an index on the columnin the database called <BR>&lt;fieldname&gt;_index--&gt;<BR>&lt;!ELEMENT dbindex EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
If present, the server will try to create an index on the column
in the database called &amp;lt;fieldname&amp;gt;_index

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "jdbc-type">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the JDBC type that is used when setting parameters in a JDBCPreparedStatement or loading data from a JDBC ResultSet for thiscmp-field. The valid types are defined in java.sql.Types.--&gt;<BR>&lt;!ELEMENT jdbc-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the JDBC type that is used when setting parameters in a JDBC
PreparedStatement or loading data from a JDBC ResultSet for this
cmp-field. The valid types are defined in java.sql.Types.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "sql-type">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the SQL type that is used in create table statements forthis field. Valid sql-types are only limited by your database vendor.--&gt;<BR>&lt;!ELEMENT sql-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the SQL type that is used in create table statements for
this field. Valid sql-types are only limited by your database vendor.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "property">
		<dtdsource><![CDATA[
<BR>&lt;!--The property element contains the configuration of a dependentvalue class property of a cmp-field that is the type of a dependentvalue class.--&gt;<BR>&lt;!ELEMENT property (property-name , column-name? , not-null? , (jdbc-type , sql-type)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The property element contains the configuration of a dependent
value class property of a cmp-field that is the type of a dependent
value class.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "property-name"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Ref Element = "not-null" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "property-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the property being configured. In a dependent-value-classelement this must match a JavaBean property of the class. In acmp-field element this must match a flattened propety of thedependent-value-class field type.--&gt;<BR>&lt;!ELEMENT property-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the property being configured. In a dependent-value-class
element this must match a JavaBean property of the class. In a
cmp-field element this must match a flattened propety of the
dependent-value-class field type.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "check-dirty-after-get">
		<dtdsource><![CDATA[
<BR>&lt;!--Can be true or false.If true, the field will be checked for dirty state at synchronization time.By default, all fields except for the fields of primitive and their wrapper typesare checked for dirty state after get.--&gt;<BR>&lt;!ELEMENT check-dirty-after-get (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Can be true or false.
If true, the field will be checked for dirty state at synchronization time.
By default, all fields except for the fields of primitive and their wrapper types
are checked for dirty state after get.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "state-factory">
		<dtdsource><![CDATA[
<BR>&lt;!--Fully qualified class name of the implementation of org.jboss.ejb.plugins.cmp.jdbc.CMPFieldStateFactory.--&gt;<BR>&lt;!ELEMENT state-factory (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Fully qualified class name of the implementation of
 org.jboss.ejb.plugins.cmp.jdbc.CMPFieldStateFactory.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "load-groups">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the named load groups.--&gt;<BR>&lt;!ELEMENT load-groups (load-group+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the named load groups.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "load-group" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "load-group">
		<dtdsource><![CDATA[
<BR>&lt;!--A named group of fields that will be loaded together.--&gt;<BR>&lt;!ELEMENT load-group (description? , load-group-name , field-name+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
A named group of fields that will be loaded together.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "load-group-name"/>
				<Ref Element = "field-name" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "load-group-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the name of a load group.--&gt;<BR>&lt;!ELEMENT load-group-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the name of a load group.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "eager-load-group">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the name of the load group that will eager loaded for this entity.--&gt;<BR>&lt;!ELEMENT eager-load-group (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the name of the load group that will eager loaded for this entity.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "lazy-load-groups">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the names of the groups that will be lazy loaded together.--&gt;<BR>&lt;!ELEMENT lazy-load-groups (load-group-name+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the names of the groups that will be lazy loaded together.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "load-group-name" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "description">
		<dtdsource><![CDATA[
<BR>&lt;!--Descriptive text.--&gt;<BR>&lt;!ELEMENT description (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Descriptive text.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "query">
		<dtdsource><![CDATA[
<BR>&lt;!--The query element contains the configuration of a query.--&gt;<BR>&lt;!ELEMENT query (description? , query-method , (jboss-ql | dynamic-ql | declared-sql)? , read-ahead?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The query element contains the configuration of a query.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "query-method"/>
				<Choice Frequency = "Optional">
					<Ref Element = "jboss-ql"/>
					<Ref Element = "dynamic-ql"/>
					<Ref Element = "declared-sql"/>
				</Choice>
				<Ref Element = "read-ahead" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "query-method">
		<dtdsource><![CDATA[
<BR>&lt;!--The query method that being configured.  This must match aquery-method declared for this entity in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT query-method (method-name , method-params)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The query method that being configured.  This must match a
query-method declared for this entity in the ejb-jar.xml file.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "method-name"/>
				<Ref Element = "method-params"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "method-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The name of the query method that is being configured.--&gt;<BR>&lt;!ELEMENT method-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The name of the query method that is being configured.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "method-params">
		<dtdsource><![CDATA[
<BR>&lt;!--The method-parameters contains the parameters of the method that isbeing configured. Method parameters must be in the same order as themethod and have the same type.--&gt;<BR>&lt;!ELEMENT method-params (method-param*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The method-parameters contains the parameters of the method that is
being configured. Method parameters must be in the same order as the
method and have the same type.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "method-param" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "method-param">
		<dtdsource><![CDATA[
<BR>&lt;!--The java class of one parameter for a query.An example follows:   <BR>&lt;method-param&gt;java.lang.String<BR>&lt;/method-param&gt;--&gt;<BR>&lt;!ELEMENT method-param (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The java class of one parameter for a query.

An example follows:
   &amp;lt;method-param&amp;gt;java.lang.String&amp;lt;/method-param&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "jboss-ql">
		<dtdsource><![CDATA[
<BR>&lt;!--JBossQL query.  JBossQL is a superset of EJB-QL.--&gt;<BR>&lt;!ELEMENT jboss-ql (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
JBossQL query.  JBossQL is a superset of EJB-QL.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "dynamic-ql">
		<dtdsource><![CDATA[
<BR>&lt;!--Dynamic JBossQL query.  The JBossQL is passed to the query and compiledon the fly.--&gt;<BR>&lt;!ELEMENT dynamic-ql EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Dynamic JBossQL query.  The JBossQL is passed to the query and compiled
on the fly.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "declared-sql">
		<dtdsource><![CDATA[
<BR>&lt;!--Explicitly declared sql fragments.--&gt;<BR>&lt;!ELEMENT declared-sql (select? , from? , where? , order? , other?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Explicitly declared sql fragments.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "select" Frequency = "Optional"/>
				<Ref Element = "from" Frequency = "Optional"/>
				<Ref Element = "where" Frequency = "Optional"/>
				<Ref Element = "order" Frequency = "Optional"/>
				<Ref Element = "other" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "select">
		<dtdsource><![CDATA[
<BR>&lt;!--Delcares what is to be selected.  A finder may only have the distinct element.--&gt;<BR>&lt;!ELEMENT select (distinct? , (ejb-name , field-name?)? , alias? , additional-columns?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Delcares what is to be selected.  A finder may only have the distinct element.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "distinct" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "ejb-name"/>
					<Ref Element = "field-name" Frequency = "Optional"/>
				</Seq>
				<Ref Element = "alias" Frequency = "Optional"/>
				<Ref Element = "additional-columns" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "from">
		<dtdsource><![CDATA[
<BR>&lt;!--Delared additional SQl to append to the generated from clause.Example:  <BR>&lt;from&gt;, FullAddressEJB as a<BR>&lt;/from&gt;--&gt;<BR>&lt;!ELEMENT from (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Delared additional SQl to append to the generated from clause.

Example:  &amp;lt;from&amp;gt;, FullAddressEJB as a&amp;lt;/from&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "distinct">
		<dtdsource><![CDATA[
<BR>&lt;!--If the empty distinct element is present, the SELECT DISTINCTsyntax will be used. This syntax is used by default for ejbSelectmethods that return a java.util.Set.--&gt;<BR>&lt;!ELEMENT distinct EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
If the empty distinct element is present, the SELECT DISTINCT
syntax will be used. This syntax is used by default for ejbSelect
methods that return a java.util.Set.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "where">
		<dtdsource><![CDATA[
<BR>&lt;!--Declares the where clause for the query.Example: <BR>&lt;where&gt;TITLE={0} OR ARTIST={0} OR TYPE={0} OR NOTES={0}<BR>&lt;/where&gt;--&gt;<BR>&lt;!ELEMENT where (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Declares the where clause for the query.

Example: &amp;lt;where&amp;gt;TITLE={0} OR ARTIST={0} OR TYPE={0} OR NOTES={0}&amp;lt;/where&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "order">
		<dtdsource><![CDATA[
<BR>&lt;!--Declares the order clause for the query.Example: <BR>&lt;order&gt;TITLE<BR>&lt;/order&gt;--&gt;<BR>&lt;!ELEMENT order (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Declares the order clause for the query.

Example: &amp;lt;order&amp;gt;TITLE&amp;lt;/order&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "other">
		<dtdsource><![CDATA[
<BR>&lt;!--Declares the other sql that is appended to the end of a query.Example: <BR>&lt;other&gt;LIMIT 100 OFFSET 200<BR>&lt;/other&gt;--&gt;<BR>&lt;!ELEMENT other (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Declares the other sql that is appended to the end of a query.

Example: &amp;lt;other&amp;gt;LIMIT 100 OFFSET 200&amp;lt;/other&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "alias">
		<dtdsource><![CDATA[
<BR>&lt;!--Declare the alias to use for the main select table.Example: <BR>&lt;alias&gt;my_table<BR>&lt;/alias&gt;--&gt;<BR>&lt;!ELEMENT alias (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Declare the alias to use for the main select table.

Example: &amp;lt;alias&amp;gt;my_table&amp;lt;/alias&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "additional-columns">
		<dtdsource><![CDATA[
<BR>&lt;!--Declares other columns to be selected to satisfy orderingby arbitrary columns with ejbFinders or to facilitate aggregatefunctions in ejbSelects.Example: <BR>&lt;additional-columns&gt;, join-table1.column1,            join-table2.column2<BR>&lt;/additional-columns&gt;--&gt;<BR>&lt;!ELEMENT additional-columns (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Declares other columns to be selected to satisfy ordering
by arbitrary columns with ejbFinders or to facilitate aggregate
functions in ejbSelects.

Example: &amp;lt;additional-columns&amp;gt;, join-table1.column1,
            join-table2.column2&amp;lt;/additional-columns&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "relationships">
		<dtdsource><![CDATA[
<BR>&lt;!--The relationships element contains the ejb-relation elements that willbe configured.--&gt;<BR>&lt;!ELEMENT relationships (ejb-relation+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The relationships element contains the ejb-relation elements that will
be configured.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-relation" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-relation">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-relation element contains the configuration of anejb-relation.--&gt;<BR>&lt;!ELEMENT ejb-relation (ejb-relation-name , read-only? , read-time-out? , (foreign-key-mapping | relation-table-mapping)? , (ejb-relationship-role , ejb-relationship-role)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-relation element contains the configuration of an
ejb-relation.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-relation-name"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "read-time-out" Frequency = "Optional"/>
				<Choice Frequency = "Optional">
					<Ref Element = "foreign-key-mapping"/>
					<Ref Element = "relation-table-mapping"/>
				</Choice>
				<Seq Frequency = "Optional">
					<Ref Element = "ejb-relationship-role"/>
					<Ref Element = "ejb-relationship-role"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-relation-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the ejb-relation being configured.  This must match anejb-relation declared in the ejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-relation-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the ejb-relation being configured.  This must match an
ejb-relation declared in the ejb-jar.xml file.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "foreign-key-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies that the ejb-relation should be mapped with foreign-keys.This mapping is not available for many-to-many relationships.--&gt;<BR>&lt;!ELEMENT foreign-key-mapping EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies that the ejb-relation should be mapped with foreign-keys.
This mapping is not available for many-to-many relationships.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "relation-table-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies that the ejb-relation should be mapped with a relation-table.--&gt;<BR>&lt;!ELEMENT relation-table-mapping (table-name? , (datasource , datasource-mapping)? , create-table? , remove-table? , post-table-create? , row-locking? , pk-constraint?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies that the ejb-relation should be mapped with a relation-table.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "table-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "datasource"/>
					<Ref Element = "datasource-mapping"/>
				</Seq>
				<Ref Element = "create-table" Frequency = "Optional"/>
				<Ref Element = "remove-table" Frequency = "Optional"/>
				<Ref Element = "post-table-create" Frequency = "Optional"/>
				<Ref Element = "row-locking" Frequency = "Optional"/>
				<Ref Element = "pk-constraint" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-relationship-role">
		<dtdsource><![CDATA[
<BR>&lt;!--The ejb-rejationship-role element contains the configuration of anejb-relationship-role.--&gt;<BR>&lt;!ELEMENT ejb-relationship-role (ejb-relationship-role-name , fk-constraint? , key-fields? , read-ahead? , batch-cascade-delete?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The ejb-rejationship-role element contains the configuration of an
ejb-relationship-role.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "ejb-relationship-role-name"/>
				<Ref Element = "fk-constraint" Frequency = "Optional"/>
				<Ref Element = "key-fields" Frequency = "Optional"/>
				<Ref Element = "read-ahead" Frequency = "Optional"/>
				<Ref Element = "batch-cascade-delete" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "batch-cascade-delete">
		<dtdsource><![CDATA[
<BR>&lt;!--The batch-cascade-delete element specifies that, this side of the relationshipshould be batch deleted with one SQL statement of the formDELETE FROM <BR>&lt;related-table&gt; WHERE <BR>&lt;foreign-key&gt; = ?The presense of cascade-delete element in ejb-jar.xml for the matchingejb-relationship-role is mandatory.--&gt;<BR>&lt;!ELEMENT batch-cascade-delete EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
The batch-cascade-delete element specifies that, this side of the relationship
should be batch deleted with one SQL statement of the form
DELETE FROM &amp;lt;related-table&amp;gt; WHERE &amp;lt;foreign-key&amp;gt; = ?
The presense of cascade-delete element in ejb-jar.xml for the matching
ejb-relationship-role is mandatory.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "ejb-relationship-role-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the ejb-relationship-role being configured.  This must matchan ejb-relationship-role declared for this ejb-relation in theejb-jar.xml file.--&gt;<BR>&lt;!ELEMENT ejb-relationship-role-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the ejb-relationship-role being configured.  This must match
an ejb-relationship-role declared for this ejb-relation in the
ejb-jar.xml file.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "key-fields">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the key fields. The interperation of the key fields dependson the mapping style of the relationship.--&gt;<BR>&lt;!ELEMENT key-fields (key-field*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the key fields. The interperation of the key fields depends
on the mapping style of the relationship.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "key-field" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "key-field">
		<dtdsource><![CDATA[
<BR>&lt;!--The key-field element declared the configuration of a key field.The field-name element must match the field-name of one of theprimary key fields of the this entity.--&gt;<BR>&lt;!ELEMENT key-field (field-name , ((column-name , (jdbc-type , sql-type)?) | (property*)) , dbindex?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The key-field element declared the configuration of a key field.
The field-name element must match the field-name of one of the
primary key fields of the this entity.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name"/>
				<Choice>
					<Seq>
						<Ref Element = "column-name"/>
						<Seq Frequency = "Optional">
							<Ref Element = "jdbc-type"/>
							<Ref Element = "sql-type"/>
						</Seq>
					</Seq>
					<Seq>
						<Ref Element = "property" Frequency = "ZeroOrMore"/>
					</Seq>
				</Choice>
				<Ref Element = "dbindex" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "dependent-value-classes">
		<dtdsource><![CDATA[
<BR>&lt;!--Contains the known dependent value classes.--&gt;<BR>&lt;!ELEMENT dependent-value-classes (dependent-value-class*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Contains the known dependent value classes.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "dependent-value-class" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "dependent-value-class">
		<dtdsource><![CDATA[
<BR>&lt;!--The dependent-value-class element contains the configuration of adependent value class.--&gt;<BR>&lt;!ELEMENT dependent-value-class (description? , class , property+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The dependent-value-class element contains the configuration of a
dependent value class.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "description" Frequency = "Optional"/>
				<Ref Element = "class"/>
				<Ref Element = "property" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "class">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the java class to which the dependent value class configurationapplies.--&gt;<BR>&lt;!ELEMENT class (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the java class to which the dependent value class configuration
applies.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "type-mappings">
		<dtdsource><![CDATA[
<BR>&lt;!--The type-mappings element contains the java to sql mappings.--&gt;<BR>&lt;!ELEMENT type-mappings (type-mapping+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The type-mappings element contains the java to sql mappings.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "type-mapping" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "type-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--The type-mapping element contains a named java to sql mapping.This includes both type mapping and function mapping.--&gt;<BR>&lt;!ELEMENT type-mapping (name , row-locking-template , pk-constraint-template , fk-constraint-template , auto-increment-template? , alias-header-prefix , alias-header-suffix , alias-max-length , subquery-supported , true-mapping , false-mapping , function-mapping* , mapping+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The type-mapping element contains a named java to sql mapping.
This includes both type mapping and function mapping.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "name"/>
				<Ref Element = "row-locking-template"/>
				<Ref Element = "pk-constraint-template"/>
				<Ref Element = "fk-constraint-template"/>
				<Ref Element = "auto-increment-template" Frequency = "Optional"/>
				<Ref Element = "alias-header-prefix"/>
				<Ref Element = "alias-header-suffix"/>
				<Ref Element = "alias-max-length"/>
				<Ref Element = "subquery-supported"/>
				<Ref Element = "true-mapping"/>
				<Ref Element = "false-mapping"/>
				<Ref Element = "function-mapping" Frequency = "ZeroOrMore"/>
				<Ref Element = "mapping" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "name">
		<dtdsource><![CDATA[
<BR>&lt;!--Name of the type-mapping.--&gt;<BR>&lt;!ELEMENT name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Name of the type-mapping.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "row-locking-template">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the template used to create a row lock on the selected rows. Thearguments supplied are as follows:1. Select clause2. From clasue; the order of the tables is currently not guarenteed3. Where clauseIf row locking is not supported in select statement this element should beempty. The most common form of row locking is select for update as in theexample that follows:SELECT ?1 FROM ?2 WHERE ?3 FOR UPDATE--&gt;<BR>&lt;!ELEMENT row-locking-template (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the template used to create a row lock on the selected rows. The
arguments supplied are as follows:

1. Select clause
2. From clasue; the order of the tables is currently not guarenteed
3. Where clause

If row locking is not supported in select statement this element should be
empty. The most common form of row locking is select for update as in the
example that follows:

SELECT ?1 FROM ?2 WHERE ?3 FOR UPDATE

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "pk-constraint-template">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the template used to create a primary key constraint in the createtable statement. The arguments supplied are as follows:1. Primary key constraint name; which is always pk_{table-name}2. Comma sepperated list of primary key column namesIf a primary key constraint clause is not supported in a create table statementthis element should be empty. The most common form of a primary key constraintfollows:CONSTRAINT ?1 PRIMARY KEY (?2)--&gt;<BR>&lt;!ELEMENT pk-constraint-template (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the template used to create a primary key constraint in the create
table statement. The arguments supplied are as follows:

1. Primary key constraint name; which is always pk_{table-name}
2. Comma sepperated list of primary key column names

If a primary key constraint clause is not supported in a create table statement
this element should be empty. The most common form of a primary key constraint
follows:

CONSTRAINT ?1 PRIMARY KEY (?2)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "fk-constraint-template">
		<dtdsource><![CDATA[
<BR>&lt;!--This is the template used to create a foreign key constraint in sepperatestatement. The arguments supplied are as follows:1. Table name2. Foreign key constraint name; which is always fk_{table-name}_{cmr-field-name}3. Comma sepperated list of foreign key column names4. References table name5. Comma sepperated list of the referenced primary key column namesIf the datasource does not support foreign key constraints this element shouldbe empty. The most common form of a foreign key constraint follows:ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)--&gt;<BR>&lt;!ELEMENT fk-constraint-template (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This is the template used to create a foreign key constraint in sepperate
statement. The arguments supplied are as follows:

1. Table name
2. Foreign key constraint name; which is always fk_{table-name}_{cmr-field-name}
3. Comma sepperated list of foreign key column names
4. References table name
5. Comma sepperated list of the referenced primary key column names

If the datasource does not support foreign key constraints this element should
be empty. The most common form of a foreign key constraint follows:

ALTER TABLE ?1 ADD CONSTRAINT ?2 FOREIGN KEY (?3) REFERENCES ?4 (?5)

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "auto-increment-template">
		<dtdsource><![CDATA[
<BR>&lt;!--This element is used to define auto-increment template for a column--&gt;<BR>&lt;!ELEMENT auto-increment-template (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This element is used to define auto-increment template for a column

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "alias-header-prefix">
		<dtdsource><![CDATA[
<BR>&lt;!--An alias header is prepended to a generated table alias by the EJB-QL compilerto prevent name collisions. An alias header is constructed as folows:alias-header-prefix + int_counter + alias-header-suffix--&gt;<BR>&lt;!ELEMENT alias-header-prefix (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
An alias header is prepended to a generated table alias by the EJB-QL compiler
to prevent name collisions. An alias header is constructed as folows:

alias-header-prefix + int_counter + alias-header-suffix

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "alias-header-suffix">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT alias-header-suffix (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "alias-max-length">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT alias-max-length (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "subquery-supported">
		<dtdsource><![CDATA[
<BR>&lt;!--Does this type-mapping support subqueries. Some EJB-QL opperators are mappedto exists subqueries.  If subquery is false the EJB-QL compiler will use aleft join and is null.The subquery-supported element must be one of the two following:         <BR>&lt;create-table&gt;true<BR>&lt;/create-table&gt;         <BR>&lt;create-table&gt;false<BR>&lt;/create-table&gt;--&gt;<BR>&lt;!ELEMENT subquery-supported (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Does this type-mapping support subqueries. Some EJB-QL opperators are mapped
to exists subqueries.  If subquery is false the EJB-QL compiler will use a
left join and is null.

The subquery-supported element must be one of the two following:
         &amp;lt;create-table&amp;gt;true&amp;lt;/create-table&amp;gt;
         &amp;lt;create-table&amp;gt;false&amp;lt;/create-table&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "true-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--The true and false mappings are the mappings for true and false in EJB-QLqueries.--&gt;<BR>&lt;!ELEMENT true-mapping (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The true and false mappings are the mappings for true and false in EJB-QL
queries.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "false-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT false-mapping (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the mapping from a java type to a jdbc and a sql type.--&gt;<BR>&lt;!ELEMENT mapping (java-type , jdbc-type , sql-type)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the mapping from a java type to a jdbc and a sql type.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "java-type"/>
				<Ref Element = "jdbc-type"/>
				<Ref Element = "sql-type"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "java-type">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the java class type to be mapped.--&gt;<BR>&lt;!ELEMENT java-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the java class type to be mapped.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "function-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--Specifies the mapping from an EJB-QL function to a sql function.--&gt;<BR>&lt;!ELEMENT function-mapping (function-name , function-sql)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Specifies the mapping from an EJB-QL function to a sql function.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "function-name"/>
				<Ref Element = "function-sql"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "function-name">
		<dtdsource><![CDATA[
<BR>&lt;!--The name of the function to be mapped.--&gt;<BR>&lt;!ELEMENT function-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The name of the function to be mapped.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "function-sql">
		<dtdsource><![CDATA[
<BR>&lt;!--The sql to which the function is mapped.  The sql can containparameters specified with a question mark followed by the base oneparameter number.  For example, function mapping for concat in Oraclefollows:<BR>&lt;function-mapping&gt;   <BR>&lt;function-name&gt;concat<BR>&lt;/function-name&gt;   <BR>&lt;function-sql&gt;(?1 || ?2)<BR>&lt;/function-sql&gt;<BR>&lt;/function-mapping&gt;--&gt;<BR>&lt;!ELEMENT function-sql (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The sql to which the function is mapped.  The sql can contain
parameters specified with a question mark followed by the base one
parameter number.  For example, function mapping for concat in Oracle
follows:

&amp;lt;function-mapping&amp;gt;
   &amp;lt;function-name&amp;gt;concat&amp;lt;/function-name&amp;gt;
   &amp;lt;function-sql&amp;gt;(?1 || ?2)&amp;lt;/function-sql&amp;gt;
&amp;lt;/function-mapping&amp;gt;

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "unknown-pk">
		<dtdsource><![CDATA[
<BR>&lt;!--Unknown primary key configuration--&gt;<BR>&lt;!ELEMENT unknown-pk (key-generator-factory? , unknown-pk-class , field-name? , read-only? , read-time-out? , column-name? , (jdbc-type , sql-type)? , auto-increment?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Unknown primary key configuration

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "key-generator-factory" Frequency = "Optional"/>
				<Ref Element = "unknown-pk-class"/>
				<Ref Element = "field-name" Frequency = "Optional"/>
				<Ref Element = "read-only" Frequency = "Optional"/>
				<Ref Element = "read-time-out" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
				<Ref Element = "auto-increment" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "unknown-pk-class">
		<dtdsource><![CDATA[
<BR>&lt;!--The unknown primary key class.--&gt;<BR>&lt;!ELEMENT unknown-pk-class (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
The unknown primary key class.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "auto-increment">
		<dtdsource><![CDATA[
<BR>&lt;!--If present the field will auto-incremented by the database--&gt;<BR>&lt;!ELEMENT auto-increment EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
If present the field will auto-incremented by the database

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "entity-commands">
		<dtdsource><![CDATA[
<BR>&lt;!--This element declares available for entity commands--&gt;<BR>&lt;!ELEMENT entity-commands (entity-command*)&gt;]]>

		</dtdsource>
		<DDML:Doc>
This element declares available for entity commands

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "entity-command" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "entity-command">
		<dtdsource><![CDATA[
<BR>&lt;!--This element represents an entity command--&gt;<BR>&lt;!ELEMENT entity-command (attribute*)&gt;<BR>&lt;!--This attribute specifies the command name--&gt;<BR>&lt;!ATTLIST entity-command name  CDATA  #REQUIRED&gt;<BR>&lt;!--This attribute specifies the command class--&gt;<BR>&lt;!ATTLIST entity-command class CDATA  #IMPLIED&gt;]]>

		</dtdsource>
		<DDML:Doc>
This element represents an entity command

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "attribute" Frequency = "ZeroOrMore"/>
			</Seq>
		</Model>
		<AttGroup>
			<AttDef Name = "name" Required = "Yes">
				<DDML:Doc>
This attribute specifies the command name

				</DDML:Doc>
			</AttDef>
			<AttDef Name = "class">
				<DDML:Doc>
This attribute specifies the command class

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "name" Required = "Yes">
			<DDML:Doc>
This attribute specifies the command name

			</DDML:Doc>
		</AttDef>
		<AttDef Name = "class">
			<DDML:Doc>
This attribute specifies the command class

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "attribute">
		<dtdsource><![CDATA[
<BR>&lt;!--The attribute for create-method.--&gt;<BR>&lt;!ELEMENT attribute (#PCDATA)&gt;<BR>&lt;!--The name of the attribute--&gt;<BR>&lt;!ATTLIST attribute name CDATA  #REQUIRED&gt;]]>

		</dtdsource>
		<DDML:Doc>
The attribute for create-method.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
		<AttGroup>
			<AttDef Name = "name" Required = "Yes">
				<DDML:Doc>
The name of the attribute

				</DDML:Doc>
			</AttDef>
		</AttGroup>
		<AttDef Name = "name" Required = "Yes">
			<DDML:Doc>
The name of the attribute

			</DDML:Doc>
		</AttDef>
	</ElementDecl>
	<ElementDecl Name = "optimistic-locking">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking configuration--&gt;<BR>&lt;!ELEMENT optimistic-locking (group-name | modified-strategy | read-strategy | ((version-column | timestamp-column | (key-generator-factory , field-type)) , field-name? , column-name? , (jdbc-type , sql-type)?))&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking configuration

		</DDML:Doc>
		<Model>
			<Choice>
				<Ref Element = "group-name"/>
				<Ref Element = "modified-strategy"/>
				<Ref Element = "read-strategy"/>
				<Seq>
					<Choice>
						<Ref Element = "version-column"/>
						<Ref Element = "timestamp-column"/>
						<Seq>
							<Ref Element = "key-generator-factory"/>
							<Ref Element = "field-type"/>
						</Seq>
					</Choice>
					<Ref Element = "field-name" Frequency = "Optional"/>
					<Ref Element = "column-name" Frequency = "Optional"/>
					<Seq Frequency = "Optional">
						<Ref Element = "jdbc-type"/>
						<Ref Element = "sql-type"/>
					</Seq>
				</Seq>
			</Choice>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "group-name">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking field group name.This name must match one of the entity's load-group-name.The fields in this group will be used for optimistic locking.--&gt;<BR>&lt;!ELEMENT group-name (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking field group name.
This name must match one of the entity's load-group-name.
The fields in this group will be used for optimistic locking.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "modified-strategy">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking modified strategy.This means the fields that were modified during transactionwill be used for optimistic locking--&gt;<BR>&lt;!ELEMENT modified-strategy EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking modified strategy.
This means the fields that were modified during transaction
will be used for optimistic locking

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "read-strategy">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking read strategy.This strategy implies that the fields that were read/changedin the transaction will be used for optimistic locking--&gt;<BR>&lt;!ELEMENT read-strategy EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking read strategy.
This strategy implies that the fields that were read/changed
in the transaction will be used for optimistic locking

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "version-column">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking version column strategy.Setting this element will add to entity bean additional version fieldof type java.lang.Long that will be used for optimistic locking.Each update of the entity will increase the value of this field.--&gt;<BR>&lt;!ELEMENT version-column EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking version column strategy.
Setting this element will add to entity bean additional version field
of type java.lang.Long that will be used for optimistic locking.
Each update of the entity will increase the value of this field.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "timestamp-column">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking timestamp column strategy.Setting this element will add to entity bean additional field of typejava.util.Date that will be used for optimistic locking.Each update of the entity will set the value of this field to the currenttime.--&gt;<BR>&lt;!ELEMENT timestamp-column EMPTY&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking timestamp column strategy.
Setting this element will add to entity bean additional field of type
java.util.Date that will be used for optimistic locking.
Each update of the entity will set the value of this field to the current
time.

		</DDML:Doc>
		<Model>
			<Empty/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "field-type">
		<dtdsource><![CDATA[
<BR>&lt;!--Optimistic locking field type.The type for locking field in optimistic locking.--&gt;<BR>&lt;!ELEMENT field-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Optimistic locking field type.
The type for locking field in optimistic locking.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "key-generator-factory">
		<dtdsource><![CDATA[
<BR>&lt;!--Key generator factory JNDI name.This element specifies the JNDI name of key generator factory that isused to obtain key generator for locking column used in optimistic locking.--&gt;<BR>&lt;!ELEMENT key-generator-factory (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Key generator factory JNDI name.
This element specifies the JNDI name of key generator factory that is
used to obtain key generator for locking column used in optimistic locking.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "audit">
		<dtdsource><![CDATA[
<BR>&lt;!--Audit fields, choose the audit fieldsThe created by and updated by require a caller principalThe fields can also be cmp fields, use the same field-name--&gt;<BR>&lt;!ELEMENT audit (created-by? , created-time? , updated-by? , updated-time?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Audit fields, choose the audit fields
The created by and updated by require a caller principal
The fields can also be cmp fields, use the same field-name

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "created-by" Frequency = "Optional"/>
				<Ref Element = "created-time" Frequency = "Optional"/>
				<Ref Element = "updated-by" Frequency = "Optional"/>
				<Ref Element = "updated-time" Frequency = "Optional"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "created-by">
		<dtdsource><![CDATA[
<BR>&lt;!--Created by principal, default is audit_created_by--&gt;<BR>&lt;!ELEMENT created-by (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Created by principal, default is audit_created_by

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "created-time">
		<dtdsource><![CDATA[
<BR>&lt;!--Created time, default is audit_created_time--&gt;<BR>&lt;!ELEMENT created-time (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Created time, default is audit_created_time

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "updated-by">
		<dtdsource><![CDATA[
<BR>&lt;!--Updated by principal, default is audit_updated_by--&gt;<BR>&lt;!ELEMENT updated-by (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Updated by principal, default is audit_updated_by

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "updated-time">
		<dtdsource><![CDATA[
<BR>&lt;!--Updated time, default is audit_updated_time--&gt;<BR>&lt;!ELEMENT updated-time (field-name? , column-name? , (jdbc-type , sql-type)?)&gt;]]>

		</dtdsource>
		<DDML:Doc>
Updated time, default is audit_updated_time

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "field-name" Frequency = "Optional"/>
				<Ref Element = "column-name" Frequency = "Optional"/>
				<Seq Frequency = "Optional">
					<Ref Element = "jdbc-type"/>
					<Ref Element = "sql-type"/>
				</Seq>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "user-type-mappings">
		<dtdsource><![CDATA[
<BR>&lt;!--  Container for user-type-mapping elements--&gt;<BR>&lt;!ELEMENT user-type-mappings (user-type-mapping+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Container for user-type-mapping elements

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "user-type-mapping" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "user-type-mapping">
		<dtdsource><![CDATA[
<BR>&lt;!--  Defines a mapping of a user type to a column providing a mapper class.  Mapper is like a mediator: when storing, it takes an instance of the user  type and translates it to a column value; when loading, it takes a column  value and translates it to an instance of the user type.--&gt;<BR>&lt;!ELEMENT user-type-mapping (java-type , mapped-type , mapper)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Defines a mapping of a user type to a column providing a mapper class.
  Mapper is like a mediator: when storing, it takes an instance of the user
  type and translates it to a column value; when loading, it takes a column
  value and translates it to an instance of the user type.

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "java-type"/>
				<Ref Element = "mapped-type"/>
				<Ref Element = "mapper"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mapped-type">
		<dtdsource><![CDATA[
<BR>&lt;!--  The type a java-type in user-type-mapping is mapped to.--&gt;<BR>&lt;!ELEMENT mapped-type (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  The type a java-type in user-type-mapping is mapped to.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "mapper">
		<dtdsource><![CDATA[
<BR>&lt;!--  Mapper class for user-type-mapping.--&gt;<BR>&lt;!ELEMENT mapper (#PCDATA)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Mapper class for user-type-mapping.

		</DDML:Doc>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "reserved-words">
		<dtdsource><![CDATA[
<BR>&lt;!--  Provide reserved words that should be escaped when generating tables--&gt;<BR>&lt;!ELEMENT reserved-words (word+)&gt;]]>

		</dtdsource>
		<DDML:Doc>
  Provide reserved words that should be escaped when generating tables

		</DDML:Doc>
		<Model>
			<Seq>
				<Ref Element = "word" Frequency = "OneOrMore"/>
			</Seq>
		</Model>
	</ElementDecl>
	<ElementDecl Name = "word">
		<dtdsource><![CDATA[
<BR>&lt;!ELEMENT word (#PCDATA)&gt;]]>

		</dtdsource>
		<Model>
			<PCData/>
		</Model>
	</ElementDecl>
</DocumentDef>