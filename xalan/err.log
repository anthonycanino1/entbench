Built 2114889273
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
/Users/acanino/Projects/Panda/tests/dacapo/xalan-j_2_7_2/src/org/apache/xalan/extensions/XSLProcessorContext.java:202: 
    Method setRoot(int@mode<*>, java.lang.Object) in 
    org.apache.xml.dtm.DTMIterator@mode<*> cannot be called with arguments 
    (int@mode<*>, org.apache.xpath.XPathContext@mode<*>).
        iterator.setRoot(dtm.getDocument(), xctxt);
        ^----------------------------------------^

Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
/Users/acanino/Projects/Panda/tests/dacapo/xalan-j_2_7_2/src/org/apache/xalan/extensions/XSLProcessorContext.java:256-257: 
    Method cloneToResultTree(int@mode<*>, int@mode<*>, 
    org.apache.xml.dtm.DTM, org.apache.xml.serializer.SerializationHandler, 
    boolean@mode<*>) in org.apache.xalan.transformer.ClonerToResultTree 
    cannot be called with arguments (int@mode<*>, short@mode<*>, 
    org.apache.xml.dtm.DTM@mode<*>, 
    org.apache.xml.serializer.SerializationHandler@mode<*>, boolean@mode<*>).
            ClonerToResultTree.cloneToResultTree(pos, dtm.getNodeType(pos), 
            ^---------------------------------------------------------------
                                                   dtm, rtreeHandler, true);
                                                   -----------------------^

Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
Caught!
2 errors.
null
