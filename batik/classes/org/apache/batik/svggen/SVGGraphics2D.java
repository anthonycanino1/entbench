package org.apache.batik.svggen;
public class SVGGraphics2D extends org.apache.batik.ext.awt.g2d.AbstractGraphics2D implements java.lang.Cloneable, org.apache.batik.svggen.SVGSyntax, org.apache.batik.svggen.ErrorConstants {
    public static final java.lang.String DEFAULT_XML_ENCODING = "ISO-8859-1";
    public static final int DEFAULT_MAX_GC_OVERRIDES = 3;
    protected org.apache.batik.svggen.DOMTreeManager domTreeManager;
    protected org.apache.batik.svggen.DOMGroupManager domGroupManager;
    protected org.apache.batik.svggen.SVGGeneratorContext generatorCtx;
    protected org.apache.batik.svggen.SVGShape shapeConverter;
    protected java.awt.Dimension svgCanvasSize;
    protected java.awt.Graphics2D fmg;
    { java.awt.image.BufferedImage bi = new java.awt.image.BufferedImage(
        1,
        1,
        java.awt.image.BufferedImage.
          TYPE_INT_ARGB);
      fmg = bi.createGraphics(); }
    public final java.awt.Dimension getSVGCanvasSize() { return svgCanvasSize;
    }
    public final void setSVGCanvasSize(java.awt.Dimension svgCanvasSize) {
        this.
          svgCanvasSize =
          new java.awt.Dimension(
            svgCanvasSize);
    }
    public final org.apache.batik.svggen.SVGGeneratorContext getGeneratorContext() {
        return generatorCtx;
    }
    public final org.apache.batik.svggen.SVGShape getShapeConverter() {
        return shapeConverter;
    }
    public final org.apache.batik.svggen.DOMTreeManager getDOMTreeManager() {
        return domTreeManager;
    }
    protected final void setDOMTreeManager(org.apache.batik.svggen.DOMTreeManager treeMgr) {
        this.
          domTreeManager =
          treeMgr;
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    protected final org.apache.batik.svggen.DOMGroupManager getDOMGroupManager() {
        return domGroupManager;
    }
    protected final void setDOMGroupManager(org.apache.batik.svggen.DOMGroupManager groupMgr) {
        this.
          domGroupManager =
          groupMgr;
    }
    public final org.w3c.dom.Document getDOMFactory() {
        return generatorCtx.
                 domFactory;
    }
    public final org.apache.batik.svggen.ImageHandler getImageHandler() {
        return generatorCtx.
                 imageHandler;
    }
    public final org.apache.batik.svggen.GenericImageHandler getGenericImageHandler() {
        return generatorCtx.
                 genericImageHandler;
    }
    public final org.apache.batik.svggen.ExtensionHandler getExtensionHandler() {
        return generatorCtx.
                 extensionHandler;
    }
    public final void setExtensionHandler(org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory) {
        this(
          org.apache.batik.svggen.SVGGeneratorContext.
            createDefault(
              domFactory),
          false);
    }
    public SVGGraphics2D(org.w3c.dom.Document domFactory,
                         org.apache.batik.svggen.ImageHandler imageHandler,
                         org.apache.batik.svggen.ExtensionHandler extensionHandler,
                         boolean textAsShapes) {
        this(
          buildSVGGeneratorContext(
            domFactory,
            imageHandler,
            extensionHandler),
          textAsShapes);
    }
    public static org.apache.batik.svggen.SVGGeneratorContext buildSVGGeneratorContext(org.w3c.dom.Document domFactory,
                                                                                       org.apache.batik.svggen.ImageHandler imageHandler,
                                                                                       org.apache.batik.svggen.ExtensionHandler extensionHandler) {
        org.apache.batik.svggen.SVGGeneratorContext generatorCtx =
          new org.apache.batik.svggen.SVGGeneratorContext(
          domFactory);
        generatorCtx.
          setIDGenerator(
            new org.apache.batik.svggen.SVGIDGenerator(
              ));
        generatorCtx.
          setExtensionHandler(
            extensionHandler);
        generatorCtx.
          setImageHandler(
            imageHandler);
        generatorCtx.
          setStyleHandler(
            new org.apache.batik.svggen.DefaultStyleHandler(
              ));
        generatorCtx.
          setComment(
            "Generated by the Batik Graphics2D SVG Generator");
        generatorCtx.
          setErrorHandler(
            new org.apache.batik.svggen.DefaultErrorHandler(
              ));
        return generatorCtx;
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGeneratorContext generatorCtx,
                         boolean textAsShapes) {
        super(
          textAsShapes);
        if (generatorCtx ==
              null)
            throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_CONTEXT_NULL);
        setGeneratorContext(
          generatorCtx);
    }
    protected void setGeneratorContext(org.apache.batik.svggen.SVGGeneratorContext generatorCtx) {
        this.
          generatorCtx =
          generatorCtx;
        this.
          gc =
          new org.apache.batik.ext.awt.g2d.GraphicContext(
            new java.awt.geom.AffineTransform(
              ));
        org.apache.batik.svggen.SVGGeneratorContext.GraphicContextDefaults gcDefaults =
          generatorCtx.
          getGraphicContextDefaults(
            );
        if (gcDefaults !=
              null) {
            if (gcDefaults.
                  getPaint(
                    ) !=
                  null) {
                gc.
                  setPaint(
                    gcDefaults.
                      getPaint(
                        ));
            }
            if (gcDefaults.
                  getStroke(
                    ) !=
                  null) {
                gc.
                  setStroke(
                    gcDefaults.
                      getStroke(
                        ));
            }
            if (gcDefaults.
                  getComposite(
                    ) !=
                  null) {
                gc.
                  setComposite(
                    gcDefaults.
                      getComposite(
                        ));
            }
            if (gcDefaults.
                  getClip(
                    ) !=
                  null) {
                gc.
                  setClip(
                    gcDefaults.
                      getClip(
                        ));
            }
            if (gcDefaults.
                  getRenderingHints(
                    ) !=
                  null) {
                gc.
                  setRenderingHints(
                    gcDefaults.
                      getRenderingHints(
                        ));
            }
            if (gcDefaults.
                  getFont(
                    ) !=
                  null) {
                gc.
                  setFont(
                    gcDefaults.
                      getFont(
                        ));
            }
            if (gcDefaults.
                  getBackground(
                    ) !=
                  null) {
                gc.
                  setBackground(
                    gcDefaults.
                      getBackground(
                        ));
            }
        }
        this.
          shapeConverter =
          new org.apache.batik.svggen.SVGShape(
            generatorCtx);
        this.
          domTreeManager =
          new org.apache.batik.svggen.DOMTreeManager(
            gc,
            generatorCtx,
            DEFAULT_MAX_GC_OVERRIDES);
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            gc,
            domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            domGroupManager);
        generatorCtx.
          genericImageHandler.
          setDOMTreeManager(
            domTreeManager);
    }
    public SVGGraphics2D(org.apache.batik.svggen.SVGGraphics2D g) {
        super(
          g);
        this.
          generatorCtx =
          g.
            generatorCtx;
        this.
          gc.
          validateTransformStack(
            );
        this.
          shapeConverter =
          g.
            shapeConverter;
        this.
          domTreeManager =
          g.
            domTreeManager;
        this.
          domGroupManager =
          new org.apache.batik.svggen.DOMGroupManager(
            this.
              gc,
            this.
              domTreeManager);
        this.
          domTreeManager.
          addGroupManager(
            this.
              domGroupManager);
    }
    public void stream(java.lang.String svgFileName)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgFileName,
          false);
    }
    public void stream(java.lang.String svgFileName,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        try {
            java.io.OutputStreamWriter writer =
              new java.io.OutputStreamWriter(
              new java.io.FileOutputStream(
                svgFileName),
              DEFAULT_XML_ENCODING);
            stream(
              writer,
              useCss);
            writer.
              flush(
                );
            writer.
              close(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException io) {
            throw io;
        }
        catch (java.io.IOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  e));
        }
    }
    public void stream(java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          writer,
          false);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          escaped);
    }
    public void stream(java.io.Writer writer,
                       boolean useCss) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Element svgRoot =
          getRoot(
            );
        stream(
          svgRoot,
          writer,
          useCss,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer)
          throws org.apache.batik.svggen.SVGGraphics2DIOException {
        stream(
          svgRoot,
          writer,
          false,
          false);
    }
    public void stream(org.w3c.dom.Element svgRoot,
                       java.io.Writer writer,
                       boolean useCss,
                       boolean escaped) throws org.apache.batik.svggen.SVGGraphics2DIOException {
        org.w3c.dom.Node rootParent =
          svgRoot.
          getParentNode(
            );
        org.w3c.dom.Node nextSibling =
          svgRoot.
          getNextSibling(
            );
        try {
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX,
                SVG_NAMESPACE_URI);
            svgRoot.
              setAttributeNS(
                XMLNS_NAMESPACE_URI,
                XMLNS_PREFIX +
                ":" +
                XLINK_PREFIX,
                XLINK_NAMESPACE_URI);
            org.w3c.dom.DocumentFragment svgDocument =
              svgRoot.
              getOwnerDocument(
                ).
              createDocumentFragment(
                );
            svgDocument.
              appendChild(
                svgRoot);
            if (useCss)
                org.apache.batik.svggen.SVGCSSStyler.
                  style(
                    svgDocument);
            org.apache.batik.svggen.XmlWriter.
              writeXml(
                svgDocument,
                writer,
                escaped);
            writer.
              flush(
                );
        }
        catch (org.apache.batik.svggen.SVGGraphics2DIOException e) {
            generatorCtx.
              errorHandler.
              handleError(
                e);
        }
        catch (java.io.IOException io) {
            generatorCtx.
              errorHandler.
              handleError(
                new org.apache.batik.svggen.SVGGraphics2DIOException(
                  io));
        }
        finally {
            if (rootParent !=
                  null) {
                if (nextSibling ==
                      null) {
                    rootParent.
                      appendChild(
                        svgRoot);
                }
                else {
                    rootParent.
                      insertBefore(
                        svgRoot,
                        nextSibling);
                }
            }
        }
    }
    public java.util.List getDefinitionSet() {
        return domTreeManager.
          getDefinitionSet(
            );
    }
    public org.w3c.dom.Element getTopLevelGroup() {
        return getTopLevelGroup(
                 true);
    }
    public org.w3c.dom.Element getTopLevelGroup(boolean includeDefinitionSet) {
        return domTreeManager.
          getTopLevelGroup(
            includeDefinitionSet);
    }
    public void setTopLevelGroup(org.w3c.dom.Element topLevelGroup) {
        domTreeManager.
          setTopLevelGroup(
            topLevelGroup);
    }
    public org.w3c.dom.Element getRoot() {
        return getRoot(
                 null);
    }
    public org.w3c.dom.Element getRoot(org.w3c.dom.Element svgRoot) {
        svgRoot =
          domTreeManager.
            getRoot(
              svgRoot);
        if (svgCanvasSize !=
              null) {
            svgRoot.
              setAttributeNS(
                null,
                SVG_WIDTH_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      width));
            svgRoot.
              setAttributeNS(
                null,
                SVG_HEIGHT_ATTRIBUTE,
                java.lang.String.
                  valueOf(
                    svgCanvasSize.
                      height));
        }
        return svgRoot;
    }
    public java.awt.Graphics create() { return new org.apache.batik.svggen.SVGGraphics2D(
                                          this);
    }
    public void setXORMode(java.awt.Color c1) {
        generatorCtx.
          errorHandler.
          handleError(
            new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
              ERR_XOR));
    }
    public java.awt.FontMetrics getFontMetrics(java.awt.Font f) {
        return fmg.
          getFontMetrics(
            f);
    }
    public void copyArea(int x, int y, int width,
                         int height,
                         int dx,
                         int dy) {  }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            img.
              getWidth(
                null),
            img.
              getHeight(
                null),
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public boolean drawImage(java.awt.Image img,
                             int x,
                             int y,
                             int width,
                             int height,
                             java.awt.image.ImageObserver observer) {
        org.w3c.dom.Element imageElement =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            imageElement,
            x,
            y,
            width,
            height,
            getGeneratorContext(
              ));
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                imageElement);
        }
        else {
            java.awt.geom.AffineTransform inverseTransform =
              null;
            try {
                inverseTransform =
                  xform.
                    createInverse(
                      );
            }
            catch (java.awt.geom.NoninvertibleTransformException e) {
                throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                  ERR_UNEXPECTED);
            }
            gc.
              transform(
                xform);
            domGroupManager.
              addElement(
                imageElement);
            gc.
              transform(
                inverseTransform);
        }
        return true;
    }
    public void dispose() { this.domTreeManager.
                              removeGroupManager(
                                this.
                                  domGroupManager);
    }
    public void draw(java.awt.Shape s) { java.awt.Stroke stroke =
                                           gc.
                                           getStroke(
                                             );
                                         if (stroke instanceof java.awt.BasicStroke) {
                                             org.w3c.dom.Element svgShape =
                                               shapeConverter.
                                               toSVG(
                                                 s);
                                             if (svgShape !=
                                                   null) {
                                                 domGroupManager.
                                                   addElement(
                                                     svgShape,
                                                     org.apache.batik.svggen.DOMGroupManager.
                                                       DRAW);
                                             }
                                         }
                                         else {
                                             java.awt.Shape strokedShape =
                                               stroke.
                                               createStrokedShape(
                                                 s);
                                             fill(
                                               strokedShape);
                                         }
    }
    public boolean drawImage(java.awt.Image img,
                             java.awt.geom.AffineTransform xform,
                             java.awt.image.ImageObserver obs) {
        boolean retVal =
          true;
        if (xform ==
              null) {
            retVal =
              drawImage(
                img,
                0,
                0,
                null);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                retVal =
                  drawImage(
                    img,
                    0,
                    0,
                    null);
                gc.
                  setTransform(
                    savTransform);
            }
        return retVal;
    }
    public void drawImage(java.awt.image.BufferedImage img,
                          java.awt.image.BufferedImageOp op,
                          int x,
                          int y) { img = op.
                                           filter(
                                             img,
                                             null);
                                   drawImage(
                                     img,
                                     x,
                                     y,
                                     null);
    }
    public void drawRenderedImage(java.awt.image.RenderedImage img,
                                  java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawRenderableImage(java.awt.image.renderable.RenderableImage img,
                                    java.awt.geom.AffineTransform trans2) {
        org.w3c.dom.Element image =
          getGenericImageHandler(
            ).
          createElement(
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform trans1 =
          getGenericImageHandler(
            ).
          handleImage(
            img,
            image,
            img.
              getMinX(
                ),
            img.
              getMinY(
                ),
            img.
              getWidth(
                ),
            img.
              getHeight(
                ),
            getGeneratorContext(
              ));
        java.awt.geom.AffineTransform xform;
        if (trans2 ==
              null) {
            xform =
              trans1;
        }
        else {
            if (trans1 ==
                  null) {
                xform =
                  trans2;
            }
            else {
                xform =
                  new java.awt.geom.AffineTransform(
                    trans2);
                xform.
                  concatenate(
                    trans1);
            }
        }
        if (xform ==
              null) {
            domGroupManager.
              addElement(
                image);
        }
        else
            if (xform.
                  getDeterminant(
                    ) !=
                  0) {
                java.awt.geom.AffineTransform inverseTransform =
                  null;
                try {
                    inverseTransform =
                      xform.
                        createInverse(
                          );
                }
                catch (java.awt.geom.NoninvertibleTransformException e) {
                    throw new org.apache.batik.svggen.SVGGraphics2DRuntimeException(
                      ERR_UNEXPECTED);
                }
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  transform(
                    inverseTransform);
            }
            else {
                java.awt.geom.AffineTransform savTransform =
                  new java.awt.geom.AffineTransform(
                  gc.
                    getTransform(
                      ));
                gc.
                  transform(
                    xform);
                domGroupManager.
                  addElement(
                    image);
                gc.
                  setTransform(
                    savTransform);
            }
    }
    public void drawString(java.lang.String s,
                           float x,
                           float y) { if (textAsShapes) {
                                          java.awt.font.GlyphVector gv =
                                            getFont(
                                              ).
                                            createGlyphVector(
                                              getFontRenderContext(
                                                ),
                                              s);
                                          drawGlyphVector(
                                            gv,
                                            x,
                                            y);
                                          return;
                                      }
                                      if (generatorCtx.
                                            svgFont) {
                                          domTreeManager.
                                            gcConverter.
                                            getFontConverter(
                                              ).
                                            recordFontUsage(
                                              s,
                                              getFont(
                                                ));
                                      }
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        transformText(
                                          x,
                                          y);
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      text.
                                        appendChild(
                                          getDOMFactory(
                                            ).
                                            createTextNode(
                                              s));
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      if (txtTxf !=
                                            null) {
                                          this.
                                            setTransform(
                                              savTxf);
                                      } }
    private java.awt.geom.AffineTransform transformText(float x,
                                                        float y) {
        java.awt.geom.AffineTransform txtTxf =
          null;
        java.awt.Font font =
          getFont(
            );
        if (font !=
              null) {
            txtTxf =
              font.
                getTransform(
                  );
            if (txtTxf !=
                  null &&
                  !txtTxf.
                  isIdentity(
                    )) {
                java.awt.geom.AffineTransform t =
                  new java.awt.geom.AffineTransform(
                  );
                t.
                  translate(
                    x,
                    y);
                t.
                  concatenate(
                    txtTxf);
                t.
                  translate(
                    -x,
                    -y);
                this.
                  transform(
                    t);
            }
            else {
                txtTxf =
                  null;
            }
        }
        return txtTxf;
    }
    public void drawString(java.text.AttributedCharacterIterator ati,
                           float x,
                           float y) { if (textAsShapes ||
                                            usesUnsupportedAttributes(
                                              ati)) {
                                          java.awt.font.TextLayout layout =
                                            new java.awt.font.TextLayout(
                                            ati,
                                            getFontRenderContext(
                                              ));
                                          layout.
                                            draw(
                                              this,
                                              x,
                                              y);
                                          return;
                                      }
                                      boolean multiSpans =
                                        false;
                                      if (ati.
                                            getRunLimit(
                                              ) <
                                            ati.
                                            getEndIndex(
                                              ))
                                          multiSpans =
                                            true;
                                      org.w3c.dom.Element text =
                                        getDOMFactory(
                                          ).
                                        createElementNS(
                                          SVG_NAMESPACE_URI,
                                          SVG_TEXT_TAG);
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_X_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              x));
                                      text.
                                        setAttributeNS(
                                          null,
                                          SVG_Y_ATTRIBUTE,
                                          generatorCtx.
                                            doubleString(
                                              y));
                                      text.
                                        setAttributeNS(
                                          XML_NAMESPACE_URI,
                                          XML_SPACE_QNAME,
                                          XML_PRESERVE_VALUE);
                                      java.awt.Font baseFont =
                                        getFont(
                                          );
                                      java.awt.Paint basePaint =
                                        getPaint(
                                          );
                                      char ch =
                                        ati.
                                        first(
                                          );
                                      setTextElementFill(
                                        ati);
                                      setTextFontAttributes(
                                        ati,
                                        baseFont);
                                      org.apache.batik.svggen.SVGGraphicContext textGC;
                                      textGC =
                                        domTreeManager.
                                          getGraphicContextConverter(
                                            ).
                                          toSVG(
                                            gc);
                                      domGroupManager.
                                        addElement(
                                          text,
                                          org.apache.batik.svggen.DOMGroupManager.
                                            FILL);
                                      textGC.
                                        getContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      textGC.
                                        getGroupContext(
                                          ).
                                        put(
                                          SVG_STROKE_ATTRIBUTE,
                                          SVG_NONE_VALUE);
                                      boolean firstSpan =
                                        true;
                                      java.awt.geom.AffineTransform savTxf =
                                        getTransform(
                                          );
                                      java.awt.geom.AffineTransform txtTxf =
                                        null;
                                      while (ch !=
                                               java.text.AttributedCharacterIterator.
                                                 DONE) {
                                          org.w3c.dom.Element tspan =
                                            text;
                                          if (multiSpans) {
                                              tspan =
                                                getDOMFactory(
                                                  ).
                                                  createElementNS(
                                                    SVG_NAMESPACE_URI,
                                                    SVG_TSPAN_TAG);
                                              text.
                                                appendChild(
                                                  tspan);
                                          }
                                          setTextElementFill(
                                            ati);
                                          boolean resetTransform =
                                            setTextFontAttributes(
                                              ati,
                                              baseFont);
                                          if (resetTransform ||
                                                firstSpan) {
                                              txtTxf =
                                                transformText(
                                                  x,
                                                  y);
                                              firstSpan =
                                                false;
                                          }
                                          int start =
                                            ati.
                                            getIndex(
                                              );
                                          int end =
                                            ati.
                                            getRunLimit(
                                              ) -
                                            1;
                                          java.lang.StringBuffer buf =
                                            new java.lang.StringBuffer(
                                            end -
                                              start);
                                          buf.
                                            append(
                                              ch);
                                          for (int i =
                                                 start;
                                               i <
                                                 end;
                                               i++) {
                                              ch =
                                                ati.
                                                  next(
                                                    );
                                              buf.
                                                append(
                                                  ch);
                                          }
                                          java.lang.String s =
                                            buf.
                                            toString(
                                              );
                                          if (generatorCtx.
                                                isEmbeddedFontsOn(
                                                  )) {
                                              getDOMTreeManager(
                                                ).
                                                getGraphicContextConverter(
                                                  ).
                                                getFontConverter(
                                                  ).
                                                recordFontUsage(
                                                  s,
                                                  getFont(
                                                    ));
                                          }
                                          org.apache.batik.svggen.SVGGraphicContext elementGC;
                                          elementGC =
                                            domTreeManager.
                                              gcConverter.
                                              toSVG(
                                                gc);
                                          elementGC.
                                            getGroupContext(
                                              ).
                                            put(
                                              SVG_STROKE_ATTRIBUTE,
                                              SVG_NONE_VALUE);
                                          org.apache.batik.svggen.SVGGraphicContext deltaGC;
                                          deltaGC =
                                            org.apache.batik.svggen.DOMGroupManager.
                                              processDeltaGC(
                                                elementGC,
                                                textGC);
                                          setTextElementAttributes(
                                            deltaGC,
                                            ati);
                                          domTreeManager.
                                            getStyleHandler(
                                              ).
                                            setStyle(
                                              tspan,
                                              deltaGC.
                                                getContext(
                                                  ),
                                              domTreeManager.
                                                getGeneratorContext(
                                                  ));
                                          tspan.
                                            appendChild(
                                              getDOMFactory(
                                                ).
                                                createTextNode(
                                                  s));
                                          if ((resetTransform ||
                                                 firstSpan) &&
                                                txtTxf !=
                                                null) {
                                              this.
                                                setTransform(
                                                  savTxf);
                                          }
                                          ch =
                                            ati.
                                              next(
                                                );
                                      }
                                      setFont(
                                        baseFont);
                                      setPaint(
                                        basePaint);
    }
    public void fill(java.awt.Shape s) { org.w3c.dom.Element svgShape =
                                           shapeConverter.
                                           toSVG(
                                             s);
                                         if (svgShape !=
                                               null) {
                                             domGroupManager.
                                               addElement(
                                                 svgShape,
                                                 org.apache.batik.svggen.DOMGroupManager.
                                                   FILL);
                                         }
    }
    private boolean setTextFontAttributes(java.text.AttributedCharacterIterator ati,
                                          java.awt.Font baseFont) {
        boolean resetTransform =
          false;
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FONT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FAMILY) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  WEIGHT) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  POSTURE) !=
              null ||
              ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  SIZE) !=
              null) {
            java.util.Map m =
              ati.
              getAttributes(
                );
            java.awt.Font f =
              baseFont.
              deriveFont(
                m);
            setFont(
              f);
            resetTransform =
              true;
        }
        return resetTransform;
    }
    private void setTextElementFill(java.text.AttributedCharacterIterator ati) {
        if (ati.
              getAttribute(
                java.awt.font.TextAttribute.
                  FOREGROUND) !=
              null) {
            java.awt.Color color =
              (java.awt.Color)
                ati.
                getAttribute(
                  java.awt.font.TextAttribute.
                    FOREGROUND);
            setPaint(
              color);
        }
    }
    private void setTextElementAttributes(org.apache.batik.svggen.SVGGraphicContext tspanGC,
                                          java.text.AttributedCharacterIterator ati) {
        java.lang.String decoration =
          "";
        if (isUnderline(
              ati))
            decoration +=
              CSS_UNDERLINE_VALUE +
              " ";
        if (isStrikeThrough(
              ati))
            decoration +=
              CSS_LINE_THROUGH_VALUE +
              " ";
        int len =
          decoration.
          length(
            );
        if (len !=
              0)
            tspanGC.
              getContext(
                ).
              put(
                CSS_TEXT_DECORATION_PROPERTY,
                decoration.
                  substring(
                    0,
                    len -
                      1));
    }
    private boolean isBold(java.text.AttributedCharacterIterator ati) {
        java.lang.Object weight =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              WEIGHT);
        if (weight ==
              null)
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_REGULAR))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_DEMILIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_EXTRA_LIGHT))
            return false;
        if (weight.
              equals(
                java.awt.font.TextAttribute.
                  WEIGHT_LIGHT))
            return false;
        return true;
    }
    private boolean isItalic(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              POSTURE);
        if (java.awt.font.TextAttribute.
              POSTURE_OBLIQUE.
              equals(
                attr))
            return true;
        return false;
    }
    private boolean isUnderline(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              UNDERLINE);
        if (java.awt.font.TextAttribute.
              UNDERLINE_ON.
              equals(
                attr))
            return true;
        else
            return false;
    }
    private boolean isStrikeThrough(java.text.AttributedCharacterIterator ati) {
        java.lang.Object attr =
          ati.
          getAttribute(
            java.awt.font.TextAttribute.
              STRIKETHROUGH);
        if (java.awt.font.TextAttribute.
              STRIKETHROUGH_ON.
              equals(
                attr))
            return true;
        return false;
    }
    public java.awt.GraphicsConfiguration getDeviceConfiguration() {
        return null;
    }
    protected java.util.Set unsupportedAttributes;
    { unsupportedAttributes = new java.util.HashSet(
                                );
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BACKGROUND);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  BIDI_EMBEDDING);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  CHAR_REPLACEMENT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  JUSTIFICATION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  RUN_DIRECTION);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SUPERSCRIPT);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  SWAP_COLORS);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  TRANSFORM);
      unsupportedAttributes.add(java.awt.font.TextAttribute.
                                  WIDTH);
    }
    public void setUnsupportedAttributes(java.util.Set attrs) {
        if (attrs ==
              null)
            unsupportedAttributes =
              null;
        else
            unsupportedAttributes =
              new java.util.HashSet(
                attrs);
    }
    public boolean usesUnsupportedAttributes(java.text.AttributedCharacterIterator aci) {
        if (unsupportedAttributes ==
              null)
            return false;
        java.util.Set allAttrs =
          aci.
          getAllAttributeKeys(
            );
        java.util.Iterator iter =
          allAttrs.
          iterator(
            );
        while (iter.
                 hasNext(
                   )) {
            if (unsupportedAttributes.
                  contains(
                    iter.
                      next(
                        ))) {
                return true;
            }
        }
        return false;
    }
    public static final java.lang.String jlc$CompilerVersion$jl7 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl7 =
      1471188908000L;
    public static final java.lang.String jlc$ClassType$jl7 =
      ("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");
    public static final java.lang.String jlc$CompilerVersion$jl5 =
      "2.7.0";
    public static final long jlc$SourceLastModified$jl5 =
      1471188908000L;
    public static final java.lang.String jlc$ClassType$jl5 =
      ("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" +
       "4VJ7Pia5MjU3c8qoiumdUCsM2bLWR6ui");
    public static final java.lang.String jlc$ClassType$jl5$1 =
      ("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");
}
